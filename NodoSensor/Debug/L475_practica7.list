
L475_practica7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c48  0800d978  0800d978  0001d978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5c0  0800e5c0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800e5c0  0800e5c0  0001e5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e5c8  0800e5c8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5c8  0800e5c8  0001e5c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e5cc  0800e5cc  0001e5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800e5d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004028  20000088  0800e658  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040b0  0800e658  000240b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028fd2  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000056e6  00000000  00000000  000490cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002410  00000000  00000000  0004e7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001bdc  00000000  00000000  00050bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000076a6  00000000  00000000  000527a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028d3d  00000000  00000000  00059e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001038df  00000000  00000000  00082b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a5d8  00000000  00000000  00186468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00190a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d960 	.word	0x0800d960

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800d960 	.word	0x0800d960

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	2b00      	cmp	r3, #0
 8000592:	d013      	beq.n	80005bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800059c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d00b      	beq.n	80005bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	e000      	b.n	80005a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f9      	beq.n	80005a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005bc:	687b      	ldr	r3, [r7, #4]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <_write>:
extern UART_HandleTypeDef hDiscoUart;
#endif /* TERMINAL_USE */

static  uint8_t  IP_Addr[4];

int _write(int file, char *ptr, int len){
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b086      	sub	sp, #24
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	60f8      	str	r0, [r7, #12]
 80005d2:	60b9      	str	r1, [r7, #8]
 80005d4:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++)
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
 80005da:	e009      	b.n	80005f0 <_write+0x26>
	{
	ITM_SendChar(*ptr++);
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	1c5a      	adds	r2, r3, #1
 80005e0:	60ba      	str	r2, [r7, #8]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ffc9 	bl	800057c <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	3301      	adds	r3, #1
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	dbf1      	blt.n	80005dc <_write+0x12>
	}
	return len;
 80005f8:	687b      	ldr	r3, [r7, #4]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3718      	adds	r7, #24
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f001 fbbf 	bl	8001d8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f860 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 fa28 	bl	8000a64 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000614:	f000 f8be 	bl	8000794 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000618:	f000 f8f4 	bl	8000804 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800061c:	f000 f930 	bl	8000880 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000620:	f000 f954 	bl	80008cc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000624:	f000 f990 	bl	8000948 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000628:	f000 f9be 	bl	80009a8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800062c:	f000 f9ec 	bl	8000a08 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 8000630:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <main+0xa8>)
 8000632:	4a1f      	ldr	r2, [pc, #124]	; (80006b0 <main+0xac>)
 8000634:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 8000636:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <main+0xa8>)
 8000638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800063c:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 800063e:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <main+0xa8>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8000644:	4b19      	ldr	r3, [pc, #100]	; (80006ac <main+0xa8>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 800064a:	4b18      	ldr	r3, [pc, #96]	; (80006ac <main+0xa8>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <main+0xa8>)
 8000652:	220c      	movs	r2, #12
 8000654:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <main+0xa8>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <main+0xa8>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <main+0xa8>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000668:	4b10      	ldr	r3, [pc, #64]	; (80006ac <main+0xa8>)
 800066a:	2200      	movs	r2, #0
 800066c:	625a      	str	r2, [r3, #36]	; 0x24


  BSP_COM_Init(COM1, &hDiscoUart);
 800066e:	490f      	ldr	r1, [pc, #60]	; (80006ac <main+0xa8>)
 8000670:	2000      	movs	r0, #0
 8000672:	f007 f833 	bl	80076dc <BSP_COM_Init>

#endif /* TERMINAL_USE */

BSP_TSENSOR_Init();
 8000676:	f007 f9ed 	bl	8007a54 <BSP_TSENSOR_Init>

printf("****** Sistemas Ciberfisicos ****** \n\r");
 800067a:	480e      	ldr	r0, [pc, #56]	; (80006b4 <main+0xb0>)
 800067c:	f00b ff90 	bl	800c5a0 <iprintf>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000680:	f009 f97c 	bl	800997c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000684:	4a0c      	ldr	r2, [pc, #48]	; (80006b8 <main+0xb4>)
 8000686:	2100      	movs	r1, #0
 8000688:	480c      	ldr	r0, [pc, #48]	; (80006bc <main+0xb8>)
 800068a:	f009 f9c1 	bl	8009a10 <osThreadNew>
 800068e:	4603      	mov	r3, r0
 8000690:	4a0b      	ldr	r2, [pc, #44]	; (80006c0 <main+0xbc>)
 8000692:	6013      	str	r3, [r2, #0]

  /* creation of wifiStart */
  wifiStartHandle = osThreadNew(wifiStartTask, NULL, &wifiStart_attributes);
 8000694:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <main+0xc0>)
 8000696:	2100      	movs	r1, #0
 8000698:	480b      	ldr	r0, [pc, #44]	; (80006c8 <main+0xc4>)
 800069a:	f009 f9b9 	bl	8009a10 <osThreadNew>
 800069e:	4603      	mov	r3, r0
 80006a0:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <main+0xc8>)
 80006a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006a4:	f009 f98e 	bl	80099c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <main+0xa4>
 80006aa:	bf00      	nop
 80006ac:	20001488 	.word	0x20001488
 80006b0:	40013800 	.word	0x40013800
 80006b4:	0800d990 	.word	0x0800d990
 80006b8:	0800e450 	.word	0x0800e450
 80006bc:	08000dd9 	.word	0x08000dd9
 80006c0:	20000ff8 	.word	0x20000ff8
 80006c4:	0800e474 	.word	0x0800e474
 80006c8:	080014fd 	.word	0x080014fd
 80006cc:	20000ffc 	.word	0x20000ffc

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b096      	sub	sp, #88	; 0x58
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2244      	movs	r2, #68	; 0x44
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f00c f8d4 	bl	800c88c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	463b      	mov	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006f6:	f003 f907 	bl	8003908 <HAL_PWREx_ControlVoltageScaling>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000700:	f000 ff06 	bl	8001510 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000704:	f003 f8e2 	bl	80038cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <SystemClock_Config+0xc0>)
 800070a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemClock_Config+0xc0>)
 8000710:	f023 0318 	bic.w	r3, r3, #24
 8000714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000718:	2314      	movs	r3, #20
 800071a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000728:	2360      	movs	r3, #96	; 0x60
 800072a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000730:	2301      	movs	r3, #1
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000734:	2301      	movs	r3, #1
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000738:	2328      	movs	r3, #40	; 0x28
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800073c:	2307      	movs	r3, #7
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000740:	2302      	movs	r3, #2
 8000742:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4618      	mov	r0, r3
 800074e:	f003 f9fd 	bl	8003b4c <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000758:	f000 feda 	bl	8001510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2303      	movs	r3, #3
 8000762:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	2104      	movs	r1, #4
 8000774:	4618      	mov	r0, r3
 8000776:	f003 fdc5 	bl	8004304 <HAL_RCC_ClockConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000780:	f000 fec6 	bl	8001510 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000784:	f004 facc 	bl	8004d20 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000788:	bf00      	nop
 800078a:	3758      	adds	r7, #88	; 0x58
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40021000 	.word	0x40021000

08000794 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_DFSDM1_Init+0x68>)
 800079a:	4a19      	ldr	r2, [pc, #100]	; (8000800 <MX_DFSDM1_Init+0x6c>)
 800079c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_DFSDM1_Init+0x68>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_DFSDM1_Init+0x68>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_DFSDM1_Init+0x68>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_DFSDM1_Init+0x68>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_DFSDM1_Init+0x68>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_DFSDM1_Init+0x68>)
 80007be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007c2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80007c4:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_DFSDM1_Init+0x68>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_DFSDM1_Init+0x68>)
 80007cc:	2204      	movs	r2, #4
 80007ce:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_DFSDM1_Init+0x68>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_DFSDM1_Init+0x68>)
 80007d8:	2201      	movs	r2, #1
 80007da:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_DFSDM1_Init+0x68>)
 80007de:	2200      	movs	r2, #0
 80007e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_DFSDM1_Init+0x68>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_DFSDM1_Init+0x68>)
 80007ea:	f001 fcab 	bl	8002144 <HAL_DFSDM_ChannelInit>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80007f4:	f000 fe8c 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200000a4 	.word	0x200000a4
 8000800:	40016020 	.word	0x40016020

08000804 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <MX_I2C2_Init+0x74>)
 800080a:	4a1c      	ldr	r2, [pc, #112]	; (800087c <MX_I2C2_Init+0x78>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_I2C2_Init+0x74>)
 8000810:	f640 6214 	movw	r2, #3604	; 0xe14
 8000814:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_I2C2_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <MX_I2C2_Init+0x74>)
 800081e:	2201      	movs	r2, #1
 8000820:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <MX_I2C2_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_I2C2_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_I2C2_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000834:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_I2C2_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_I2C2_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000840:	480d      	ldr	r0, [pc, #52]	; (8000878 <MX_I2C2_Init+0x74>)
 8000842:	f002 f8b3 	bl	80029ac <HAL_I2C_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800084c:	f000 fe60 	bl	8001510 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000850:	2100      	movs	r1, #0
 8000852:	4809      	ldr	r0, [pc, #36]	; (8000878 <MX_I2C2_Init+0x74>)
 8000854:	f002 fe5a 	bl	800350c <HAL_I2CEx_ConfigAnalogFilter>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800085e:	f000 fe57 	bl	8001510 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000862:	2100      	movs	r1, #0
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <MX_I2C2_Init+0x74>)
 8000866:	f002 fe9c 	bl	80035a2 <HAL_I2CEx_ConfigDigitalFilter>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000870:	f000 fe4e 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200000dc 	.word	0x200000dc
 800087c:	40005800 	.word	0x40005800

08000880 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_QUADSPI_Init+0x44>)
 8000886:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <MX_QUADSPI_Init+0x48>)
 8000888:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_QUADSPI_Init+0x44>)
 800088c:	2202      	movs	r2, #2
 800088e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_QUADSPI_Init+0x44>)
 8000892:	2204      	movs	r2, #4
 8000894:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_QUADSPI_Init+0x44>)
 8000898:	2210      	movs	r2, #16
 800089a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_QUADSPI_Init+0x44>)
 800089e:	2217      	movs	r2, #23
 80008a0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_QUADSPI_Init+0x44>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_QUADSPI_Init+0x44>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_QUADSPI_Init+0x44>)
 80008b0:	f003 f890 	bl	80039d4 <HAL_QSPI_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80008ba:	f000 fe29 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000130 	.word	0x20000130
 80008c8:	a0001000 	.word	0xa0001000

080008cc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_SPI3_Init+0x74>)
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <MX_SPI3_Init+0x78>)
 80008d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_SPI3_Init+0x74>)
 80008d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_SPI3_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_SPI3_Init+0x74>)
 80008e6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008ea:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_SPI3_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_SPI3_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_SPI3_Init+0x74>)
 80008fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008fe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_SPI3_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_SPI3_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_SPI3_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_SPI3_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_SPI3_Init+0x74>)
 800091a:	2207      	movs	r2, #7
 800091c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_SPI3_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_SPI3_Init+0x74>)
 8000926:	2208      	movs	r2, #8
 8000928:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_SPI3_Init+0x74>)
 800092c:	f004 fbda 	bl	80050e4 <HAL_SPI_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000936:	f000 fdeb 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000174 	.word	0x20000174
 8000944:	40003c00 	.word	0x40003c00

08000948 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_USART1_UART_Init+0x58>)
 800094e:	4a15      	ldr	r2, [pc, #84]	; (80009a4 <MX_USART1_UART_Init+0x5c>)
 8000950:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_USART1_UART_Init+0x58>)
 8000954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000958:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_USART1_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_USART1_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_USART1_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_USART1_UART_Init+0x58>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_USART1_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_USART1_UART_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_USART1_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_USART1_UART_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_USART1_UART_Init+0x58>)
 800098c:	f005 fedf 	bl	800674e <HAL_UART_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000996:	f000 fdbb 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200001d8 	.word	0x200001d8
 80009a4:	40013800 	.word	0x40013800

080009a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_USART3_UART_Init+0x58>)
 80009ae:	4a15      	ldr	r2, [pc, #84]	; (8000a04 <MX_USART3_UART_Init+0x5c>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <MX_USART3_UART_Init+0x58>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_USART3_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_USART3_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_USART3_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_USART3_UART_Init+0x58>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_USART3_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_USART3_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_USART3_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_USART3_UART_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_USART3_UART_Init+0x58>)
 80009ec:	f005 feaf 	bl	800674e <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009f6:	f000 fd8b 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000260 	.word	0x20000260
 8000a04:	40004800 	.word	0x40004800

08000a08 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a16:	2206      	movs	r2, #6
 8000a18:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a22:	2202      	movs	r2, #2
 8000a24:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4c:	f002 fdf5 	bl	800363a <HAL_PCD_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a56:	f000 fd5b 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200002e8 	.word	0x200002e8

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a7a:	4bbd      	ldr	r3, [pc, #756]	; (8000d70 <MX_GPIO_Init+0x30c>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4abc      	ldr	r2, [pc, #752]	; (8000d70 <MX_GPIO_Init+0x30c>)
 8000a80:	f043 0310 	orr.w	r3, r3, #16
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4bba      	ldr	r3, [pc, #744]	; (8000d70 <MX_GPIO_Init+0x30c>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0310 	and.w	r3, r3, #16
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	4bb7      	ldr	r3, [pc, #732]	; (8000d70 <MX_GPIO_Init+0x30c>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4ab6      	ldr	r2, [pc, #728]	; (8000d70 <MX_GPIO_Init+0x30c>)
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4bb4      	ldr	r3, [pc, #720]	; (8000d70 <MX_GPIO_Init+0x30c>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0304 	and.w	r3, r3, #4
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4bb1      	ldr	r3, [pc, #708]	; (8000d70 <MX_GPIO_Init+0x30c>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	4ab0      	ldr	r2, [pc, #704]	; (8000d70 <MX_GPIO_Init+0x30c>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab6:	4bae      	ldr	r3, [pc, #696]	; (8000d70 <MX_GPIO_Init+0x30c>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	4bab      	ldr	r3, [pc, #684]	; (8000d70 <MX_GPIO_Init+0x30c>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	4aaa      	ldr	r2, [pc, #680]	; (8000d70 <MX_GPIO_Init+0x30c>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ace:	4ba8      	ldr	r3, [pc, #672]	; (8000d70 <MX_GPIO_Init+0x30c>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ada:	4ba5      	ldr	r3, [pc, #660]	; (8000d70 <MX_GPIO_Init+0x30c>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	4aa4      	ldr	r2, [pc, #656]	; (8000d70 <MX_GPIO_Init+0x30c>)
 8000ae0:	f043 0308 	orr.w	r3, r3, #8
 8000ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae6:	4ba2      	ldr	r3, [pc, #648]	; (8000d70 <MX_GPIO_Init+0x30c>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	f003 0308 	and.w	r3, r3, #8
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000af8:	489e      	ldr	r0, [pc, #632]	; (8000d74 <MX_GPIO_Init+0x310>)
 8000afa:	f001 ff27 	bl	800294c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f248 1104 	movw	r1, #33028	; 0x8104
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b08:	f001 ff20 	bl	800294c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000b12:	4899      	ldr	r0, [pc, #612]	; (8000d78 <MX_GPIO_Init+0x314>)
 8000b14:	f001 ff1a 	bl	800294c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f241 0181 	movw	r1, #4225	; 0x1081
 8000b1e:	4897      	ldr	r0, [pc, #604]	; (8000d7c <MX_GPIO_Init+0x318>)
 8000b20:	f001 ff14 	bl	800294c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2a:	4894      	ldr	r0, [pc, #592]	; (8000d7c <MX_GPIO_Init+0x318>)
 8000b2c:	f001 ff0e 	bl	800294c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000b36:	4892      	ldr	r0, [pc, #584]	; (8000d80 <MX_GPIO_Init+0x31c>)
 8000b38:	f001 ff08 	bl	800294c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2120      	movs	r1, #32
 8000b40:	488d      	ldr	r0, [pc, #564]	; (8000d78 <MX_GPIO_Init+0x314>)
 8000b42:	f001 ff03 	bl	800294c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b46:	2201      	movs	r2, #1
 8000b48:	2101      	movs	r1, #1
 8000b4a:	488a      	ldr	r0, [pc, #552]	; (8000d74 <MX_GPIO_Init+0x310>)
 8000b4c:	f001 fefe 	bl	800294c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000b50:	f240 1315 	movw	r3, #277	; 0x115
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4882      	ldr	r0, [pc, #520]	; (8000d74 <MX_GPIO_Init+0x310>)
 8000b6a:	f001 fc39 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000b6e:	236a      	movs	r3, #106	; 0x6a
 8000b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	487c      	ldr	r0, [pc, #496]	; (8000d74 <MX_GPIO_Init+0x310>)
 8000b84:	f001 fc2c 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b8e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4878      	ldr	r0, [pc, #480]	; (8000d80 <MX_GPIO_Init+0x31c>)
 8000ba0:	f001 fc1e 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000ba4:	233f      	movs	r3, #63	; 0x3f
 8000ba6:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ba8:	230b      	movs	r3, #11
 8000baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4872      	ldr	r0, [pc, #456]	; (8000d80 <MX_GPIO_Init+0x31c>)
 8000bb8:	f001 fc12 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000bcc:	2308      	movs	r3, #8
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bda:	f001 fc01 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000bde:	f248 1304 	movw	r3, #33028	; 0x8104
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfa:	f001 fbf1 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000bfe:	2308      	movs	r3, #8
 8000c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1c:	f001 fbe0 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000c20:	2310      	movs	r3, #16
 8000c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c24:	230b      	movs	r3, #11
 8000c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c36:	f001 fbd3 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000c3a:	23e0      	movs	r3, #224	; 0xe0
 8000c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c4a:	2305      	movs	r3, #5
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c58:	f001 fbc2 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4841      	ldr	r0, [pc, #260]	; (8000d78 <MX_GPIO_Init+0x314>)
 8000c72:	f001 fbb5 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000c76:	2302      	movs	r3, #2
 8000c78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c7a:	230b      	movs	r3, #11
 8000c7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	483b      	ldr	r0, [pc, #236]	; (8000d78 <MX_GPIO_Init+0x314>)
 8000c8a:	f001 fba9 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c8e:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000c92:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4834      	ldr	r0, [pc, #208]	; (8000d78 <MX_GPIO_Init+0x314>)
 8000ca8:	f001 fb9a 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000cac:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000cb0:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cb2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	482e      	ldr	r0, [pc, #184]	; (8000d7c <MX_GPIO_Init+0x318>)
 8000cc4:	f001 fb8c 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000cc8:	f243 0381 	movw	r3, #12417	; 0x3081
 8000ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4826      	ldr	r0, [pc, #152]	; (8000d7c <MX_GPIO_Init+0x318>)
 8000ce2:	f001 fb7d 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000ce6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cec:	2301      	movs	r3, #1
 8000cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4820      	ldr	r0, [pc, #128]	; (8000d80 <MX_GPIO_Init+0x31c>)
 8000d00:	f001 fb6e 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000d04:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4819      	ldr	r0, [pc, #100]	; (8000d80 <MX_GPIO_Init+0x31c>)
 8000d1c:	f001 fb60 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000d20:	2302      	movs	r3, #2
 8000d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d30:	2305      	movs	r3, #5
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4810      	ldr	r0, [pc, #64]	; (8000d7c <MX_GPIO_Init+0x318>)
 8000d3c:	f001 fb50 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000d40:	2378      	movs	r3, #120	; 0x78
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d50:	2307      	movs	r3, #7
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4808      	ldr	r0, [pc, #32]	; (8000d7c <MX_GPIO_Init+0x318>)
 8000d5c:	f001 fb40 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000d60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d66:	2312      	movs	r3, #18
 8000d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <MX_GPIO_Init+0x320>
 8000d6e:	bf00      	nop
 8000d70:	40021000 	.word	0x40021000
 8000d74:	48001000 	.word	0x48001000
 8000d78:	48000400 	.word	0x48000400
 8000d7c:	48000c00 	.word	0x48000c00
 8000d80:	48000800 	.word	0x48000800
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	480f      	ldr	r0, [pc, #60]	; (8000dd4 <MX_GPIO_Init+0x370>)
 8000d96:	f001 fb23 	bl	80023e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2105      	movs	r1, #5
 8000d9e:	2007      	movs	r0, #7
 8000da0:	f001 f98b 	bl	80020ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000da4:	2007      	movs	r0, #7
 8000da6:	f001 f9a4 	bl	80020f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2105      	movs	r1, #5
 8000dae:	2017      	movs	r0, #23
 8000db0:	f001 f983 	bl	80020ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000db4:	2017      	movs	r0, #23
 8000db6:	f001 f99c 	bl	80020f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2105      	movs	r1, #5
 8000dbe:	2028      	movs	r0, #40	; 0x28
 8000dc0:	f001 f97b 	bl	80020ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dc4:	2028      	movs	r0, #40	; 0x28
 8000dc6:	f001 f994 	bl	80020f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dca:	bf00      	nop
 8000dcc:	3728      	adds	r7, #40	; 0x28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	48000400 	.word	0x48000400

08000dd8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000de0:	2001      	movs	r0, #1
 8000de2:	f008 fea7 	bl	8009b34 <osDelay>
 8000de6:	e7fb      	b.n	8000de0 <StartDefaultTask+0x8>

08000de8 <wifi_start>:
* @brief Function implementing the wifiStart thread.
* @param argument: Not used
* @retval None
*/
static int wifi_start(void)
{
 8000de8:	b5b0      	push	{r4, r5, r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af04      	add	r7, sp, #16
  printf("Wifi Start Function. \n\r");
 8000dee:	4819      	ldr	r0, [pc, #100]	; (8000e54 <wifi_start+0x6c>)
 8000df0:	f00b fbd6 	bl	800c5a0 <iprintf>
  uint8_t  MAC_Addr[6];

 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8000df4:	f008 fc0e 	bl	8009614 <WIFI_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d124      	bne.n	8000e48 <wifi_start+0x60>
  {
    printf("ES-WIFI Initialized.\n\r");
 8000dfe:	4816      	ldr	r0, [pc, #88]	; (8000e58 <wifi_start+0x70>)
 8000e00:	f00b fbce 	bl	800c5a0 <iprintf>
    if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 8000e04:	463b      	mov	r3, r7
 8000e06:	2106      	movs	r1, #6
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f008 fc51 	bl	80096b0 <WIFI_GetMAC_Address>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d113      	bne.n	8000e3c <wifi_start+0x54>
    {
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
               MAC_Addr[0],
 8000e14:	783b      	ldrb	r3, [r7, #0]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 8000e16:	4618      	mov	r0, r3
               MAC_Addr[1],
 8000e18:	787b      	ldrb	r3, [r7, #1]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 8000e1a:	461c      	mov	r4, r3
               MAC_Addr[2],
 8000e1c:	78bb      	ldrb	r3, [r7, #2]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 8000e1e:	461d      	mov	r5, r3
               MAC_Addr[3],
 8000e20:	78fb      	ldrb	r3, [r7, #3]
               MAC_Addr[4],
 8000e22:	793a      	ldrb	r2, [r7, #4]
               MAC_Addr[5]);
 8000e24:	7979      	ldrb	r1, [r7, #5]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 8000e26:	9102      	str	r1, [sp, #8]
 8000e28:	9201      	str	r2, [sp, #4]
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	462b      	mov	r3, r5
 8000e2e:	4622      	mov	r2, r4
 8000e30:	4601      	mov	r1, r0
 8000e32:	480a      	ldr	r0, [pc, #40]	; (8000e5c <wifi_start+0x74>)
 8000e34:	f00b fbb4 	bl	800c5a0 <iprintf>
  }
  else
  {
    return -1;
  }
  return 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	e007      	b.n	8000e4c <wifi_start+0x64>
      printf("> ERROR : CANNOT get MAC address.\n\r");
 8000e3c:	4808      	ldr	r0, [pc, #32]	; (8000e60 <wifi_start+0x78>)
 8000e3e:	f00b fbaf 	bl	800c5a0 <iprintf>
      return -1;
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
 8000e46:	e001      	b.n	8000e4c <wifi_start+0x64>
    return -1;
 8000e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bdb0      	pop	{r4, r5, r7, pc}
 8000e54:	0800d9b8 	.word	0x0800d9b8
 8000e58:	0800d9d0 	.word	0x0800d9d0
 8000e5c:	0800d9e8 	.word	0x0800d9e8
 8000e60:	0800da28 	.word	0x0800da28

08000e64 <wifi_connect>:


int wifi_connect(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af02      	add	r7, sp, #8

  wifi_start();
 8000e6a:	f7ff ffbd 	bl	8000de8 <wifi_start>

  printf("\nConnecting to %s , %s\n",SSID,PASSWORD);
 8000e6e:	4a1a      	ldr	r2, [pc, #104]	; (8000ed8 <wifi_connect+0x74>)
 8000e70:	491a      	ldr	r1, [pc, #104]	; (8000edc <wifi_connect+0x78>)
 8000e72:	481b      	ldr	r0, [pc, #108]	; (8000ee0 <wifi_connect+0x7c>)
 8000e74:	f00b fb94 	bl	800c5a0 <iprintf>
  if( WIFI_Connect(SSID, PASSWORD, WIFISECURITY) == WIFI_STATUS_OK)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	4917      	ldr	r1, [pc, #92]	; (8000ed8 <wifi_connect+0x74>)
 8000e7c:	4817      	ldr	r0, [pc, #92]	; (8000edc <wifi_connect+0x78>)
 8000e7e:	f008 fbf5 	bl	800966c <WIFI_Connect>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d11e      	bne.n	8000ec6 <wifi_connect+0x62>
  {
    if(WIFI_GetIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 8000e88:	2104      	movs	r1, #4
 8000e8a:	4816      	ldr	r0, [pc, #88]	; (8000ee4 <wifi_connect+0x80>)
 8000e8c:	f008 fc30 	bl	80096f0 <WIFI_GetIP_Address>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d111      	bne.n	8000eba <wifi_connect+0x56>
    {
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\n",
               IP_Addr[0],
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <wifi_connect+0x80>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\n",
 8000e9a:	4619      	mov	r1, r3
               IP_Addr[1],
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <wifi_connect+0x80>)
 8000e9e:	785b      	ldrb	r3, [r3, #1]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\n",
 8000ea0:	461a      	mov	r2, r3
               IP_Addr[2],
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <wifi_connect+0x80>)
 8000ea4:	789b      	ldrb	r3, [r3, #2]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\n",
 8000ea6:	4618      	mov	r0, r3
               IP_Addr[3]);
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <wifi_connect+0x80>)
 8000eaa:	78db      	ldrb	r3, [r3, #3]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\n",
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	4603      	mov	r3, r0
 8000eb0:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <wifi_connect+0x84>)
 8000eb2:	f00b fb75 	bl	800c5a0 <iprintf>
  else
  {
		 printf("ERROR : es-wifi module NOT connected\n");
     return -1;
  }
  return 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e00a      	b.n	8000ed0 <wifi_connect+0x6c>
		  printf(" ERROR : es-wifi module CANNOT get IP address\n");
 8000eba:	480c      	ldr	r0, [pc, #48]	; (8000eec <wifi_connect+0x88>)
 8000ebc:	f00b fbd6 	bl	800c66c <puts>
      return -1;
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	e004      	b.n	8000ed0 <wifi_connect+0x6c>
		 printf("ERROR : es-wifi module NOT connected\n");
 8000ec6:	480a      	ldr	r0, [pc, #40]	; (8000ef0 <wifi_connect+0x8c>)
 8000ec8:	f00b fbd0 	bl	800c66c <puts>
     return -1;
 8000ecc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	0800da4c 	.word	0x0800da4c
 8000edc:	0800da50 	.word	0x0800da50
 8000ee0:	0800da58 	.word	0x0800da58
 8000ee4:	20001000 	.word	0x20001000
 8000ee8:	0800da70 	.word	0x0800da70
 8000eec:	0800daac 	.word	0x0800daac
 8000ef0:	0800dadc 	.word	0x0800dadc

08000ef4 <wifi_server>:

int wifi_server(void)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b087      	sub	sp, #28
 8000ef8:	af02      	add	r7, sp, #8
  bool StopServer = false;
 8000efa:	2300      	movs	r3, #0
 8000efc:	73fb      	strb	r3, [r7, #15]

  LOG(("\nRunning HTML Server test\n"));
 8000efe:	483e      	ldr	r0, [pc, #248]	; (8000ff8 <wifi_server+0x104>)
 8000f00:	f00b fbb4 	bl	800c66c <puts>
  if (wifi_connect()!=0) return -1;
 8000f04:	f7ff ffae 	bl	8000e64 <wifi_connect>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d002      	beq.n	8000f14 <wifi_server+0x20>
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f12:	e06d      	b.n	8000ff0 <wifi_server+0xfc>


  if (WIFI_STATUS_OK!=WIFI_StartServer(SOCKET, WIFI_TCP_PROTOCOL, 1, "", PORT))
 8000f14:	2350      	movs	r3, #80	; 0x50
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	4b38      	ldr	r3, [pc, #224]	; (8000ffc <wifi_server+0x108>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f008 fc0a 	bl	8009738 <WIFI_StartServer>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d002      	beq.n	8000f30 <wifi_server+0x3c>
  {
    LOG(("ERROR: Cannot start server.\n"));
 8000f2a:	4835      	ldr	r0, [pc, #212]	; (8001000 <wifi_server+0x10c>)
 8000f2c:	f00b fb9e 	bl	800c66c <puts>
  }

  LOG(("Server is running and waiting for an HTTP  Client connection to %d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 8000f30:	4b34      	ldr	r3, [pc, #208]	; (8001004 <wifi_server+0x110>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	4b33      	ldr	r3, [pc, #204]	; (8001004 <wifi_server+0x110>)
 8000f38:	785b      	ldrb	r3, [r3, #1]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b31      	ldr	r3, [pc, #196]	; (8001004 <wifi_server+0x110>)
 8000f3e:	789b      	ldrb	r3, [r3, #2]
 8000f40:	4618      	mov	r0, r3
 8000f42:	4b30      	ldr	r3, [pc, #192]	; (8001004 <wifi_server+0x110>)
 8000f44:	78db      	ldrb	r3, [r3, #3]
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	4603      	mov	r3, r0
 8000f4a:	482f      	ldr	r0, [pc, #188]	; (8001008 <wifi_server+0x114>)
 8000f4c:	f00b fb28 	bl	800c5a0 <iprintf>
  do
  {
    uint8_t RemoteIP[4];
    uint16_t RemotePort;

    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,sizeof(RemoteIP),&RemotePort))
 8000f50:	e00f      	b.n	8000f72 <wifi_server+0x7e>
    {
        LOG(("Waiting connection to  %d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 8000f52:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <wifi_server+0x110>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	4619      	mov	r1, r3
 8000f58:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <wifi_server+0x110>)
 8000f5a:	785b      	ldrb	r3, [r3, #1]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b29      	ldr	r3, [pc, #164]	; (8001004 <wifi_server+0x110>)
 8000f60:	789b      	ldrb	r3, [r3, #2]
 8000f62:	4618      	mov	r0, r3
 8000f64:	4b27      	ldr	r3, [pc, #156]	; (8001004 <wifi_server+0x110>)
 8000f66:	78db      	ldrb	r3, [r3, #3]
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4827      	ldr	r0, [pc, #156]	; (800100c <wifi_server+0x118>)
 8000f6e:	f00b fb17 	bl	800c5a0 <iprintf>
    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,sizeof(RemoteIP),&RemotePort))
 8000f72:	f107 0208 	add.w	r2, r7, #8
 8000f76:	1dbb      	adds	r3, r7, #6
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f80:	2000      	movs	r0, #0
 8000f82:	f008 fc09 	bl	8009798 <WIFI_WaitServerConnection>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1e2      	bne.n	8000f52 <wifi_server+0x5e>

    }

    LOG(("Client connected %d.%d.%d.%d:%d\n",RemoteIP[0],RemoteIP[1],RemoteIP[2],RemoteIP[3],RemotePort));
 8000f8c:	7a3b      	ldrb	r3, [r7, #8]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	7a7b      	ldrb	r3, [r7, #9]
 8000f92:	4618      	mov	r0, r3
 8000f94:	7abb      	ldrb	r3, [r7, #10]
 8000f96:	461c      	mov	r4, r3
 8000f98:	7afb      	ldrb	r3, [r7, #11]
 8000f9a:	88fa      	ldrh	r2, [r7, #6]
 8000f9c:	9201      	str	r2, [sp, #4]
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	4623      	mov	r3, r4
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	481a      	ldr	r0, [pc, #104]	; (8001010 <wifi_server+0x11c>)
 8000fa6:	f00b fafb 	bl	800c5a0 <iprintf>

    StopServer=WebServerProcess();
 8000faa:	f000 f849 	bl	8001040 <WebServerProcess>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73fb      	strb	r3, [r7, #15]

    if(WIFI_CloseServerConnection(SOCKET) != WIFI_STATUS_OK)
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f008 fc3a 	bl	800982c <WIFI_CloseServerConnection>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d005      	beq.n	8000fca <wifi_server+0xd6>
    {
      LOG(("ERROR: failed to close current Server connection\n"));
 8000fbe:	4815      	ldr	r0, [pc, #84]	; (8001014 <wifi_server+0x120>)
 8000fc0:	f00b fb54 	bl	800c66c <puts>
      return -1;
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc8:	e012      	b.n	8000ff0 <wifi_server+0xfc>
    }
  }
  while(StopServer == false);
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	f083 0301 	eor.w	r3, r3, #1
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1cd      	bne.n	8000f72 <wifi_server+0x7e>

  if (WIFI_STATUS_OK!=WIFI_StopServer(SOCKET))
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f008 fc40 	bl	800985c <WIFI_StopServer>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d002      	beq.n	8000fe8 <wifi_server+0xf4>
  {
    LOG(("ERROR: Cannot stop server.\n"));
 8000fe2:	480d      	ldr	r0, [pc, #52]	; (8001018 <wifi_server+0x124>)
 8000fe4:	f00b fb42 	bl	800c66c <puts>
  }

  LOG(("Server is stop\n"));
 8000fe8:	480c      	ldr	r0, [pc, #48]	; (800101c <wifi_server+0x128>)
 8000fea:	f00b fb3f 	bl	800c66c <puts>
  return 0;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd90      	pop	{r4, r7, pc}
 8000ff8:	0800db04 	.word	0x0800db04
 8000ffc:	0800da4c 	.word	0x0800da4c
 8001000:	0800db20 	.word	0x0800db20
 8001004:	20001000 	.word	0x20001000
 8001008:	0800db3c 	.word	0x0800db3c
 800100c:	0800db8c 	.word	0x0800db8c
 8001010:	0800dbb0 	.word	0x0800dbb0
 8001014:	0800dbd4 	.word	0x0800dbd4
 8001018:	0800dc08 	.word	0x0800dc08
 800101c:	0800dc24 	.word	0x0800dc24

08001020 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	2b02      	cmp	r3, #2
 800102e:	d102      	bne.n	8001036 <HAL_GPIO_EXTI_Callback+0x16>
  {
    case (GPIO_PIN_1):
    {
      //printf("GPIO_Pin.\n\r");
      SPI_WIFI_ISR();
 8001030:	f008 fae0 	bl	80095f4 <SPI_WIFI_ISR>
      break;
 8001034:	e000      	b.n	8001038 <HAL_GPIO_EXTI_Callback+0x18>
    }
    default:
    {
      break;
 8001036:	bf00      	nop
    }
  }
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <WebServerProcess>:


static bool WebServerProcess(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af02      	add	r7, sp, #8
  int16_t f_temp = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	80bb      	strh	r3, [r7, #4]
  uint16_t  respLen;
  static   uint8_t resp[1024];
  bool    stopserver=false;
 800104a:	2300      	movs	r3, #0
 800104c:	71fb      	strb	r3, [r7, #7]

  if (WIFI_STATUS_OK == WIFI_ReceiveData(SOCKET, resp, 1000, &respLen, WIFI_READ_TIMEOUT))
 800104e:	1cbb      	adds	r3, r7, #2
 8001050:	f242 7210 	movw	r2, #10000	; 0x2710
 8001054:	9200      	str	r2, [sp, #0]
 8001056:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800105a:	4942      	ldr	r1, [pc, #264]	; (8001164 <WebServerProcess+0x124>)
 800105c:	2000      	movs	r0, #0
 800105e:	f008 fc37 	bl	80098d0 <WIFI_ReceiveData>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d174      	bne.n	8001152 <WebServerProcess+0x112>
  {
   LOG(("get %d byte from server\n",respLen));
 8001068:	887b      	ldrh	r3, [r7, #2]
 800106a:	4619      	mov	r1, r3
 800106c:	483e      	ldr	r0, [pc, #248]	; (8001168 <WebServerProcess+0x128>)
 800106e:	f00b fa97 	bl	800c5a0 <iprintf>

   if( respLen > 0)
 8001072:	887b      	ldrh	r3, [r7, #2]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d06f      	beq.n	8001158 <WebServerProcess+0x118>
   {
      if(strstr((char *)resp, "GET")) /* GET: put web page */
 8001078:	493c      	ldr	r1, [pc, #240]	; (800116c <WebServerProcess+0x12c>)
 800107a:	483a      	ldr	r0, [pc, #232]	; (8001164 <WebServerProcess+0x124>)
 800107c:	f00b fc9e 	bl	800c9bc <strstr>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d012      	beq.n	80010ac <WebServerProcess+0x6c>
      {
        // TODO: Leer la temperatura y almacenarla en f_temp
        if(SendWebPage(LedState, f_temp) != WIFI_STATUS_OK)
 8001086:	4b3a      	ldr	r3, [pc, #232]	; (8001170 <WebServerProcess+0x130>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f000 f887 	bl	80011a4 <SendWebPage>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <WebServerProcess+0x64>
        {
          LOG(("> ERROR : Cannot send web page\n"));
 800109c:	4835      	ldr	r0, [pc, #212]	; (8001174 <WebServerProcess+0x134>)
 800109e:	f00b fae5 	bl	800c66c <puts>
 80010a2:	e059      	b.n	8001158 <WebServerProcess+0x118>
        }
        else
        {
          LOG(("Send page after  GET command\n"));
 80010a4:	4834      	ldr	r0, [pc, #208]	; (8001178 <WebServerProcess+0x138>)
 80010a6:	f00b fae1 	bl	800c66c <puts>
 80010aa:	e055      	b.n	8001158 <WebServerProcess+0x118>
        }
       }
       else if(strstr((char *)resp, "POST"))/* POST: received info */
 80010ac:	4933      	ldr	r1, [pc, #204]	; (800117c <WebServerProcess+0x13c>)
 80010ae:	482d      	ldr	r0, [pc, #180]	; (8001164 <WebServerProcess+0x124>)
 80010b0:	f00b fc84 	bl	800c9bc <strstr>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d04e      	beq.n	8001158 <WebServerProcess+0x118>
       {
         LOG(("Post request\n"));
 80010ba:	4831      	ldr	r0, [pc, #196]	; (8001180 <WebServerProcess+0x140>)
 80010bc:	f00b fad6 	bl	800c66c <puts>

         if(strstr((char *)resp, "radio"))
 80010c0:	4930      	ldr	r1, [pc, #192]	; (8001184 <WebServerProcess+0x144>)
 80010c2:	4828      	ldr	r0, [pc, #160]	; (8001164 <WebServerProcess+0x124>)
 80010c4:	f00b fc7a 	bl	800c9bc <strstr>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d014      	beq.n	80010f8 <WebServerProcess+0xb8>
         {
           if(strstr((char *)resp, "radio=0"))
 80010ce:	492e      	ldr	r1, [pc, #184]	; (8001188 <WebServerProcess+0x148>)
 80010d0:	4824      	ldr	r0, [pc, #144]	; (8001164 <WebServerProcess+0x124>)
 80010d2:	f00b fc73 	bl	800c9bc <strstr>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <WebServerProcess+0xa4>
           {
             LedState = 0;
 80010dc:	4b24      	ldr	r3, [pc, #144]	; (8001170 <WebServerProcess+0x130>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
 80010e2:	e009      	b.n	80010f8 <WebServerProcess+0xb8>

             // Hacer algo para apagar el LED aquí

           }
           else if(strstr((char *)resp, "radio=1"))
 80010e4:	4929      	ldr	r1, [pc, #164]	; (800118c <WebServerProcess+0x14c>)
 80010e6:	481f      	ldr	r0, [pc, #124]	; (8001164 <WebServerProcess+0x124>)
 80010e8:	f00b fc68 	bl	800c9bc <strstr>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d002      	beq.n	80010f8 <WebServerProcess+0xb8>
           {
             LedState = 1;
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <WebServerProcess+0x130>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
             // Hacer algo para encender el LED aquí

           }
        // TODO: Leer la temperatura y almacenarla en f_temp
         }
         if(strstr((char *)resp, "stop_server"))
 80010f8:	4925      	ldr	r1, [pc, #148]	; (8001190 <WebServerProcess+0x150>)
 80010fa:	481a      	ldr	r0, [pc, #104]	; (8001164 <WebServerProcess+0x124>)
 80010fc:	f00b fc5e 	bl	800c9bc <strstr>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d012      	beq.n	800112c <WebServerProcess+0xec>
         {
           if(strstr((char *)resp, "stop_server=0"))
 8001106:	4923      	ldr	r1, [pc, #140]	; (8001194 <WebServerProcess+0x154>)
 8001108:	4816      	ldr	r0, [pc, #88]	; (8001164 <WebServerProcess+0x124>)
 800110a:	f00b fc57 	bl	800c9bc <strstr>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d002      	beq.n	800111a <WebServerProcess+0xda>
           {
             stopserver = false;
 8001114:	2300      	movs	r3, #0
 8001116:	71fb      	strb	r3, [r7, #7]
 8001118:	e008      	b.n	800112c <WebServerProcess+0xec>
           }
           else if(strstr((char *)resp, "stop_server=1"))
 800111a:	491f      	ldr	r1, [pc, #124]	; (8001198 <WebServerProcess+0x158>)
 800111c:	4811      	ldr	r0, [pc, #68]	; (8001164 <WebServerProcess+0x124>)
 800111e:	f00b fc4d 	bl	800c9bc <strstr>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <WebServerProcess+0xec>
           {
             stopserver = true;
 8001128:	2301      	movs	r3, #1
 800112a:	71fb      	strb	r3, [r7, #7]
           }
         }
        // TODO: Leer la temperatura y almacenarla en f_temp
         if(SendWebPage(LedState, f_temp) != WIFI_STATUS_OK)
 800112c:	4b10      	ldr	r3, [pc, #64]	; (8001170 <WebServerProcess+0x130>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001134:	4611      	mov	r1, r2
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f834 	bl	80011a4 <SendWebPage>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <WebServerProcess+0x10a>
         {
           LOG(("> ERROR : Cannot send web page\n"));
 8001142:	480c      	ldr	r0, [pc, #48]	; (8001174 <WebServerProcess+0x134>)
 8001144:	f00b fa92 	bl	800c66c <puts>
 8001148:	e006      	b.n	8001158 <WebServerProcess+0x118>
         }
         else
         {
           LOG(("Send Page after POST command\n"));
 800114a:	4814      	ldr	r0, [pc, #80]	; (800119c <WebServerProcess+0x15c>)
 800114c:	f00b fa8e 	bl	800c66c <puts>
 8001150:	e002      	b.n	8001158 <WebServerProcess+0x118>
       }
     }
  }
  else
  {
    LOG(("Client close connection\n"));
 8001152:	4813      	ldr	r0, [pc, #76]	; (80011a0 <WebServerProcess+0x160>)
 8001154:	f00b fa8a 	bl	800c66c <puts>
  }
  return stopserver;
 8001158:	79fb      	ldrb	r3, [r7, #7]

 }
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20001004 	.word	0x20001004
 8001168:	0800dc34 	.word	0x0800dc34
 800116c:	0800dc50 	.word	0x0800dc50
 8001170:	20000ff4 	.word	0x20000ff4
 8001174:	0800dc54 	.word	0x0800dc54
 8001178:	0800dc74 	.word	0x0800dc74
 800117c:	0800dc94 	.word	0x0800dc94
 8001180:	0800dc9c 	.word	0x0800dc9c
 8001184:	0800dcac 	.word	0x0800dcac
 8001188:	0800dcb4 	.word	0x0800dcb4
 800118c:	0800dcbc 	.word	0x0800dcbc
 8001190:	0800dcc4 	.word	0x0800dcc4
 8001194:	0800dcd0 	.word	0x0800dcd0
 8001198:	0800dce0 	.word	0x0800dce0
 800119c:	0800dcf0 	.word	0x0800dcf0
 80011a0:	0800dd10 	.word	0x0800dd10

080011a4 <SendWebPage>:


static WIFI_Status_t SendWebPage(uint8_t ledIsOn, int16_t temperature)
{
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	b093      	sub	sp, #76	; 0x4c
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	4603      	mov	r3, r0
 80011ac:	460a      	mov	r2, r1
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	4613      	mov	r3, r2
 80011b2:	80bb      	strh	r3, [r7, #4]
  uint8_t  temp[50];
  uint16_t SentDataLength;
  WIFI_Status_t ret;

  /* construct web page content */
  strcpy((char *)http, (char *)"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n");
 80011b4:	4abd      	ldr	r2, [pc, #756]	; (80014ac <SendWebPage+0x308>)
 80011b6:	4bbe      	ldr	r3, [pc, #760]	; (80014b0 <SendWebPage+0x30c>)
 80011b8:	4614      	mov	r4, r2
 80011ba:	461d      	mov	r5, r3
 80011bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011cc:	c407      	stmia	r4!, {r0, r1, r2}
 80011ce:	8023      	strh	r3, [r4, #0]
 80011d0:	3402      	adds	r4, #2
 80011d2:	0c1b      	lsrs	r3, r3, #16
 80011d4:	7023      	strb	r3, [r4, #0]
  strcat((char *)http, (char *)"<html>\r\n<body>\r\n");
 80011d6:	48b5      	ldr	r0, [pc, #724]	; (80014ac <SendWebPage+0x308>)
 80011d8:	f7fe fffa 	bl	80001d0 <strlen>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	4bb2      	ldr	r3, [pc, #712]	; (80014ac <SendWebPage+0x308>)
 80011e2:	4413      	add	r3, r2
 80011e4:	4ab3      	ldr	r2, [pc, #716]	; (80014b4 <SendWebPage+0x310>)
 80011e6:	461d      	mov	r5, r3
 80011e8:	4614      	mov	r4, r2
 80011ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ec:	6028      	str	r0, [r5, #0]
 80011ee:	6069      	str	r1, [r5, #4]
 80011f0:	60aa      	str	r2, [r5, #8]
 80011f2:	60eb      	str	r3, [r5, #12]
 80011f4:	7823      	ldrb	r3, [r4, #0]
 80011f6:	742b      	strb	r3, [r5, #16]
  strcat((char *)http, (char *)"<title>STM32 Web Server</title>\r\n");
 80011f8:	48ac      	ldr	r0, [pc, #688]	; (80014ac <SendWebPage+0x308>)
 80011fa:	f7fe ffe9 	bl	80001d0 <strlen>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	4baa      	ldr	r3, [pc, #680]	; (80014ac <SendWebPage+0x308>)
 8001204:	4413      	add	r3, r2
 8001206:	4aac      	ldr	r2, [pc, #688]	; (80014b8 <SendWebPage+0x314>)
 8001208:	4614      	mov	r4, r2
 800120a:	469c      	mov	ip, r3
 800120c:	f104 0e20 	add.w	lr, r4, #32
 8001210:	4665      	mov	r5, ip
 8001212:	4626      	mov	r6, r4
 8001214:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001216:	6028      	str	r0, [r5, #0]
 8001218:	6069      	str	r1, [r5, #4]
 800121a:	60aa      	str	r2, [r5, #8]
 800121c:	60eb      	str	r3, [r5, #12]
 800121e:	3410      	adds	r4, #16
 8001220:	f10c 0c10 	add.w	ip, ip, #16
 8001224:	4574      	cmp	r4, lr
 8001226:	d1f3      	bne.n	8001210 <SendWebPage+0x6c>
 8001228:	4662      	mov	r2, ip
 800122a:	4623      	mov	r3, r4
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	8013      	strh	r3, [r2, #0]
  strcat((char *)http, (char *)"<h2>InventekSys : Web Server using Es-Wifi with STM32</h2>\r\n");
 8001230:	489e      	ldr	r0, [pc, #632]	; (80014ac <SendWebPage+0x308>)
 8001232:	f7fe ffcd 	bl	80001d0 <strlen>
 8001236:	4603      	mov	r3, r0
 8001238:	461a      	mov	r2, r3
 800123a:	4b9c      	ldr	r3, [pc, #624]	; (80014ac <SendWebPage+0x308>)
 800123c:	4413      	add	r3, r2
 800123e:	4a9f      	ldr	r2, [pc, #636]	; (80014bc <SendWebPage+0x318>)
 8001240:	4614      	mov	r4, r2
 8001242:	469c      	mov	ip, r3
 8001244:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001248:	4665      	mov	r5, ip
 800124a:	4626      	mov	r6, r4
 800124c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800124e:	6028      	str	r0, [r5, #0]
 8001250:	6069      	str	r1, [r5, #4]
 8001252:	60aa      	str	r2, [r5, #8]
 8001254:	60eb      	str	r3, [r5, #12]
 8001256:	3410      	adds	r4, #16
 8001258:	f10c 0c10 	add.w	ip, ip, #16
 800125c:	4574      	cmp	r4, lr
 800125e:	d1f3      	bne.n	8001248 <SendWebPage+0xa4>
 8001260:	4665      	mov	r5, ip
 8001262:	4623      	mov	r3, r4
 8001264:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001266:	6028      	str	r0, [r5, #0]
 8001268:	6069      	str	r1, [r5, #4]
 800126a:	60aa      	str	r2, [r5, #8]
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	732b      	strb	r3, [r5, #12]
  strcat((char *)http, (char *)"<br /><hr>\r\n");
 8001270:	488e      	ldr	r0, [pc, #568]	; (80014ac <SendWebPage+0x308>)
 8001272:	f7fe ffad 	bl	80001d0 <strlen>
 8001276:	4603      	mov	r3, r0
 8001278:	461a      	mov	r2, r3
 800127a:	4b8c      	ldr	r3, [pc, #560]	; (80014ac <SendWebPage+0x308>)
 800127c:	4413      	add	r3, r2
 800127e:	4a90      	ldr	r2, [pc, #576]	; (80014c0 <SendWebPage+0x31c>)
 8001280:	461c      	mov	r4, r3
 8001282:	4613      	mov	r3, r2
 8001284:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001286:	6020      	str	r0, [r4, #0]
 8001288:	6061      	str	r1, [r4, #4]
 800128a:	60a2      	str	r2, [r4, #8]
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	7323      	strb	r3, [r4, #12]
  strcat((char *)http, (char *)"<p><form method=\"POST\"><strong>Temp: <input type=\"text\" value=\"");
 8001290:	4886      	ldr	r0, [pc, #536]	; (80014ac <SendWebPage+0x308>)
 8001292:	f7fe ff9d 	bl	80001d0 <strlen>
 8001296:	4603      	mov	r3, r0
 8001298:	461a      	mov	r2, r3
 800129a:	4b84      	ldr	r3, [pc, #528]	; (80014ac <SendWebPage+0x308>)
 800129c:	4413      	add	r3, r2
 800129e:	4a89      	ldr	r2, [pc, #548]	; (80014c4 <SendWebPage+0x320>)
 80012a0:	4614      	mov	r4, r2
 80012a2:	469c      	mov	ip, r3
 80012a4:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 80012a8:	4665      	mov	r5, ip
 80012aa:	4626      	mov	r6, r4
 80012ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012ae:	6028      	str	r0, [r5, #0]
 80012b0:	6069      	str	r1, [r5, #4]
 80012b2:	60aa      	str	r2, [r5, #8]
 80012b4:	60eb      	str	r3, [r5, #12]
 80012b6:	3410      	adds	r4, #16
 80012b8:	f10c 0c10 	add.w	ip, ip, #16
 80012bc:	4574      	cmp	r4, lr
 80012be:	d1f3      	bne.n	80012a8 <SendWebPage+0x104>
  sprintf((char *)temp, "%d", temperature);
 80012c0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	497f      	ldr	r1, [pc, #508]	; (80014c8 <SendWebPage+0x324>)
 80012ca:	4618      	mov	r0, r3
 80012cc:	f00b f9d6 	bl	800c67c <siprintf>
  strcat((char *)http, (char *)temp);
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	4619      	mov	r1, r3
 80012d6:	4875      	ldr	r0, [pc, #468]	; (80014ac <SendWebPage+0x308>)
 80012d8:	f00b fae0 	bl	800c89c <strcat>
  strcat((char *)http, (char *)"\"> <sup>O</sup>C");
 80012dc:	4873      	ldr	r0, [pc, #460]	; (80014ac <SendWebPage+0x308>)
 80012de:	f7fe ff77 	bl	80001d0 <strlen>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b71      	ldr	r3, [pc, #452]	; (80014ac <SendWebPage+0x308>)
 80012e8:	4413      	add	r3, r2
 80012ea:	4a78      	ldr	r2, [pc, #480]	; (80014cc <SendWebPage+0x328>)
 80012ec:	461d      	mov	r5, r3
 80012ee:	4614      	mov	r4, r2
 80012f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f2:	6028      	str	r0, [r5, #0]
 80012f4:	6069      	str	r1, [r5, #4]
 80012f6:	60aa      	str	r2, [r5, #8]
 80012f8:	60eb      	str	r3, [r5, #12]
 80012fa:	7823      	ldrb	r3, [r4, #0]
 80012fc:	742b      	strb	r3, [r5, #16]

  if (ledIsOn)
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d040      	beq.n	8001386 <SendWebPage+0x1e2>
  {
    strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" >LED off");
 8001304:	4869      	ldr	r0, [pc, #420]	; (80014ac <SendWebPage+0x308>)
 8001306:	f7fe ff63 	bl	80001d0 <strlen>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	4b67      	ldr	r3, [pc, #412]	; (80014ac <SendWebPage+0x308>)
 8001310:	4413      	add	r3, r2
 8001312:	4a6f      	ldr	r2, [pc, #444]	; (80014d0 <SendWebPage+0x32c>)
 8001314:	4614      	mov	r4, r2
 8001316:	469c      	mov	ip, r3
 8001318:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800131c:	4665      	mov	r5, ip
 800131e:	4626      	mov	r6, r4
 8001320:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001322:	6028      	str	r0, [r5, #0]
 8001324:	6069      	str	r1, [r5, #4]
 8001326:	60aa      	str	r2, [r5, #8]
 8001328:	60eb      	str	r3, [r5, #12]
 800132a:	3410      	adds	r4, #16
 800132c:	f10c 0c10 	add.w	ip, ip, #16
 8001330:	4574      	cmp	r4, lr
 8001332:	d1f3      	bne.n	800131c <SendWebPage+0x178>
 8001334:	4663      	mov	r3, ip
 8001336:	4622      	mov	r2, r4
 8001338:	6810      	ldr	r0, [r2, #0]
 800133a:	6018      	str	r0, [r3, #0]
 800133c:	8891      	ldrh	r1, [r2, #4]
 800133e:	7992      	ldrb	r2, [r2, #6]
 8001340:	8099      	strh	r1, [r3, #4]
 8001342:	719a      	strb	r2, [r3, #6]
    strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" checked>LED on");
 8001344:	4859      	ldr	r0, [pc, #356]	; (80014ac <SendWebPage+0x308>)
 8001346:	f7fe ff43 	bl	80001d0 <strlen>
 800134a:	4603      	mov	r3, r0
 800134c:	461a      	mov	r2, r3
 800134e:	4b57      	ldr	r3, [pc, #348]	; (80014ac <SendWebPage+0x308>)
 8001350:	4413      	add	r3, r2
 8001352:	4a60      	ldr	r2, [pc, #384]	; (80014d4 <SendWebPage+0x330>)
 8001354:	4614      	mov	r4, r2
 8001356:	469c      	mov	ip, r3
 8001358:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800135c:	4665      	mov	r5, ip
 800135e:	4626      	mov	r6, r4
 8001360:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001362:	6028      	str	r0, [r5, #0]
 8001364:	6069      	str	r1, [r5, #4]
 8001366:	60aa      	str	r2, [r5, #8]
 8001368:	60eb      	str	r3, [r5, #12]
 800136a:	3410      	adds	r4, #16
 800136c:	f10c 0c10 	add.w	ip, ip, #16
 8001370:	4574      	cmp	r4, lr
 8001372:	d1f3      	bne.n	800135c <SendWebPage+0x1b8>
 8001374:	4665      	mov	r5, ip
 8001376:	4623      	mov	r3, r4
 8001378:	cb07      	ldmia	r3!, {r0, r1, r2}
 800137a:	6028      	str	r0, [r5, #0]
 800137c:	6069      	str	r1, [r5, #4]
 800137e:	60aa      	str	r2, [r5, #8]
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	81ab      	strh	r3, [r5, #12]
 8001384:	e03f      	b.n	8001406 <SendWebPage+0x262>
  }
  else
  {
    strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" checked>LED off");
 8001386:	4849      	ldr	r0, [pc, #292]	; (80014ac <SendWebPage+0x308>)
 8001388:	f7fe ff22 	bl	80001d0 <strlen>
 800138c:	4603      	mov	r3, r0
 800138e:	461a      	mov	r2, r3
 8001390:	4b46      	ldr	r3, [pc, #280]	; (80014ac <SendWebPage+0x308>)
 8001392:	4413      	add	r3, r2
 8001394:	4a50      	ldr	r2, [pc, #320]	; (80014d8 <SendWebPage+0x334>)
 8001396:	4614      	mov	r4, r2
 8001398:	469c      	mov	ip, r3
 800139a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800139e:	4665      	mov	r5, ip
 80013a0:	4626      	mov	r6, r4
 80013a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013a4:	6028      	str	r0, [r5, #0]
 80013a6:	6069      	str	r1, [r5, #4]
 80013a8:	60aa      	str	r2, [r5, #8]
 80013aa:	60eb      	str	r3, [r5, #12]
 80013ac:	3410      	adds	r4, #16
 80013ae:	f10c 0c10 	add.w	ip, ip, #16
 80013b2:	4574      	cmp	r4, lr
 80013b4:	d1f3      	bne.n	800139e <SendWebPage+0x1fa>
 80013b6:	4665      	mov	r5, ip
 80013b8:	4623      	mov	r3, r4
 80013ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 80013bc:	6028      	str	r0, [r5, #0]
 80013be:	6069      	str	r1, [r5, #4]
 80013c0:	60aa      	str	r2, [r5, #8]
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	81ab      	strh	r3, [r5, #12]
    strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" >LED on");
 80013c6:	4839      	ldr	r0, [pc, #228]	; (80014ac <SendWebPage+0x308>)
 80013c8:	f7fe ff02 	bl	80001d0 <strlen>
 80013cc:	4603      	mov	r3, r0
 80013ce:	461a      	mov	r2, r3
 80013d0:	4b36      	ldr	r3, [pc, #216]	; (80014ac <SendWebPage+0x308>)
 80013d2:	4413      	add	r3, r2
 80013d4:	4a41      	ldr	r2, [pc, #260]	; (80014dc <SendWebPage+0x338>)
 80013d6:	4614      	mov	r4, r2
 80013d8:	469c      	mov	ip, r3
 80013da:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80013de:	4665      	mov	r5, ip
 80013e0:	4626      	mov	r6, r4
 80013e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013e4:	6028      	str	r0, [r5, #0]
 80013e6:	6069      	str	r1, [r5, #4]
 80013e8:	60aa      	str	r2, [r5, #8]
 80013ea:	60eb      	str	r3, [r5, #12]
 80013ec:	3410      	adds	r4, #16
 80013ee:	f10c 0c10 	add.w	ip, ip, #16
 80013f2:	4574      	cmp	r4, lr
 80013f4:	d1f3      	bne.n	80013de <SendWebPage+0x23a>
 80013f6:	4663      	mov	r3, ip
 80013f8:	4622      	mov	r2, r4
 80013fa:	6810      	ldr	r0, [r2, #0]
 80013fc:	6018      	str	r0, [r3, #0]
 80013fe:	8891      	ldrh	r1, [r2, #4]
 8001400:	7992      	ldrb	r2, [r2, #6]
 8001402:	8099      	strh	r1, [r3, #4]
 8001404:	719a      	strb	r2, [r3, #6]
  }

  strcat((char *)http, (char *)"</strong><p><input type=\"submit\"></form></span>");
 8001406:	4829      	ldr	r0, [pc, #164]	; (80014ac <SendWebPage+0x308>)
 8001408:	f7fe fee2 	bl	80001d0 <strlen>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	4b26      	ldr	r3, [pc, #152]	; (80014ac <SendWebPage+0x308>)
 8001412:	4413      	add	r3, r2
 8001414:	4a32      	ldr	r2, [pc, #200]	; (80014e0 <SendWebPage+0x33c>)
 8001416:	4614      	mov	r4, r2
 8001418:	469c      	mov	ip, r3
 800141a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800141e:	4665      	mov	r5, ip
 8001420:	4626      	mov	r6, r4
 8001422:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001424:	6028      	str	r0, [r5, #0]
 8001426:	6069      	str	r1, [r5, #4]
 8001428:	60aa      	str	r2, [r5, #8]
 800142a:	60eb      	str	r3, [r5, #12]
 800142c:	3410      	adds	r4, #16
 800142e:	f10c 0c10 	add.w	ip, ip, #16
 8001432:	4574      	cmp	r4, lr
 8001434:	d1f3      	bne.n	800141e <SendWebPage+0x27a>
  strcat((char *)http, (char *)"</body>\r\n</html>\r\n");
 8001436:	481d      	ldr	r0, [pc, #116]	; (80014ac <SendWebPage+0x308>)
 8001438:	f7fe feca 	bl	80001d0 <strlen>
 800143c:	4603      	mov	r3, r0
 800143e:	461a      	mov	r2, r3
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <SendWebPage+0x308>)
 8001442:	4413      	add	r3, r2
 8001444:	4a27      	ldr	r2, [pc, #156]	; (80014e4 <SendWebPage+0x340>)
 8001446:	461d      	mov	r5, r3
 8001448:	4614      	mov	r4, r2
 800144a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800144c:	6028      	str	r0, [r5, #0]
 800144e:	6069      	str	r1, [r5, #4]
 8001450:	60aa      	str	r2, [r5, #8]
 8001452:	60eb      	str	r3, [r5, #12]
 8001454:	8823      	ldrh	r3, [r4, #0]
 8001456:	78a2      	ldrb	r2, [r4, #2]
 8001458:	822b      	strh	r3, [r5, #16]
 800145a:	4613      	mov	r3, r2
 800145c:	74ab      	strb	r3, [r5, #18]

  ret = WIFI_SendData(0, (uint8_t *)http, strlen((char *)http), &SentDataLength, WIFI_WRITE_TIMEOUT);
 800145e:	4813      	ldr	r0, [pc, #76]	; (80014ac <SendWebPage+0x308>)
 8001460:	f7fe feb6 	bl	80001d0 <strlen>
 8001464:	4603      	mov	r3, r0
 8001466:	b29a      	uxth	r2, r3
 8001468:	f107 030a 	add.w	r3, r7, #10
 800146c:	f242 7110 	movw	r1, #10000	; 0x2710
 8001470:	9100      	str	r1, [sp, #0]
 8001472:	490e      	ldr	r1, [pc, #56]	; (80014ac <SendWebPage+0x308>)
 8001474:	2000      	movs	r0, #0
 8001476:	f008 fa09 	bl	800988c <WIFI_SendData>
 800147a:	4603      	mov	r3, r0
 800147c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if((ret == WIFI_STATUS_OK) && (SentDataLength != strlen((char *)http)))
 8001480:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10a      	bne.n	800149e <SendWebPage+0x2fa>
 8001488:	897b      	ldrh	r3, [r7, #10]
 800148a:	461c      	mov	r4, r3
 800148c:	4807      	ldr	r0, [pc, #28]	; (80014ac <SendWebPage+0x308>)
 800148e:	f7fe fe9f 	bl	80001d0 <strlen>
 8001492:	4603      	mov	r3, r0
 8001494:	429c      	cmp	r4, r3
 8001496:	d002      	beq.n	800149e <SendWebPage+0x2fa>
  {
    ret = WIFI_STATUS_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return ret;
 800149e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3744      	adds	r7, #68	; 0x44
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200007f4 	.word	0x200007f4
 80014b0:	0800dd28 	.word	0x0800dd28
 80014b4:	0800dd68 	.word	0x0800dd68
 80014b8:	0800dd7c 	.word	0x0800dd7c
 80014bc:	0800dda0 	.word	0x0800dda0
 80014c0:	0800dde0 	.word	0x0800dde0
 80014c4:	0800ddf0 	.word	0x0800ddf0
 80014c8:	0800de30 	.word	0x0800de30
 80014cc:	0800de34 	.word	0x0800de34
 80014d0:	0800de48 	.word	0x0800de48
 80014d4:	0800de80 	.word	0x0800de80
 80014d8:	0800dec0 	.word	0x0800dec0
 80014dc:	0800df00 	.word	0x0800df00
 80014e0:	0800df38 	.word	0x0800df38
 80014e4:	0800df68 	.word	0x0800df68

080014e8 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <SPI3_IRQHandler+0x10>)
 80014ee:	f004 fc05 	bl	8005cfc <HAL_SPI_IRQHandler>
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20001518 	.word	0x20001518

080014fc <wifiStartTask>:

/* USER CODE END Header_wifiStartTask */
void wifiStartTask(void *argument)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN wifiStartTask */

	wifi_server();
 8001504:	f7ff fcf6 	bl	8000ef4 <wifi_server>
	/* Infinite loop */
	for(;;)
	{
	osDelay(1);
 8001508:	2001      	movs	r0, #1
 800150a:	f008 fb13 	bl	8009b34 <osDelay>
 800150e:	e7fb      	b.n	8001508 <wifiStartTask+0xc>

08001510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001514:	b672      	cpsid	i
}
 8001516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001518:	e7fe      	b.n	8001518 <Error_Handler+0x8>
	...

0800151c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_MspInit+0x4c>)
 8001524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001526:	4a10      	ldr	r2, [pc, #64]	; (8001568 <HAL_MspInit+0x4c>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6613      	str	r3, [r2, #96]	; 0x60
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <HAL_MspInit+0x4c>)
 8001530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <HAL_MspInit+0x4c>)
 800153c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <HAL_MspInit+0x4c>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001544:	6593      	str	r3, [r2, #88]	; 0x58
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <HAL_MspInit+0x4c>)
 8001548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	210f      	movs	r1, #15
 8001556:	f06f 0001 	mvn.w	r0, #1
 800155a:	f000 fdae 	bl	80020ba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40021000 	.word	0x40021000

0800156c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b0ac      	sub	sp, #176	; 0xb0
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2288      	movs	r2, #136	; 0x88
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f00b f97d 	bl	800c88c <memset>
  if(DFSDM1_Init == 0)
 8001592:	4b25      	ldr	r3, [pc, #148]	; (8001628 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d142      	bne.n	8001620 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800159a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800159e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4618      	mov	r0, r3
 80015ac:	f003 f8ce 	bl	800474c <HAL_RCCEx_PeriphCLKConfig>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80015b6:	f7ff ffab 	bl	8001510 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80015ba:	4b1c      	ldr	r3, [pc, #112]	; (800162c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80015bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015be:	4a1b      	ldr	r2, [pc, #108]	; (800162c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80015c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015c4:	6613      	str	r3, [r2, #96]	; 0x60
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80015c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	4a15      	ldr	r2, [pc, #84]	; (800162c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80015d8:	f043 0310 	orr.w	r3, r3, #16
 80015dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80015ea:	f44f 7320 	mov.w	r3, #640	; 0x280
 80015ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001604:	2306      	movs	r3, #6
 8001606:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800160a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800160e:	4619      	mov	r1, r3
 8001610:	4807      	ldr	r0, [pc, #28]	; (8001630 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001612:	f000 fee5 	bl	80023e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	3301      	adds	r3, #1
 800161c:	4a02      	ldr	r2, [pc, #8]	; (8001628 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800161e:	6013      	str	r3, [r2, #0]
  }

}
 8001620:	bf00      	nop
 8001622:	37b0      	adds	r7, #176	; 0xb0
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20001404 	.word	0x20001404
 800162c:	40021000 	.word	0x40021000
 8001630:	48001000 	.word	0x48001000

08001634 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b0ac      	sub	sp, #176	; 0xb0
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2288      	movs	r2, #136	; 0x88
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f00b f919 	bl	800c88c <memset>
  if(hi2c->Instance==I2C2)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a21      	ldr	r2, [pc, #132]	; (80016e4 <HAL_I2C_MspInit+0xb0>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d13b      	bne.n	80016dc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001668:	2300      	movs	r3, #0
 800166a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4618      	mov	r0, r3
 8001672:	f003 f86b 	bl	800474c <HAL_RCCEx_PeriphCLKConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800167c:	f7ff ff48 	bl	8001510 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_I2C_MspInit+0xb4>)
 8001682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001684:	4a18      	ldr	r2, [pc, #96]	; (80016e8 <HAL_I2C_MspInit+0xb4>)
 8001686:	f043 0302 	orr.w	r3, r3, #2
 800168a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168c:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <HAL_I2C_MspInit+0xb4>)
 800168e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001698:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800169c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a0:	2312      	movs	r3, #18
 80016a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a6:	2301      	movs	r3, #1
 80016a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016b2:	2304      	movs	r3, #4
 80016b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016bc:	4619      	mov	r1, r3
 80016be:	480b      	ldr	r0, [pc, #44]	; (80016ec <HAL_I2C_MspInit+0xb8>)
 80016c0:	f000 fe8e 	bl	80023e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_I2C_MspInit+0xb4>)
 80016c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c8:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <HAL_I2C_MspInit+0xb4>)
 80016ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016ce:	6593      	str	r3, [r2, #88]	; 0x58
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <HAL_I2C_MspInit+0xb4>)
 80016d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016dc:	bf00      	nop
 80016de:	37b0      	adds	r7, #176	; 0xb0
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40005800 	.word	0x40005800
 80016e8:	40021000 	.word	0x40021000
 80016ec:	48000400 	.word	0x48000400

080016f0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0b      	ldr	r2, [pc, #44]	; (800172c <HAL_I2C_MspDeInit+0x3c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d10f      	bne.n	8001722 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_I2C_MspDeInit+0x40>)
 8001704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <HAL_I2C_MspDeInit+0x40>)
 8001708:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800170c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 800170e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001712:	4808      	ldr	r0, [pc, #32]	; (8001734 <HAL_I2C_MspDeInit+0x44>)
 8001714:	f001 f80e 	bl	8002734 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001718:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800171c:	4805      	ldr	r0, [pc, #20]	; (8001734 <HAL_I2C_MspDeInit+0x44>)
 800171e:	f001 f809 	bl	8002734 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40005800 	.word	0x40005800
 8001730:	40021000 	.word	0x40021000
 8001734:	48000400 	.word	0x48000400

08001738 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a17      	ldr	r2, [pc, #92]	; (80017b4 <HAL_QSPI_MspInit+0x7c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d128      	bne.n	80017ac <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800175a:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <HAL_QSPI_MspInit+0x80>)
 800175c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800175e:	4a16      	ldr	r2, [pc, #88]	; (80017b8 <HAL_QSPI_MspInit+0x80>)
 8001760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001764:	6513      	str	r3, [r2, #80]	; 0x50
 8001766:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <HAL_QSPI_MspInit+0x80>)
 8001768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800176a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <HAL_QSPI_MspInit+0x80>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	4a10      	ldr	r2, [pc, #64]	; (80017b8 <HAL_QSPI_MspInit+0x80>)
 8001778:	f043 0310 	orr.w	r3, r3, #16
 800177c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <HAL_QSPI_MspInit+0x80>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800178a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800178e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800179c:	230a      	movs	r3, #10
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	4619      	mov	r1, r3
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <HAL_QSPI_MspInit+0x84>)
 80017a8:	f000 fe1a 	bl	80023e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80017ac:	bf00      	nop
 80017ae:	3728      	adds	r7, #40	; 0x28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	a0001000 	.word	0xa0001000
 80017b8:	40021000 	.word	0x40021000
 80017bc:	48001000 	.word	0x48001000

080017c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	; 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a1b      	ldr	r2, [pc, #108]	; (800184c <HAL_SPI_MspInit+0x8c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d130      	bne.n	8001844 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017e2:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <HAL_SPI_MspInit+0x90>)
 80017e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e6:	4a1a      	ldr	r2, [pc, #104]	; (8001850 <HAL_SPI_MspInit+0x90>)
 80017e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ec:	6593      	str	r3, [r2, #88]	; 0x58
 80017ee:	4b18      	ldr	r3, [pc, #96]	; (8001850 <HAL_SPI_MspInit+0x90>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_SPI_MspInit+0x90>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fe:	4a14      	ldr	r2, [pc, #80]	; (8001850 <HAL_SPI_MspInit+0x90>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_SPI_MspInit+0x90>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001812:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001820:	2303      	movs	r3, #3
 8001822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001824:	2306      	movs	r3, #6
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	4809      	ldr	r0, [pc, #36]	; (8001854 <HAL_SPI_MspInit+0x94>)
 8001830:	f000 fdd6 	bl	80023e0 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	2105      	movs	r1, #5
 8001838:	2033      	movs	r0, #51	; 0x33
 800183a:	f000 fc3e 	bl	80020ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800183e:	2033      	movs	r0, #51	; 0x33
 8001840:	f000 fc57 	bl	80020f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001844:	bf00      	nop
 8001846:	3728      	adds	r7, #40	; 0x28
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40003c00 	.word	0x40003c00
 8001850:	40021000 	.word	0x40021000
 8001854:	48000800 	.word	0x48000800

08001858 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <HAL_SPI_MspDeInit+0x38>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d10d      	bne.n	8001886 <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <HAL_SPI_MspDeInit+0x3c>)
 800186c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186e:	4a09      	ldr	r2, [pc, #36]	; (8001894 <HAL_SPI_MspDeInit+0x3c>)
 8001870:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001874:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8001876:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800187a:	4807      	ldr	r0, [pc, #28]	; (8001898 <HAL_SPI_MspDeInit+0x40>)
 800187c:	f000 ff5a 	bl	8002734 <HAL_GPIO_DeInit>

    /* SPI3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 8001880:	2033      	movs	r0, #51	; 0x33
 8001882:	f000 fc44 	bl	800210e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40003c00 	.word	0x40003c00
 8001894:	40021000 	.word	0x40021000
 8001898:	48000800 	.word	0x48000800

0800189c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b0ae      	sub	sp, #184	; 0xb8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018b4:	f107 031c 	add.w	r3, r7, #28
 80018b8:	2288      	movs	r2, #136	; 0x88
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f00a ffe5 	bl	800c88c <memset>
  if(huart->Instance==USART1)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a42      	ldr	r2, [pc, #264]	; (80019d0 <HAL_UART_MspInit+0x134>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d13b      	bne.n	8001944 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018d0:	2300      	movs	r3, #0
 80018d2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d4:	f107 031c 	add.w	r3, r7, #28
 80018d8:	4618      	mov	r0, r3
 80018da:	f002 ff37 	bl	800474c <HAL_RCCEx_PeriphCLKConfig>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018e4:	f7ff fe14 	bl	8001510 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018e8:	4b3a      	ldr	r3, [pc, #232]	; (80019d4 <HAL_UART_MspInit+0x138>)
 80018ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ec:	4a39      	ldr	r2, [pc, #228]	; (80019d4 <HAL_UART_MspInit+0x138>)
 80018ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f2:	6613      	str	r3, [r2, #96]	; 0x60
 80018f4:	4b37      	ldr	r3, [pc, #220]	; (80019d4 <HAL_UART_MspInit+0x138>)
 80018f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fc:	61bb      	str	r3, [r7, #24]
 80018fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001900:	4b34      	ldr	r3, [pc, #208]	; (80019d4 <HAL_UART_MspInit+0x138>)
 8001902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001904:	4a33      	ldr	r2, [pc, #204]	; (80019d4 <HAL_UART_MspInit+0x138>)
 8001906:	f043 0302 	orr.w	r3, r3, #2
 800190a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800190c:	4b31      	ldr	r3, [pc, #196]	; (80019d4 <HAL_UART_MspInit+0x138>)
 800190e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001918:	23c0      	movs	r3, #192	; 0xc0
 800191a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192a:	2303      	movs	r3, #3
 800192c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001930:	2307      	movs	r3, #7
 8001932:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001936:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800193a:	4619      	mov	r1, r3
 800193c:	4826      	ldr	r0, [pc, #152]	; (80019d8 <HAL_UART_MspInit+0x13c>)
 800193e:	f000 fd4f 	bl	80023e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001942:	e040      	b.n	80019c6 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a24      	ldr	r2, [pc, #144]	; (80019dc <HAL_UART_MspInit+0x140>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d13b      	bne.n	80019c6 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800194e:	2304      	movs	r3, #4
 8001950:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001952:	2300      	movs	r3, #0
 8001954:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001956:	f107 031c 	add.w	r3, r7, #28
 800195a:	4618      	mov	r0, r3
 800195c:	f002 fef6 	bl	800474c <HAL_RCCEx_PeriphCLKConfig>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001966:	f7ff fdd3 	bl	8001510 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800196a:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <HAL_UART_MspInit+0x138>)
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196e:	4a19      	ldr	r2, [pc, #100]	; (80019d4 <HAL_UART_MspInit+0x138>)
 8001970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001974:	6593      	str	r3, [r2, #88]	; 0x58
 8001976:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <HAL_UART_MspInit+0x138>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001982:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <HAL_UART_MspInit+0x138>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	4a13      	ldr	r2, [pc, #76]	; (80019d4 <HAL_UART_MspInit+0x138>)
 8001988:	f043 0308 	orr.w	r3, r3, #8
 800198c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <HAL_UART_MspInit+0x138>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800199a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800199e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ae:	2303      	movs	r3, #3
 80019b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019b4:	2307      	movs	r3, #7
 80019b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019be:	4619      	mov	r1, r3
 80019c0:	4807      	ldr	r0, [pc, #28]	; (80019e0 <HAL_UART_MspInit+0x144>)
 80019c2:	f000 fd0d 	bl	80023e0 <HAL_GPIO_Init>
}
 80019c6:	bf00      	nop
 80019c8:	37b8      	adds	r7, #184	; 0xb8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40013800 	.word	0x40013800
 80019d4:	40021000 	.word	0x40021000
 80019d8:	48000400 	.word	0x48000400
 80019dc:	40004800 	.word	0x40004800
 80019e0:	48000c00 	.word	0x48000c00

080019e4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b0ac      	sub	sp, #176	; 0xb0
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2288      	movs	r2, #136	; 0x88
 8001a02:	2100      	movs	r1, #0
 8001a04:	4618      	mov	r0, r3
 8001a06:	f00a ff41 	bl	800c88c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a12:	d17c      	bne.n	8001b0e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a18:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001a1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001a22:	2301      	movs	r3, #1
 8001a24:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001a26:	2301      	movs	r3, #1
 8001a28:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001a2a:	2318      	movs	r3, #24
 8001a2c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001a2e:	2307      	movs	r3, #7
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001a32:	2302      	movs	r3, #2
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001a36:	2302      	movs	r3, #2
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001a3a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a3e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4618      	mov	r0, r3
 8001a46:	f002 fe81 	bl	800474c <HAL_RCCEx_PeriphCLKConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001a50:	f7ff fd5e 	bl	8001510 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a54:	4b30      	ldr	r3, [pc, #192]	; (8001b18 <HAL_PCD_MspInit+0x134>)
 8001a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a58:	4a2f      	ldr	r2, [pc, #188]	; (8001b18 <HAL_PCD_MspInit+0x134>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a60:	4b2d      	ldr	r3, [pc, #180]	; (8001b18 <HAL_PCD_MspInit+0x134>)
 8001a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a84:	4619      	mov	r1, r3
 8001a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a8a:	f000 fca9 	bl	80023e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001a8e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a96:	2302      	movs	r3, #2
 8001a98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001aa8:	230a      	movs	r3, #10
 8001aaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab8:	f000 fc92 	bl	80023e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001abc:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <HAL_PCD_MspInit+0x134>)
 8001abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac0:	4a15      	ldr	r2, [pc, #84]	; (8001b18 <HAL_PCD_MspInit+0x134>)
 8001ac2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ac6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac8:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <HAL_PCD_MspInit+0x134>)
 8001aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ad4:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <HAL_PCD_MspInit+0x134>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d114      	bne.n	8001b0a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <HAL_PCD_MspInit+0x134>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	4a0c      	ldr	r2, [pc, #48]	; (8001b18 <HAL_PCD_MspInit+0x134>)
 8001ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aea:	6593      	str	r3, [r2, #88]	; 0x58
 8001aec:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <HAL_PCD_MspInit+0x134>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001af8:	f001 ff5c 	bl	80039b4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_PCD_MspInit+0x134>)
 8001afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b00:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <HAL_PCD_MspInit+0x134>)
 8001b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b06:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001b08:	e001      	b.n	8001b0e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001b0a:	f001 ff53 	bl	80039b4 <HAL_PWREx_EnableVddUSB>
}
 8001b0e:	bf00      	nop
 8001b10:	37b0      	adds	r7, #176	; 0xb0
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40021000 	.word	0x40021000

08001b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <NMI_Handler+0x4>

08001b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b26:	e7fe      	b.n	8001b26 <HardFault_Handler+0x4>

08001b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <MemManage_Handler+0x4>

08001b2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b32:	e7fe      	b.n	8001b32 <BusFault_Handler+0x4>

08001b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <UsageFault_Handler+0x4>

08001b3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4c:	f000 f972 	bl	8001e34 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b50:	f009 fbfe 	bl	800b350 <xTaskGetSchedulerState>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d001      	beq.n	8001b5e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001b5a:	f00a f9e5 	bl	800bf28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM43362_DRDY_EXTI1_Pin);
 8001b66:	2002      	movs	r0, #2
 8001b68:	f000 ff08 	bl	800297c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001b74:	2020      	movs	r0, #32
 8001b76:	f000 ff01 	bl	800297c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001b7a:	2040      	movs	r0, #64	; 0x40
 8001b7c:	f000 fefe 	bl	800297c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001b80:	2080      	movs	r0, #128	; 0x80
 8001b82:	f000 fefb 	bl	800297c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001b86:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b8a:	f000 fef7 	bl	800297c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001b96:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b9a:	f000 feef 	bl	800297c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001b9e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001ba2:	f000 feeb 	bl	800297c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001ba6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001baa:	f000 fee7 	bl	800297c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001bae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001bb2:	f000 fee3 	bl	800297c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001bb6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001bba:	f000 fedf 	bl	800297c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  return 1;
 8001bc6:	2301      	movs	r3, #1
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <_kill>:

int _kill(int pid, int sig)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bdc:	f00a ff4a 	bl	800ca74 <__errno>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2216      	movs	r2, #22
 8001be4:	601a      	str	r2, [r3, #0]
  return -1;
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <_exit>:

void _exit (int status)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bfa:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ffe7 	bl	8001bd2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c04:	e7fe      	b.n	8001c04 <_exit+0x12>

08001c06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	e00a      	b.n	8001c2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c18:	f3af 8000 	nop.w
 8001c1c:	4601      	mov	r1, r0
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	60ba      	str	r2, [r7, #8]
 8001c24:	b2ca      	uxtb	r2, r1
 8001c26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	dbf0      	blt.n	8001c18 <_read+0x12>
  }

  return len;
 8001c36:	687b      	ldr	r3, [r7, #4]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c68:	605a      	str	r2, [r3, #4]
  return 0;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <_isatty>:

int _isatty(int file)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c80:	2301      	movs	r3, #1
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b085      	sub	sp, #20
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb0:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <_sbrk+0x5c>)
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <_sbrk+0x60>)
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cbc:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <_sbrk+0x64>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d102      	bne.n	8001cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <_sbrk+0x64>)
 8001cc6:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <_sbrk+0x68>)
 8001cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <_sbrk+0x64>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d207      	bcs.n	8001ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd8:	f00a fecc 	bl	800ca74 <__errno>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	220c      	movs	r2, #12
 8001ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce6:	e009      	b.n	8001cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cee:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <_sbrk+0x64>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <_sbrk+0x64>)
 8001cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20018000 	.word	0x20018000
 8001d08:	00000400 	.word	0x00000400
 8001d0c:	20001408 	.word	0x20001408
 8001d10:	200040b0 	.word	0x200040b0

08001d14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <SystemInit+0x20>)
 8001d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1e:	4a05      	ldr	r2, [pc, #20]	; (8001d34 <SystemInit+0x20>)
 8001d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d3c:	f7ff ffea 	bl	8001d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d40:	480c      	ldr	r0, [pc, #48]	; (8001d74 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d42:	490d      	ldr	r1, [pc, #52]	; (8001d78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d44:	4a0d      	ldr	r2, [pc, #52]	; (8001d7c <LoopForever+0xe>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d48:	e002      	b.n	8001d50 <LoopCopyDataInit>

08001d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4e:	3304      	adds	r3, #4

08001d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d54:	d3f9      	bcc.n	8001d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d58:	4c0a      	ldr	r4, [pc, #40]	; (8001d84 <LoopForever+0x16>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d5c:	e001      	b.n	8001d62 <LoopFillZerobss>

08001d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d60:	3204      	adds	r2, #4

08001d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d64:	d3fb      	bcc.n	8001d5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d66:	f00a fe8b 	bl	800ca80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d6a:	f7fe fc4b 	bl	8000604 <main>

08001d6e <LoopForever>:

LoopForever:
    b LoopForever
 8001d6e:	e7fe      	b.n	8001d6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d78:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001d7c:	0800e5d0 	.word	0x0800e5d0
  ldr r2, =_sbss
 8001d80:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001d84:	200040b0 	.word	0x200040b0

08001d88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d88:	e7fe      	b.n	8001d88 <ADC1_2_IRQHandler>

08001d8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d94:	2003      	movs	r0, #3
 8001d96:	f000 f985 	bl	80020a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d9a:	200f      	movs	r0, #15
 8001d9c:	f000 f80e 	bl	8001dbc <HAL_InitTick>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	71fb      	strb	r3, [r7, #7]
 8001daa:	e001      	b.n	8001db0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dac:	f7ff fbb6 	bl	800151c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001db0:	79fb      	ldrb	r3, [r7, #7]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001dc8:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <HAL_InitTick+0x6c>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d023      	beq.n	8001e18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001dd0:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <HAL_InitTick+0x70>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <HAL_InitTick+0x6c>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 f99f 	bl	800212a <HAL_SYSTICK_Config>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10f      	bne.n	8001e12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b0f      	cmp	r3, #15
 8001df6:	d809      	bhi.n	8001e0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	f000 f95b 	bl	80020ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e04:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <HAL_InitTick+0x74>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	e007      	b.n	8001e1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	e004      	b.n	8001e1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	73fb      	strb	r3, [r7, #15]
 8001e16:	e001      	b.n	8001e1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000008 	.word	0x20000008
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	20000004 	.word	0x20000004

08001e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_IncTick+0x20>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_IncTick+0x24>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <HAL_IncTick+0x24>)
 8001e46:	6013      	str	r3, [r2, #0]
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000008 	.word	0x20000008
 8001e58:	2000140c 	.word	0x2000140c

08001e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <HAL_GetTick+0x14>)
 8001e62:	681b      	ldr	r3, [r3, #0]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	2000140c 	.word	0x2000140c

08001e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e7c:	f7ff ffee 	bl	8001e5c <HAL_GetTick>
 8001e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8c:	d005      	beq.n	8001e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <HAL_Delay+0x44>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4413      	add	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e9a:	bf00      	nop
 8001e9c:	f7ff ffde 	bl	8001e5c <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d8f7      	bhi.n	8001e9c <HAL_Delay+0x28>
  {
  }
}
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000008 	.word	0x20000008

08001ebc <__NVIC_SetPriorityGrouping>:
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eee:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	60d3      	str	r3, [r2, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_GetPriorityGrouping>:
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <__NVIC_GetPriorityGrouping+0x18>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	f003 0307 	and.w	r3, r3, #7
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <__NVIC_EnableIRQ>:
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	db0b      	blt.n	8001f4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	f003 021f 	and.w	r2, r3, #31
 8001f38:	4907      	ldr	r1, [pc, #28]	; (8001f58 <__NVIC_EnableIRQ+0x38>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	2001      	movs	r0, #1
 8001f42:	fa00 f202 	lsl.w	r2, r0, r2
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000e100 	.word	0xe000e100

08001f5c <__NVIC_DisableIRQ>:
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	db12      	blt.n	8001f94 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	f003 021f 	and.w	r2, r3, #31
 8001f74:	490a      	ldr	r1, [pc, #40]	; (8001fa0 <__NVIC_DisableIRQ+0x44>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f82:	3320      	adds	r3, #32
 8001f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f88:	f3bf 8f4f 	dsb	sy
}
 8001f8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f8e:	f3bf 8f6f 	isb	sy
}
 8001f92:	bf00      	nop
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000e100 	.word	0xe000e100

08001fa4 <__NVIC_SetPriority>:
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	6039      	str	r1, [r7, #0]
 8001fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	db0a      	blt.n	8001fce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	490c      	ldr	r1, [pc, #48]	; (8001ff0 <__NVIC_SetPriority+0x4c>)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	0112      	lsls	r2, r2, #4
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001fcc:	e00a      	b.n	8001fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4908      	ldr	r1, [pc, #32]	; (8001ff4 <__NVIC_SetPriority+0x50>)
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	3b04      	subs	r3, #4
 8001fdc:	0112      	lsls	r2, r2, #4
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	761a      	strb	r2, [r3, #24]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000e100 	.word	0xe000e100
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <NVIC_EncodePriority>:
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	; 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f1c3 0307 	rsb	r3, r3, #7
 8002012:	2b04      	cmp	r3, #4
 8002014:	bf28      	it	cs
 8002016:	2304      	movcs	r3, #4
 8002018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3304      	adds	r3, #4
 800201e:	2b06      	cmp	r3, #6
 8002020:	d902      	bls.n	8002028 <NVIC_EncodePriority+0x30>
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3b03      	subs	r3, #3
 8002026:	e000      	b.n	800202a <NVIC_EncodePriority+0x32>
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	f04f 32ff 	mov.w	r2, #4294967295
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	401a      	ands	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002040:	f04f 31ff 	mov.w	r1, #4294967295
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43d9      	mvns	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	4313      	orrs	r3, r2
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	; 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <SysTick_Config>:
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3b01      	subs	r3, #1
 800206c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002070:	d301      	bcc.n	8002076 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002072:	2301      	movs	r3, #1
 8002074:	e00f      	b.n	8002096 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002076:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <SysTick_Config+0x40>)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800207e:	210f      	movs	r1, #15
 8002080:	f04f 30ff 	mov.w	r0, #4294967295
 8002084:	f7ff ff8e 	bl	8001fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <SysTick_Config+0x40>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208e:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <SysTick_Config+0x40>)
 8002090:	2207      	movs	r2, #7
 8002092:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	e000e010 	.word	0xe000e010

080020a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ff05 	bl	8001ebc <__NVIC_SetPriorityGrouping>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b086      	sub	sp, #24
 80020be:	af00      	add	r7, sp, #0
 80020c0:	4603      	mov	r3, r0
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020cc:	f7ff ff1a 	bl	8001f04 <__NVIC_GetPriorityGrouping>
 80020d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	68b9      	ldr	r1, [r7, #8]
 80020d6:	6978      	ldr	r0, [r7, #20]
 80020d8:	f7ff ff8e 	bl	8001ff8 <NVIC_EncodePriority>
 80020dc:	4602      	mov	r2, r0
 80020de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff5d 	bl	8001fa4 <__NVIC_SetPriority>
}
 80020ea:	bf00      	nop
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff0d 	bl	8001f20 <__NVIC_EnableIRQ>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	4603      	mov	r3, r0
 8002116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff1d 	bl	8001f5c <__NVIC_DisableIRQ>
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff ff94 	bl	8002060 <SysTick_Config>
 8002138:	4603      	mov	r3, r0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e0ac      	b.n	80022b0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f8b2 	bl	80022c4 <DFSDM_GetChannelFromInstance>
 8002160:	4603      	mov	r3, r0
 8002162:	4a55      	ldr	r2, [pc, #340]	; (80022b8 <HAL_DFSDM_ChannelInit+0x174>)
 8002164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e09f      	b.n	80022b0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff f9fb 	bl	800156c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002176:	4b51      	ldr	r3, [pc, #324]	; (80022bc <HAL_DFSDM_ChannelInit+0x178>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	3301      	adds	r3, #1
 800217c:	4a4f      	ldr	r2, [pc, #316]	; (80022bc <HAL_DFSDM_ChannelInit+0x178>)
 800217e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002180:	4b4e      	ldr	r3, [pc, #312]	; (80022bc <HAL_DFSDM_ChannelInit+0x178>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d125      	bne.n	80021d4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002188:	4b4d      	ldr	r3, [pc, #308]	; (80022c0 <HAL_DFSDM_ChannelInit+0x17c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a4c      	ldr	r2, [pc, #304]	; (80022c0 <HAL_DFSDM_ChannelInit+0x17c>)
 800218e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002192:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002194:	4b4a      	ldr	r3, [pc, #296]	; (80022c0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	4948      	ldr	r1, [pc, #288]	; (80022c0 <HAL_DFSDM_ChannelInit+0x17c>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80021a2:	4b47      	ldr	r3, [pc, #284]	; (80022c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a46      	ldr	r2, [pc, #280]	; (80022c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80021a8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80021ac:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	791b      	ldrb	r3, [r3, #4]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d108      	bne.n	80021c8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80021b6:	4b42      	ldr	r3, [pc, #264]	; (80022c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	3b01      	subs	r3, #1
 80021c0:	041b      	lsls	r3, r3, #16
 80021c2:	493f      	ldr	r1, [pc, #252]	; (80022c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80021c8:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a3c      	ldr	r2, [pc, #240]	; (80022c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80021ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021d2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80021e2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6819      	ldr	r1, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80021f2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80021f8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 020f 	bic.w	r2, r2, #15
 8002210:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6819      	ldr	r1, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002238:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6899      	ldr	r1, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	3b01      	subs	r3, #1
 800224a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f002 0207 	and.w	r2, r2, #7
 8002264:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6859      	ldr	r1, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002290:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f810 	bl	80022c4 <DFSDM_GetChannelFromInstance>
 80022a4:	4602      	mov	r2, r0
 80022a6:	4904      	ldr	r1, [pc, #16]	; (80022b8 <HAL_DFSDM_ChannelInit+0x174>)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20001414 	.word	0x20001414
 80022bc:	20001410 	.word	0x20001410
 80022c0:	40016000 	.word	0x40016000

080022c4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <DFSDM_GetChannelFromInstance+0x7c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d102      	bne.n	80022da <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	e02b      	b.n	8002332 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a19      	ldr	r2, [pc, #100]	; (8002344 <DFSDM_GetChannelFromInstance+0x80>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d102      	bne.n	80022e8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80022e2:	2301      	movs	r3, #1
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	e024      	b.n	8002332 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a17      	ldr	r2, [pc, #92]	; (8002348 <DFSDM_GetChannelFromInstance+0x84>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d102      	bne.n	80022f6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80022f0:	2302      	movs	r3, #2
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e01d      	b.n	8002332 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a14      	ldr	r2, [pc, #80]	; (800234c <DFSDM_GetChannelFromInstance+0x88>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d102      	bne.n	8002304 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80022fe:	2304      	movs	r3, #4
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	e016      	b.n	8002332 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a12      	ldr	r2, [pc, #72]	; (8002350 <DFSDM_GetChannelFromInstance+0x8c>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d102      	bne.n	8002312 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800230c:	2305      	movs	r3, #5
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	e00f      	b.n	8002332 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a0f      	ldr	r2, [pc, #60]	; (8002354 <DFSDM_GetChannelFromInstance+0x90>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d102      	bne.n	8002320 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800231a:	2306      	movs	r3, #6
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	e008      	b.n	8002332 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a0d      	ldr	r2, [pc, #52]	; (8002358 <DFSDM_GetChannelFromInstance+0x94>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d102      	bne.n	800232e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002328:	2307      	movs	r3, #7
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	e001      	b.n	8002332 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800232e:	2303      	movs	r3, #3
 8002330:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002332:	68fb      	ldr	r3, [r7, #12]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	40016000 	.word	0x40016000
 8002344:	40016020 	.word	0x40016020
 8002348:	40016040 	.word	0x40016040
 800234c:	40016080 	.word	0x40016080
 8002350:	400160a0 	.word	0x400160a0
 8002354:	400160c0 	.word	0x400160c0
 8002358:	400160e0 	.word	0x400160e0

0800235c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d005      	beq.n	8002380 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2204      	movs	r2, #4
 8002378:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	73fb      	strb	r3, [r7, #15]
 800237e:	e029      	b.n	80023d4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 020e 	bic.w	r2, r2, #14
 800238e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0201 	bic.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a4:	f003 021c 	and.w	r2, r3, #28
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	2101      	movs	r1, #1
 80023ae:	fa01 f202 	lsl.w	r2, r1, r2
 80023b2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	4798      	blx	r3
    }
  }
  return status;
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b087      	sub	sp, #28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ee:	e17f      	b.n	80026f0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	2101      	movs	r1, #1
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	fa01 f303 	lsl.w	r3, r1, r3
 80023fc:	4013      	ands	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 8171 	beq.w	80026ea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	2b01      	cmp	r3, #1
 8002412:	d005      	beq.n	8002420 <HAL_GPIO_Init+0x40>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d130      	bne.n	8002482 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	2203      	movs	r2, #3
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002456:	2201      	movs	r2, #1
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	091b      	lsrs	r3, r3, #4
 800246c:	f003 0201 	and.w	r2, r3, #1
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	2b03      	cmp	r3, #3
 800248c:	d118      	bne.n	80024c0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002494:	2201      	movs	r2, #1
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	08db      	lsrs	r3, r3, #3
 80024aa:	f003 0201 	and.w	r2, r3, #1
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d017      	beq.n	80024fc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	2203      	movs	r2, #3
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d123      	bne.n	8002550 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	08da      	lsrs	r2, r3, #3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3208      	adds	r2, #8
 8002510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002514:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	220f      	movs	r2, #15
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	08da      	lsrs	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3208      	adds	r2, #8
 800254a:	6939      	ldr	r1, [r7, #16]
 800254c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	2203      	movs	r2, #3
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0203 	and.w	r2, r3, #3
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80ac 	beq.w	80026ea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002592:	4b5f      	ldr	r3, [pc, #380]	; (8002710 <HAL_GPIO_Init+0x330>)
 8002594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002596:	4a5e      	ldr	r2, [pc, #376]	; (8002710 <HAL_GPIO_Init+0x330>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6613      	str	r3, [r2, #96]	; 0x60
 800259e:	4b5c      	ldr	r3, [pc, #368]	; (8002710 <HAL_GPIO_Init+0x330>)
 80025a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025aa:	4a5a      	ldr	r2, [pc, #360]	; (8002714 <HAL_GPIO_Init+0x334>)
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	089b      	lsrs	r3, r3, #2
 80025b0:	3302      	adds	r3, #2
 80025b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	220f      	movs	r2, #15
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025d4:	d025      	beq.n	8002622 <HAL_GPIO_Init+0x242>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a4f      	ldr	r2, [pc, #316]	; (8002718 <HAL_GPIO_Init+0x338>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d01f      	beq.n	800261e <HAL_GPIO_Init+0x23e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a4e      	ldr	r2, [pc, #312]	; (800271c <HAL_GPIO_Init+0x33c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d019      	beq.n	800261a <HAL_GPIO_Init+0x23a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a4d      	ldr	r2, [pc, #308]	; (8002720 <HAL_GPIO_Init+0x340>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d013      	beq.n	8002616 <HAL_GPIO_Init+0x236>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a4c      	ldr	r2, [pc, #304]	; (8002724 <HAL_GPIO_Init+0x344>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00d      	beq.n	8002612 <HAL_GPIO_Init+0x232>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a4b      	ldr	r2, [pc, #300]	; (8002728 <HAL_GPIO_Init+0x348>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d007      	beq.n	800260e <HAL_GPIO_Init+0x22e>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a4a      	ldr	r2, [pc, #296]	; (800272c <HAL_GPIO_Init+0x34c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d101      	bne.n	800260a <HAL_GPIO_Init+0x22a>
 8002606:	2306      	movs	r3, #6
 8002608:	e00c      	b.n	8002624 <HAL_GPIO_Init+0x244>
 800260a:	2307      	movs	r3, #7
 800260c:	e00a      	b.n	8002624 <HAL_GPIO_Init+0x244>
 800260e:	2305      	movs	r3, #5
 8002610:	e008      	b.n	8002624 <HAL_GPIO_Init+0x244>
 8002612:	2304      	movs	r3, #4
 8002614:	e006      	b.n	8002624 <HAL_GPIO_Init+0x244>
 8002616:	2303      	movs	r3, #3
 8002618:	e004      	b.n	8002624 <HAL_GPIO_Init+0x244>
 800261a:	2302      	movs	r3, #2
 800261c:	e002      	b.n	8002624 <HAL_GPIO_Init+0x244>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_GPIO_Init+0x244>
 8002622:	2300      	movs	r3, #0
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	f002 0203 	and.w	r2, r2, #3
 800262a:	0092      	lsls	r2, r2, #2
 800262c:	4093      	lsls	r3, r2
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002634:	4937      	ldr	r1, [pc, #220]	; (8002714 <HAL_GPIO_Init+0x334>)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	089b      	lsrs	r3, r3, #2
 800263a:	3302      	adds	r3, #2
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002642:	4b3b      	ldr	r3, [pc, #236]	; (8002730 <HAL_GPIO_Init+0x350>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	43db      	mvns	r3, r3
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002666:	4a32      	ldr	r2, [pc, #200]	; (8002730 <HAL_GPIO_Init+0x350>)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800266c:	4b30      	ldr	r3, [pc, #192]	; (8002730 <HAL_GPIO_Init+0x350>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	43db      	mvns	r3, r3
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002690:	4a27      	ldr	r2, [pc, #156]	; (8002730 <HAL_GPIO_Init+0x350>)
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002696:	4b26      	ldr	r3, [pc, #152]	; (8002730 <HAL_GPIO_Init+0x350>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	43db      	mvns	r3, r3
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4013      	ands	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026ba:	4a1d      	ldr	r2, [pc, #116]	; (8002730 <HAL_GPIO_Init+0x350>)
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80026c0:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <HAL_GPIO_Init+0x350>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4013      	ands	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026e4:	4a12      	ldr	r2, [pc, #72]	; (8002730 <HAL_GPIO_Init+0x350>)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	3301      	adds	r3, #1
 80026ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	fa22 f303 	lsr.w	r3, r2, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f47f ae78 	bne.w	80023f0 <HAL_GPIO_Init+0x10>
  }
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	371c      	adds	r7, #28
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40021000 	.word	0x40021000
 8002714:	40010000 	.word	0x40010000
 8002718:	48000400 	.word	0x48000400
 800271c:	48000800 	.word	0x48000800
 8002720:	48000c00 	.word	0x48000c00
 8002724:	48001000 	.word	0x48001000
 8002728:	48001400 	.word	0x48001400
 800272c:	48001800 	.word	0x48001800
 8002730:	40010400 	.word	0x40010400

08002734 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002734:	b480      	push	{r7}
 8002736:	b087      	sub	sp, #28
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002742:	e0cd      	b.n	80028e0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002744:	2201      	movs	r2, #1
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	4013      	ands	r3, r2
 8002750:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80c0 	beq.w	80028da <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800275a:	4a68      	ldr	r2, [pc, #416]	; (80028fc <HAL_GPIO_DeInit+0x1c8>)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	089b      	lsrs	r3, r3, #2
 8002760:	3302      	adds	r3, #2
 8002762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002766:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	220f      	movs	r2, #15
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	4013      	ands	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002782:	d025      	beq.n	80027d0 <HAL_GPIO_DeInit+0x9c>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a5e      	ldr	r2, [pc, #376]	; (8002900 <HAL_GPIO_DeInit+0x1cc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d01f      	beq.n	80027cc <HAL_GPIO_DeInit+0x98>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a5d      	ldr	r2, [pc, #372]	; (8002904 <HAL_GPIO_DeInit+0x1d0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d019      	beq.n	80027c8 <HAL_GPIO_DeInit+0x94>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a5c      	ldr	r2, [pc, #368]	; (8002908 <HAL_GPIO_DeInit+0x1d4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d013      	beq.n	80027c4 <HAL_GPIO_DeInit+0x90>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a5b      	ldr	r2, [pc, #364]	; (800290c <HAL_GPIO_DeInit+0x1d8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d00d      	beq.n	80027c0 <HAL_GPIO_DeInit+0x8c>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a5a      	ldr	r2, [pc, #360]	; (8002910 <HAL_GPIO_DeInit+0x1dc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d007      	beq.n	80027bc <HAL_GPIO_DeInit+0x88>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a59      	ldr	r2, [pc, #356]	; (8002914 <HAL_GPIO_DeInit+0x1e0>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d101      	bne.n	80027b8 <HAL_GPIO_DeInit+0x84>
 80027b4:	2306      	movs	r3, #6
 80027b6:	e00c      	b.n	80027d2 <HAL_GPIO_DeInit+0x9e>
 80027b8:	2307      	movs	r3, #7
 80027ba:	e00a      	b.n	80027d2 <HAL_GPIO_DeInit+0x9e>
 80027bc:	2305      	movs	r3, #5
 80027be:	e008      	b.n	80027d2 <HAL_GPIO_DeInit+0x9e>
 80027c0:	2304      	movs	r3, #4
 80027c2:	e006      	b.n	80027d2 <HAL_GPIO_DeInit+0x9e>
 80027c4:	2303      	movs	r3, #3
 80027c6:	e004      	b.n	80027d2 <HAL_GPIO_DeInit+0x9e>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e002      	b.n	80027d2 <HAL_GPIO_DeInit+0x9e>
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <HAL_GPIO_DeInit+0x9e>
 80027d0:	2300      	movs	r3, #0
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	f002 0203 	and.w	r2, r2, #3
 80027d8:	0092      	lsls	r2, r2, #2
 80027da:	4093      	lsls	r3, r2
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d132      	bne.n	8002848 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80027e2:	4b4d      	ldr	r3, [pc, #308]	; (8002918 <HAL_GPIO_DeInit+0x1e4>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	494b      	ldr	r1, [pc, #300]	; (8002918 <HAL_GPIO_DeInit+0x1e4>)
 80027ec:	4013      	ands	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80027f0:	4b49      	ldr	r3, [pc, #292]	; (8002918 <HAL_GPIO_DeInit+0x1e4>)
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	4947      	ldr	r1, [pc, #284]	; (8002918 <HAL_GPIO_DeInit+0x1e4>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80027fe:	4b46      	ldr	r3, [pc, #280]	; (8002918 <HAL_GPIO_DeInit+0x1e4>)
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	43db      	mvns	r3, r3
 8002806:	4944      	ldr	r1, [pc, #272]	; (8002918 <HAL_GPIO_DeInit+0x1e4>)
 8002808:	4013      	ands	r3, r2
 800280a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800280c:	4b42      	ldr	r3, [pc, #264]	; (8002918 <HAL_GPIO_DeInit+0x1e4>)
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	43db      	mvns	r3, r3
 8002814:	4940      	ldr	r1, [pc, #256]	; (8002918 <HAL_GPIO_DeInit+0x1e4>)
 8002816:	4013      	ands	r3, r2
 8002818:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	220f      	movs	r2, #15
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800282a:	4a34      	ldr	r2, [pc, #208]	; (80028fc <HAL_GPIO_DeInit+0x1c8>)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	089b      	lsrs	r3, r3, #2
 8002830:	3302      	adds	r3, #2
 8002832:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	43da      	mvns	r2, r3
 800283a:	4830      	ldr	r0, [pc, #192]	; (80028fc <HAL_GPIO_DeInit+0x1c8>)
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	089b      	lsrs	r3, r3, #2
 8002840:	400a      	ands	r2, r1
 8002842:	3302      	adds	r3, #2
 8002844:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	2103      	movs	r1, #3
 8002852:	fa01 f303 	lsl.w	r3, r1, r3
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	08da      	lsrs	r2, r3, #3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3208      	adds	r2, #8
 8002864:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	220f      	movs	r2, #15
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	08d2      	lsrs	r2, r2, #3
 800287c:	4019      	ands	r1, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3208      	adds	r2, #8
 8002882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	2103      	movs	r1, #3
 8002890:	fa01 f303 	lsl.w	r3, r1, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	401a      	ands	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	2101      	movs	r1, #1
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	fa01 f303 	lsl.w	r3, r1, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	401a      	ands	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68da      	ldr	r2, [r3, #12]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	2103      	movs	r1, #3
 80028ba:	fa01 f303 	lsl.w	r3, r1, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	401a      	ands	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ca:	2101      	movs	r1, #1
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	401a      	ands	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	3301      	adds	r3, #1
 80028de:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	fa22 f303 	lsr.w	r3, r2, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f47f af2b 	bne.w	8002744 <HAL_GPIO_DeInit+0x10>
  }
}
 80028ee:	bf00      	nop
 80028f0:	bf00      	nop
 80028f2:	371c      	adds	r7, #28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	40010000 	.word	0x40010000
 8002900:	48000400 	.word	0x48000400
 8002904:	48000800 	.word	0x48000800
 8002908:	48000c00 	.word	0x48000c00
 800290c:	48001000 	.word	0x48001000
 8002910:	48001400 	.word	0x48001400
 8002914:	48001800 	.word	0x48001800
 8002918:	40010400 	.word	0x40010400

0800291c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	887b      	ldrh	r3, [r7, #2]
 800292e:	4013      	ands	r3, r2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002934:	2301      	movs	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
 8002938:	e001      	b.n	800293e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800293a:	2300      	movs	r3, #0
 800293c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800293e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	807b      	strh	r3, [r7, #2]
 8002958:	4613      	mov	r3, r2
 800295a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800295c:	787b      	ldrb	r3, [r7, #1]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002962:	887a      	ldrh	r2, [r7, #2]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002968:	e002      	b.n	8002970 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800296a:	887a      	ldrh	r2, [r7, #2]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	4013      	ands	r3, r2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d006      	beq.n	80029a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002992:	4a05      	ldr	r2, [pc, #20]	; (80029a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fe fb40 	bl	8001020 <HAL_GPIO_EXTI_Callback>
  }
}
 80029a0:	bf00      	nop
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40010400 	.word	0x40010400

080029ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e08d      	b.n	8002ada <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d106      	bne.n	80029d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7fe fe2e 	bl	8001634 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2224      	movs	r2, #36	; 0x24
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0201 	bic.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d107      	bne.n	8002a26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	e006      	b.n	8002a34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d108      	bne.n	8002a4e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a4a:	605a      	str	r2, [r3, #4]
 8002a4c:	e007      	b.n	8002a5e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69d9      	ldr	r1, [r3, #28]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1a      	ldr	r2, [r3, #32]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e021      	b.n	8002b38 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2224      	movs	r2, #36	; 0x24
 8002af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0201 	bic.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7fe fdef 	bl	80016f0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	4608      	mov	r0, r1
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4603      	mov	r3, r0
 8002b50:	817b      	strh	r3, [r7, #10]
 8002b52:	460b      	mov	r3, r1
 8002b54:	813b      	strh	r3, [r7, #8]
 8002b56:	4613      	mov	r3, r2
 8002b58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b20      	cmp	r3, #32
 8002b64:	f040 80f9 	bne.w	8002d5a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <HAL_I2C_Mem_Write+0x34>
 8002b6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d105      	bne.n	8002b80 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b7a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0ed      	b.n	8002d5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_I2C_Mem_Write+0x4e>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e0e6      	b.n	8002d5c <HAL_I2C_Mem_Write+0x21c>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b96:	f7ff f961 	bl	8001e5c <HAL_GetTick>
 8002b9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	2319      	movs	r3, #25
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 fac3 	bl	8003134 <I2C_WaitOnFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e0d1      	b.n	8002d5c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2221      	movs	r2, #33	; 0x21
 8002bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2240      	movs	r2, #64	; 0x40
 8002bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a3a      	ldr	r2, [r7, #32]
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002be0:	88f8      	ldrh	r0, [r7, #6]
 8002be2:	893a      	ldrh	r2, [r7, #8]
 8002be4:	8979      	ldrh	r1, [r7, #10]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	9301      	str	r3, [sp, #4]
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	4603      	mov	r3, r0
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f9d3 	bl	8002f9c <I2C_RequestMemoryWrite>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0a9      	b.n	8002d5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2bff      	cmp	r3, #255	; 0xff
 8002c10:	d90e      	bls.n	8002c30 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	22ff      	movs	r2, #255	; 0xff
 8002c16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	8979      	ldrh	r1, [r7, #10]
 8002c20:	2300      	movs	r3, #0
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 fc3d 	bl	80034a8 <I2C_TransferConfig>
 8002c2e:	e00f      	b.n	8002c50 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	8979      	ldrh	r1, [r7, #10]
 8002c42:	2300      	movs	r3, #0
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 fc2c 	bl	80034a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 fabc 	bl	80031d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e07b      	b.n	8002d5c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	781a      	ldrb	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d034      	beq.n	8002d08 <HAL_I2C_Mem_Write+0x1c8>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d130      	bne.n	8002d08 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cac:	2200      	movs	r2, #0
 8002cae:	2180      	movs	r1, #128	; 0x80
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 fa3f 	bl	8003134 <I2C_WaitOnFlagUntilTimeout>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e04d      	b.n	8002d5c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2bff      	cmp	r3, #255	; 0xff
 8002cc8:	d90e      	bls.n	8002ce8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	22ff      	movs	r2, #255	; 0xff
 8002cce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	8979      	ldrh	r1, [r7, #10]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 fbe1 	bl	80034a8 <I2C_TransferConfig>
 8002ce6:	e00f      	b.n	8002d08 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	8979      	ldrh	r1, [r7, #10]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 fbd0 	bl	80034a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d19e      	bne.n	8002c50 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 faa2 	bl	8003260 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e01a      	b.n	8002d5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6859      	ldr	r1, [r3, #4]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <HAL_I2C_Mem_Write+0x224>)
 8002d3a:	400b      	ands	r3, r1
 8002d3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	e000      	b.n	8002d5c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002d5a:	2302      	movs	r3, #2
  }
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	fe00e800 	.word	0xfe00e800

08002d68 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	4608      	mov	r0, r1
 8002d72:	4611      	mov	r1, r2
 8002d74:	461a      	mov	r2, r3
 8002d76:	4603      	mov	r3, r0
 8002d78:	817b      	strh	r3, [r7, #10]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	813b      	strh	r3, [r7, #8]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b20      	cmp	r3, #32
 8002d8c:	f040 80fd 	bne.w	8002f8a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <HAL_I2C_Mem_Read+0x34>
 8002d96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d105      	bne.n	8002da8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002da2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0f1      	b.n	8002f8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_I2C_Mem_Read+0x4e>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e0ea      	b.n	8002f8c <HAL_I2C_Mem_Read+0x224>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dbe:	f7ff f84d 	bl	8001e5c <HAL_GetTick>
 8002dc2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	2319      	movs	r3, #25
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 f9af 	bl	8003134 <I2C_WaitOnFlagUntilTimeout>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0d5      	b.n	8002f8c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2222      	movs	r2, #34	; 0x22
 8002de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2240      	movs	r2, #64	; 0x40
 8002dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6a3a      	ldr	r2, [r7, #32]
 8002dfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e08:	88f8      	ldrh	r0, [r7, #6]
 8002e0a:	893a      	ldrh	r2, [r7, #8]
 8002e0c:	8979      	ldrh	r1, [r7, #10]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	9301      	str	r3, [sp, #4]
 8002e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	4603      	mov	r3, r0
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f913 	bl	8003044 <I2C_RequestMemoryRead>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0ad      	b.n	8002f8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2bff      	cmp	r3, #255	; 0xff
 8002e38:	d90e      	bls.n	8002e58 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	22ff      	movs	r2, #255	; 0xff
 8002e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	8979      	ldrh	r1, [r7, #10]
 8002e48:	4b52      	ldr	r3, [pc, #328]	; (8002f94 <HAL_I2C_Mem_Read+0x22c>)
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 fb29 	bl	80034a8 <I2C_TransferConfig>
 8002e56:	e00f      	b.n	8002e78 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	8979      	ldrh	r1, [r7, #10]
 8002e6a:	4b4a      	ldr	r3, [pc, #296]	; (8002f94 <HAL_I2C_Mem_Read+0x22c>)
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 fb18 	bl	80034a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2104      	movs	r1, #4
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f956 	bl	8003134 <I2C_WaitOnFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e07c      	b.n	8002f8c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d034      	beq.n	8002f38 <HAL_I2C_Mem_Read+0x1d0>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d130      	bne.n	8002f38 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002edc:	2200      	movs	r2, #0
 8002ede:	2180      	movs	r1, #128	; 0x80
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 f927 	bl	8003134 <I2C_WaitOnFlagUntilTimeout>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e04d      	b.n	8002f8c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	2bff      	cmp	r3, #255	; 0xff
 8002ef8:	d90e      	bls.n	8002f18 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	22ff      	movs	r2, #255	; 0xff
 8002efe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	8979      	ldrh	r1, [r7, #10]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 fac9 	bl	80034a8 <I2C_TransferConfig>
 8002f16:	e00f      	b.n	8002f38 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	8979      	ldrh	r1, [r7, #10]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 fab8 	bl	80034a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d19a      	bne.n	8002e78 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 f98a 	bl	8003260 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e01a      	b.n	8002f8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6859      	ldr	r1, [r3, #4]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <HAL_I2C_Mem_Read+0x230>)
 8002f6a:	400b      	ands	r3, r1
 8002f6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2220      	movs	r2, #32
 8002f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	e000      	b.n	8002f8c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002f8a:	2302      	movs	r3, #2
  }
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	80002400 	.word	0x80002400
 8002f98:	fe00e800 	.word	0xfe00e800

08002f9c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af02      	add	r7, sp, #8
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	4608      	mov	r0, r1
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4603      	mov	r3, r0
 8002fac:	817b      	strh	r3, [r7, #10]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	813b      	strh	r3, [r7, #8]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002fb6:	88fb      	ldrh	r3, [r7, #6]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	8979      	ldrh	r1, [r7, #10]
 8002fbc:	4b20      	ldr	r3, [pc, #128]	; (8003040 <I2C_RequestMemoryWrite+0xa4>)
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 fa6f 	bl	80034a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	69b9      	ldr	r1, [r7, #24]
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f8ff 	bl	80031d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e02c      	b.n	8003038 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d105      	bne.n	8002ff0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fe4:	893b      	ldrh	r3, [r7, #8]
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	629a      	str	r2, [r3, #40]	; 0x28
 8002fee:	e015      	b.n	800301c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ff0:	893b      	ldrh	r3, [r7, #8]
 8002ff2:	0a1b      	lsrs	r3, r3, #8
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ffe:	69fa      	ldr	r2, [r7, #28]
 8003000:	69b9      	ldr	r1, [r7, #24]
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f8e5 	bl	80031d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e012      	b.n	8003038 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003012:	893b      	ldrh	r3, [r7, #8]
 8003014:	b2da      	uxtb	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	2200      	movs	r2, #0
 8003024:	2180      	movs	r1, #128	; 0x80
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f884 	bl	8003134 <I2C_WaitOnFlagUntilTimeout>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	80002000 	.word	0x80002000

08003044 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af02      	add	r7, sp, #8
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	4608      	mov	r0, r1
 800304e:	4611      	mov	r1, r2
 8003050:	461a      	mov	r2, r3
 8003052:	4603      	mov	r3, r0
 8003054:	817b      	strh	r3, [r7, #10]
 8003056:	460b      	mov	r3, r1
 8003058:	813b      	strh	r3, [r7, #8]
 800305a:	4613      	mov	r3, r2
 800305c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800305e:	88fb      	ldrh	r3, [r7, #6]
 8003060:	b2da      	uxtb	r2, r3
 8003062:	8979      	ldrh	r1, [r7, #10]
 8003064:	4b20      	ldr	r3, [pc, #128]	; (80030e8 <I2C_RequestMemoryRead+0xa4>)
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	2300      	movs	r3, #0
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 fa1c 	bl	80034a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003070:	69fa      	ldr	r2, [r7, #28]
 8003072:	69b9      	ldr	r1, [r7, #24]
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 f8ac 	bl	80031d2 <I2C_WaitOnTXISFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e02c      	b.n	80030de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003084:	88fb      	ldrh	r3, [r7, #6]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d105      	bne.n	8003096 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800308a:	893b      	ldrh	r3, [r7, #8]
 800308c:	b2da      	uxtb	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	629a      	str	r2, [r3, #40]	; 0x28
 8003094:	e015      	b.n	80030c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003096:	893b      	ldrh	r3, [r7, #8]
 8003098:	0a1b      	lsrs	r3, r3, #8
 800309a:	b29b      	uxth	r3, r3
 800309c:	b2da      	uxtb	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030a4:	69fa      	ldr	r2, [r7, #28]
 80030a6:	69b9      	ldr	r1, [r7, #24]
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 f892 	bl	80031d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e012      	b.n	80030de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030b8:	893b      	ldrh	r3, [r7, #8]
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2200      	movs	r2, #0
 80030ca:	2140      	movs	r1, #64	; 0x40
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 f831 	bl	8003134 <I2C_WaitOnFlagUntilTimeout>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e000      	b.n	80030de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	80002000 	.word	0x80002000

080030ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d103      	bne.n	800310a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2200      	movs	r2, #0
 8003108:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b01      	cmp	r3, #1
 8003116:	d007      	beq.n	8003128 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699a      	ldr	r2, [r3, #24]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	619a      	str	r2, [r3, #24]
  }
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	4613      	mov	r3, r2
 8003142:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003144:	e031      	b.n	80031aa <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314c:	d02d      	beq.n	80031aa <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314e:	f7fe fe85 	bl	8001e5c <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d302      	bcc.n	8003164 <I2C_WaitOnFlagUntilTimeout+0x30>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d122      	bne.n	80031aa <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699a      	ldr	r2, [r3, #24]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	4013      	ands	r3, r2
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	429a      	cmp	r2, r3
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	461a      	mov	r2, r3
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	429a      	cmp	r2, r3
 8003180:	d113      	bne.n	80031aa <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	f043 0220 	orr.w	r2, r3, #32
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2220      	movs	r2, #32
 8003192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e00f      	b.n	80031ca <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	699a      	ldr	r2, [r3, #24]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4013      	ands	r3, r2
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	bf0c      	ite	eq
 80031ba:	2301      	moveq	r3, #1
 80031bc:	2300      	movne	r3, #0
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d0be      	beq.n	8003146 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031de:	e033      	b.n	8003248 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 f87f 	bl	80032e8 <I2C_IsErrorOccurred>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e031      	b.n	8003258 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fa:	d025      	beq.n	8003248 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031fc:	f7fe fe2e 	bl	8001e5c <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	429a      	cmp	r2, r3
 800320a:	d302      	bcc.n	8003212 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d11a      	bne.n	8003248 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b02      	cmp	r3, #2
 800321e:	d013      	beq.n	8003248 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003224:	f043 0220 	orr.w	r2, r3, #32
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e007      	b.n	8003258 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b02      	cmp	r3, #2
 8003254:	d1c4      	bne.n	80031e0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800326c:	e02f      	b.n	80032ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f838 	bl	80032e8 <I2C_IsErrorOccurred>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e02d      	b.n	80032de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003282:	f7fe fdeb 	bl	8001e5c <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	429a      	cmp	r2, r3
 8003290:	d302      	bcc.n	8003298 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d11a      	bne.n	80032ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	d013      	beq.n	80032ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032aa:	f043 0220 	orr.w	r2, r3, #32
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e007      	b.n	80032de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d1c8      	bne.n	800326e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08a      	sub	sp, #40	; 0x28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032f4:	2300      	movs	r3, #0
 80032f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	f003 0310 	and.w	r3, r3, #16
 8003310:	2b00      	cmp	r3, #0
 8003312:	d068      	beq.n	80033e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2210      	movs	r2, #16
 800331a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800331c:	e049      	b.n	80033b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003324:	d045      	beq.n	80033b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003326:	f7fe fd99 	bl	8001e5c <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	429a      	cmp	r2, r3
 8003334:	d302      	bcc.n	800333c <I2C_IsErrorOccurred+0x54>
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d13a      	bne.n	80033b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003346:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800334e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800335a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800335e:	d121      	bne.n	80033a4 <I2C_IsErrorOccurred+0xbc>
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003366:	d01d      	beq.n	80033a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	2b20      	cmp	r3, #32
 800336c:	d01a      	beq.n	80033a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800337c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800337e:	f7fe fd6d 	bl	8001e5c <HAL_GetTick>
 8003382:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003384:	e00e      	b.n	80033a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003386:	f7fe fd69 	bl	8001e5c <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b19      	cmp	r3, #25
 8003392:	d907      	bls.n	80033a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	f043 0320 	orr.w	r3, r3, #32
 800339a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80033a2:	e006      	b.n	80033b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f003 0320 	and.w	r3, r3, #32
 80033ae:	2b20      	cmp	r3, #32
 80033b0:	d1e9      	bne.n	8003386 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	f003 0320 	and.w	r3, r3, #32
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d003      	beq.n	80033c8 <I2C_IsErrorOccurred+0xe0>
 80033c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0aa      	beq.n	800331e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80033c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d103      	bne.n	80033d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2220      	movs	r2, #32
 80033d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	f043 0304 	orr.w	r3, r3, #4
 80033de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00b      	beq.n	8003410 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003408:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00b      	beq.n	8003432 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	f043 0308 	orr.w	r3, r3, #8
 8003420:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800342a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00b      	beq.n	8003454 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	f043 0302 	orr.w	r3, r3, #2
 8003442:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800344c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003458:	2b00      	cmp	r3, #0
 800345a:	d01c      	beq.n	8003496 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f7ff fe45 	bl	80030ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6859      	ldr	r1, [r3, #4]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	4b0d      	ldr	r3, [pc, #52]	; (80034a4 <I2C_IsErrorOccurred+0x1bc>)
 800346e:	400b      	ands	r3, r1
 8003470:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	431a      	orrs	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800349a:	4618      	mov	r0, r3
 800349c:	3728      	adds	r7, #40	; 0x28
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	fe00e800 	.word	0xfe00e800

080034a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	607b      	str	r3, [r7, #4]
 80034b2:	460b      	mov	r3, r1
 80034b4:	817b      	strh	r3, [r7, #10]
 80034b6:	4613      	mov	r3, r2
 80034b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034ba:	897b      	ldrh	r3, [r7, #10]
 80034bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034c0:	7a7b      	ldrb	r3, [r7, #9]
 80034c2:	041b      	lsls	r3, r3, #16
 80034c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	0d5b      	lsrs	r3, r3, #21
 80034e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80034e6:	4b08      	ldr	r3, [pc, #32]	; (8003508 <I2C_TransferConfig+0x60>)
 80034e8:	430b      	orrs	r3, r1
 80034ea:	43db      	mvns	r3, r3
 80034ec:	ea02 0103 	and.w	r1, r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	03ff63ff 	.word	0x03ff63ff

0800350c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b20      	cmp	r3, #32
 8003520:	d138      	bne.n	8003594 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800352c:	2302      	movs	r3, #2
 800352e:	e032      	b.n	8003596 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2224      	movs	r2, #36	; 0x24
 800353c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0201 	bic.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800355e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6819      	ldr	r1, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0201 	orr.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003590:	2300      	movs	r3, #0
 8003592:	e000      	b.n	8003596 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003594:	2302      	movs	r3, #2
  }
}
 8003596:	4618      	mov	r0, r3
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b085      	sub	sp, #20
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d139      	bne.n	800362c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d101      	bne.n	80035c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035c2:	2302      	movs	r3, #2
 80035c4:	e033      	b.n	800362e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2224      	movs	r2, #36	; 0x24
 80035d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0201 	bic.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	021b      	lsls	r3, r3, #8
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0201 	orr.w	r2, r2, #1
 8003616:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	e000      	b.n	800362e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800362c:	2302      	movs	r3, #2
  }
}
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800363a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800363c:	b08f      	sub	sp, #60	; 0x3c
 800363e:	af0a      	add	r7, sp, #40	; 0x28
 8003640:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e116      	b.n	800387a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fe f9bc 	bl	80019e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2203      	movs	r2, #3
 8003670:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367c:	2b00      	cmp	r3, #0
 800367e:	d102      	bne.n	8003686 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f003 fda7 	bl	80071de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	603b      	str	r3, [r7, #0]
 8003696:	687e      	ldr	r6, [r7, #4]
 8003698:	466d      	mov	r5, sp
 800369a:	f106 0410 	add.w	r4, r6, #16
 800369e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80036ae:	1d33      	adds	r3, r6, #4
 80036b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036b2:	6838      	ldr	r0, [r7, #0]
 80036b4:	f003 fd67 	bl	8007186 <USB_CoreInit>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d005      	beq.n	80036ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e0d7      	b.n	800387a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2100      	movs	r1, #0
 80036d0:	4618      	mov	r0, r3
 80036d2:	f003 fd95 	bl	8007200 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d6:	2300      	movs	r3, #0
 80036d8:	73fb      	strb	r3, [r7, #15]
 80036da:	e04a      	b.n	8003772 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036dc:	7bfa      	ldrb	r2, [r7, #15]
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	333d      	adds	r3, #61	; 0x3d
 80036ec:	2201      	movs	r2, #1
 80036ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036f0:	7bfa      	ldrb	r2, [r7, #15]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	333c      	adds	r3, #60	; 0x3c
 8003700:	7bfa      	ldrb	r2, [r7, #15]
 8003702:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003704:	7bfa      	ldrb	r2, [r7, #15]
 8003706:	7bfb      	ldrb	r3, [r7, #15]
 8003708:	b298      	uxth	r0, r3
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	4613      	mov	r3, r2
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	4413      	add	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	3356      	adds	r3, #86	; 0x56
 8003718:	4602      	mov	r2, r0
 800371a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800371c:	7bfa      	ldrb	r2, [r7, #15]
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	3340      	adds	r3, #64	; 0x40
 800372c:	2200      	movs	r2, #0
 800372e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003730:	7bfa      	ldrb	r2, [r7, #15]
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	3344      	adds	r3, #68	; 0x44
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003744:	7bfa      	ldrb	r2, [r7, #15]
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	3348      	adds	r3, #72	; 0x48
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003758:	7bfa      	ldrb	r2, [r7, #15]
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	334c      	adds	r3, #76	; 0x4c
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	3301      	adds	r3, #1
 8003770:	73fb      	strb	r3, [r7, #15]
 8003772:	7bfa      	ldrb	r2, [r7, #15]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	429a      	cmp	r2, r3
 800377a:	d3af      	bcc.n	80036dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800377c:	2300      	movs	r3, #0
 800377e:	73fb      	strb	r3, [r7, #15]
 8003780:	e044      	b.n	800380c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003782:	7bfa      	ldrb	r2, [r7, #15]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4413      	add	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003794:	2200      	movs	r2, #0
 8003796:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003798:	7bfa      	ldrb	r2, [r7, #15]
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80037aa:	7bfa      	ldrb	r2, [r7, #15]
 80037ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037ae:	7bfa      	ldrb	r2, [r7, #15]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80037c0:	2200      	movs	r2, #0
 80037c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037c4:	7bfa      	ldrb	r2, [r7, #15]
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037da:	7bfa      	ldrb	r2, [r7, #15]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037f0:	7bfa      	ldrb	r2, [r7, #15]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	3301      	adds	r3, #1
 800380a:	73fb      	strb	r3, [r7, #15]
 800380c:	7bfa      	ldrb	r2, [r7, #15]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	429a      	cmp	r2, r3
 8003814:	d3b5      	bcc.n	8003782 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	687e      	ldr	r6, [r7, #4]
 800381e:	466d      	mov	r5, sp
 8003820:	f106 0410 	add.w	r4, r6, #16
 8003824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003826:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800382a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800382c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003830:	e885 0003 	stmia.w	r5, {r0, r1}
 8003834:	1d33      	adds	r3, r6, #4
 8003836:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003838:	6838      	ldr	r0, [r7, #0]
 800383a:	f003 fd2d 	bl	8007298 <USB_DevInit>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e014      	b.n	800387a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	2b01      	cmp	r3, #1
 8003866:	d102      	bne.n	800386e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f80a 	bl	8003882 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f003 fecf 	bl	8007616 <USB_DevDisconnect>

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003882 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003882:	b480      	push	{r7}
 8003884:	b085      	sub	sp, #20
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b4:	f043 0303 	orr.w	r3, r3, #3
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
	...

080038cc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038d0:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a04      	ldr	r2, [pc, #16]	; (80038e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038da:	6013      	str	r3, [r2, #0]
}
 80038dc:	bf00      	nop
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40007000 	.word	0x40007000

080038ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038f0:	4b04      	ldr	r3, [pc, #16]	; (8003904 <HAL_PWREx_GetVoltageRange+0x18>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40007000 	.word	0x40007000

08003908 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003916:	d130      	bne.n	800397a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003918:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003924:	d038      	beq.n	8003998 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003926:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800392e:	4a1e      	ldr	r2, [pc, #120]	; (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003930:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003934:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003936:	4b1d      	ldr	r3, [pc, #116]	; (80039ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2232      	movs	r2, #50	; 0x32
 800393c:	fb02 f303 	mul.w	r3, r2, r3
 8003940:	4a1b      	ldr	r2, [pc, #108]	; (80039b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	0c9b      	lsrs	r3, r3, #18
 8003948:	3301      	adds	r3, #1
 800394a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800394c:	e002      	b.n	8003954 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	3b01      	subs	r3, #1
 8003952:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003954:	4b14      	ldr	r3, [pc, #80]	; (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003960:	d102      	bne.n	8003968 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1f2      	bne.n	800394e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003968:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003974:	d110      	bne.n	8003998 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e00f      	b.n	800399a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800397a:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003986:	d007      	beq.n	8003998 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003988:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003990:	4a05      	ldr	r2, [pc, #20]	; (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003992:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003996:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40007000 	.word	0x40007000
 80039ac:	20000000 	.word	0x20000000
 80039b0:	431bde83 	.word	0x431bde83

080039b4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	4a04      	ldr	r2, [pc, #16]	; (80039d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80039be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039c2:	6053      	str	r3, [r2, #4]
}
 80039c4:	bf00      	nop
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40007000 	.word	0x40007000

080039d4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af02      	add	r7, sp, #8
 80039da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80039dc:	f7fe fa3e 	bl	8001e5c <HAL_GetTick>
 80039e0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e063      	b.n	8003ab4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10b      	bne.n	8003a10 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7fd fe99 	bl	8001738 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003a06:	f241 3188 	movw	r1, #5000	; 0x1388
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f858 	bl	8003ac0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	021a      	lsls	r2, r3, #8
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	2120      	movs	r1, #32
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f850 	bl	8003adc <QSPI_WaitFlagStateUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003a40:	7afb      	ldrb	r3, [r7, #11]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d131      	bne.n	8003aaa <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a50:	f023 0310 	bic.w	r3, r3, #16
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6852      	ldr	r2, [r2, #4]
 8003a58:	0611      	lsls	r1, r2, #24
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	68d2      	ldr	r2, [r2, #12]
 8003a5e:	4311      	orrs	r1, r2
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6812      	ldr	r2, [r2, #0]
 8003a64:	430b      	orrs	r3, r1
 8003a66:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	4b13      	ldr	r3, [pc, #76]	; (8003abc <HAL_QSPI_Init+0xe8>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6912      	ldr	r2, [r2, #16]
 8003a76:	0411      	lsls	r1, r2, #16
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6952      	ldr	r2, [r2, #20]
 8003a7c:	4311      	orrs	r1, r2
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6992      	ldr	r2, [r2, #24]
 8003a82:	4311      	orrs	r1, r2
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	430b      	orrs	r3, r1
 8003a8a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003ab2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	ffe0f8fe 	.word	0xffe0f8fe

08003ac0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003aec:	e01a      	b.n	8003b24 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af4:	d016      	beq.n	8003b24 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af6:	f7fe f9b1 	bl	8001e5c <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d302      	bcc.n	8003b0c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10b      	bne.n	8003b24 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2204      	movs	r2, #4
 8003b10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b18:	f043 0201 	orr.w	r2, r3, #1
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e00e      	b.n	8003b42 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	bf14      	ite	ne
 8003b32:	2301      	movne	r3, #1
 8003b34:	2300      	moveq	r3, #0
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	461a      	mov	r2, r3
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d1d6      	bne.n	8003aee <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e3ca      	b.n	80042f4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b5e:	4b97      	ldr	r3, [pc, #604]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
 8003b66:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b68:	4b94      	ldr	r3, [pc, #592]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0310 	and.w	r3, r3, #16
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 80e4 	beq.w	8003d48 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d007      	beq.n	8003b96 <HAL_RCC_OscConfig+0x4a>
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	2b0c      	cmp	r3, #12
 8003b8a:	f040 808b 	bne.w	8003ca4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	f040 8087 	bne.w	8003ca4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b96:	4b89      	ldr	r3, [pc, #548]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d005      	beq.n	8003bae <HAL_RCC_OscConfig+0x62>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e3a2      	b.n	80042f4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1a      	ldr	r2, [r3, #32]
 8003bb2:	4b82      	ldr	r3, [pc, #520]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d004      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x7c>
 8003bbe:	4b7f      	ldr	r3, [pc, #508]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bc6:	e005      	b.n	8003bd4 <HAL_RCC_OscConfig+0x88>
 8003bc8:	4b7c      	ldr	r3, [pc, #496]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bce:	091b      	lsrs	r3, r3, #4
 8003bd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d223      	bcs.n	8003c20 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 fd55 	bl	800468c <RCC_SetFlashLatencyFromMSIRange>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e383      	b.n	80042f4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bec:	4b73      	ldr	r3, [pc, #460]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a72      	ldr	r2, [pc, #456]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003bf2:	f043 0308 	orr.w	r3, r3, #8
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	4b70      	ldr	r3, [pc, #448]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	496d      	ldr	r1, [pc, #436]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c0a:	4b6c      	ldr	r3, [pc, #432]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	021b      	lsls	r3, r3, #8
 8003c18:	4968      	ldr	r1, [pc, #416]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	604b      	str	r3, [r1, #4]
 8003c1e:	e025      	b.n	8003c6c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c20:	4b66      	ldr	r3, [pc, #408]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a65      	ldr	r2, [pc, #404]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003c26:	f043 0308 	orr.w	r3, r3, #8
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	4b63      	ldr	r3, [pc, #396]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	4960      	ldr	r1, [pc, #384]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c3e:	4b5f      	ldr	r3, [pc, #380]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	021b      	lsls	r3, r3, #8
 8003c4c:	495b      	ldr	r1, [pc, #364]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d109      	bne.n	8003c6c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 fd15 	bl	800468c <RCC_SetFlashLatencyFromMSIRange>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e343      	b.n	80042f4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c6c:	f000 fc4a 	bl	8004504 <HAL_RCC_GetSysClockFreq>
 8003c70:	4602      	mov	r2, r0
 8003c72:	4b52      	ldr	r3, [pc, #328]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	091b      	lsrs	r3, r3, #4
 8003c78:	f003 030f 	and.w	r3, r3, #15
 8003c7c:	4950      	ldr	r1, [pc, #320]	; (8003dc0 <HAL_RCC_OscConfig+0x274>)
 8003c7e:	5ccb      	ldrb	r3, [r1, r3]
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
 8003c88:	4a4e      	ldr	r2, [pc, #312]	; (8003dc4 <HAL_RCC_OscConfig+0x278>)
 8003c8a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c8c:	4b4e      	ldr	r3, [pc, #312]	; (8003dc8 <HAL_RCC_OscConfig+0x27c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fe f893 	bl	8001dbc <HAL_InitTick>
 8003c96:	4603      	mov	r3, r0
 8003c98:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d052      	beq.n	8003d46 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
 8003ca2:	e327      	b.n	80042f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d032      	beq.n	8003d12 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cac:	4b43      	ldr	r3, [pc, #268]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a42      	ldr	r2, [pc, #264]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cb8:	f7fe f8d0 	bl	8001e5c <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cc0:	f7fe f8cc 	bl	8001e5c <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e310      	b.n	80042f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cd2:	4b3a      	ldr	r3, [pc, #232]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0f0      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cde:	4b37      	ldr	r3, [pc, #220]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a36      	ldr	r2, [pc, #216]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003ce4:	f043 0308 	orr.w	r3, r3, #8
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	4b34      	ldr	r3, [pc, #208]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	4931      	ldr	r1, [pc, #196]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cfc:	4b2f      	ldr	r3, [pc, #188]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	492c      	ldr	r1, [pc, #176]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	604b      	str	r3, [r1, #4]
 8003d10:	e01a      	b.n	8003d48 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d12:	4b2a      	ldr	r3, [pc, #168]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a29      	ldr	r2, [pc, #164]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003d18:	f023 0301 	bic.w	r3, r3, #1
 8003d1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d1e:	f7fe f89d 	bl	8001e5c <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d26:	f7fe f899 	bl	8001e5c <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e2dd      	b.n	80042f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d38:	4b20      	ldr	r3, [pc, #128]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1f0      	bne.n	8003d26 <HAL_RCC_OscConfig+0x1da>
 8003d44:	e000      	b.n	8003d48 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d46:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d074      	beq.n	8003e3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d005      	beq.n	8003d66 <HAL_RCC_OscConfig+0x21a>
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	2b0c      	cmp	r3, #12
 8003d5e:	d10e      	bne.n	8003d7e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d10b      	bne.n	8003d7e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d66:	4b15      	ldr	r3, [pc, #84]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d064      	beq.n	8003e3c <HAL_RCC_OscConfig+0x2f0>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d160      	bne.n	8003e3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e2ba      	b.n	80042f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d86:	d106      	bne.n	8003d96 <HAL_RCC_OscConfig+0x24a>
 8003d88:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a0b      	ldr	r2, [pc, #44]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	e026      	b.n	8003de4 <HAL_RCC_OscConfig+0x298>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d9e:	d115      	bne.n	8003dcc <HAL_RCC_OscConfig+0x280>
 8003da0:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a05      	ldr	r2, [pc, #20]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003da6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	4b03      	ldr	r3, [pc, #12]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a02      	ldr	r2, [pc, #8]	; (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	e014      	b.n	8003de4 <HAL_RCC_OscConfig+0x298>
 8003dba:	bf00      	nop
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	0800e498 	.word	0x0800e498
 8003dc4:	20000000 	.word	0x20000000
 8003dc8:	20000004 	.word	0x20000004
 8003dcc:	4ba0      	ldr	r3, [pc, #640]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a9f      	ldr	r2, [pc, #636]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	4b9d      	ldr	r3, [pc, #628]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a9c      	ldr	r2, [pc, #624]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d013      	beq.n	8003e14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dec:	f7fe f836 	bl	8001e5c <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df4:	f7fe f832 	bl	8001e5c <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b64      	cmp	r3, #100	; 0x64
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e276      	b.n	80042f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e06:	4b92      	ldr	r3, [pc, #584]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0f0      	beq.n	8003df4 <HAL_RCC_OscConfig+0x2a8>
 8003e12:	e014      	b.n	8003e3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e14:	f7fe f822 	bl	8001e5c <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e1c:	f7fe f81e 	bl	8001e5c <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b64      	cmp	r3, #100	; 0x64
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e262      	b.n	80042f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e2e:	4b88      	ldr	r3, [pc, #544]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1f0      	bne.n	8003e1c <HAL_RCC_OscConfig+0x2d0>
 8003e3a:	e000      	b.n	8003e3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d060      	beq.n	8003f0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_OscConfig+0x310>
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	2b0c      	cmp	r3, #12
 8003e54:	d119      	bne.n	8003e8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d116      	bne.n	8003e8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e5c:	4b7c      	ldr	r3, [pc, #496]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_RCC_OscConfig+0x328>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e23f      	b.n	80042f4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e74:	4b76      	ldr	r3, [pc, #472]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	061b      	lsls	r3, r3, #24
 8003e82:	4973      	ldr	r1, [pc, #460]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e88:	e040      	b.n	8003f0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d023      	beq.n	8003eda <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e92:	4b6f      	ldr	r3, [pc, #444]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a6e      	ldr	r2, [pc, #440]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9e:	f7fd ffdd 	bl	8001e5c <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ea6:	f7fd ffd9 	bl	8001e5c <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e21d      	b.n	80042f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eb8:	4b65      	ldr	r3, [pc, #404]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0f0      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec4:	4b62      	ldr	r3, [pc, #392]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	061b      	lsls	r3, r3, #24
 8003ed2:	495f      	ldr	r1, [pc, #380]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	604b      	str	r3, [r1, #4]
 8003ed8:	e018      	b.n	8003f0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eda:	4b5d      	ldr	r3, [pc, #372]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a5c      	ldr	r2, [pc, #368]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee6:	f7fd ffb9 	bl	8001e5c <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eee:	f7fd ffb5 	bl	8001e5c <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e1f9      	b.n	80042f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f00:	4b53      	ldr	r3, [pc, #332]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1f0      	bne.n	8003eee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d03c      	beq.n	8003f92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d01c      	beq.n	8003f5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f20:	4b4b      	ldr	r3, [pc, #300]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f26:	4a4a      	ldr	r2, [pc, #296]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f30:	f7fd ff94 	bl	8001e5c <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f38:	f7fd ff90 	bl	8001e5c <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e1d4      	b.n	80042f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f4a:	4b41      	ldr	r3, [pc, #260]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0ef      	beq.n	8003f38 <HAL_RCC_OscConfig+0x3ec>
 8003f58:	e01b      	b.n	8003f92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f5a:	4b3d      	ldr	r3, [pc, #244]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f60:	4a3b      	ldr	r2, [pc, #236]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003f62:	f023 0301 	bic.w	r3, r3, #1
 8003f66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f6a:	f7fd ff77 	bl	8001e5c <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f72:	f7fd ff73 	bl	8001e5c <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e1b7      	b.n	80042f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f84:	4b32      	ldr	r3, [pc, #200]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1ef      	bne.n	8003f72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 80a6 	beq.w	80040ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003fa4:	4b2a      	ldr	r3, [pc, #168]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10d      	bne.n	8003fcc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb0:	4b27      	ldr	r3, [pc, #156]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb4:	4a26      	ldr	r2, [pc, #152]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fba:	6593      	str	r3, [r2, #88]	; 0x58
 8003fbc:	4b24      	ldr	r3, [pc, #144]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc4:	60bb      	str	r3, [r7, #8]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fcc:	4b21      	ldr	r3, [pc, #132]	; (8004054 <HAL_RCC_OscConfig+0x508>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d118      	bne.n	800400a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fd8:	4b1e      	ldr	r3, [pc, #120]	; (8004054 <HAL_RCC_OscConfig+0x508>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a1d      	ldr	r2, [pc, #116]	; (8004054 <HAL_RCC_OscConfig+0x508>)
 8003fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fe4:	f7fd ff3a 	bl	8001e5c <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fec:	f7fd ff36 	bl	8001e5c <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e17a      	b.n	80042f4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ffe:	4b15      	ldr	r3, [pc, #84]	; (8004054 <HAL_RCC_OscConfig+0x508>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0f0      	beq.n	8003fec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d108      	bne.n	8004024 <HAL_RCC_OscConfig+0x4d8>
 8004012:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8004014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004018:	4a0d      	ldr	r2, [pc, #52]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004022:	e029      	b.n	8004078 <HAL_RCC_OscConfig+0x52c>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2b05      	cmp	r3, #5
 800402a:	d115      	bne.n	8004058 <HAL_RCC_OscConfig+0x50c>
 800402c:	4b08      	ldr	r3, [pc, #32]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 800402e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004032:	4a07      	ldr	r2, [pc, #28]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8004034:	f043 0304 	orr.w	r3, r3, #4
 8004038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800403c:	4b04      	ldr	r3, [pc, #16]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 800403e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004042:	4a03      	ldr	r2, [pc, #12]	; (8004050 <HAL_RCC_OscConfig+0x504>)
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800404c:	e014      	b.n	8004078 <HAL_RCC_OscConfig+0x52c>
 800404e:	bf00      	nop
 8004050:	40021000 	.word	0x40021000
 8004054:	40007000 	.word	0x40007000
 8004058:	4b9c      	ldr	r3, [pc, #624]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405e:	4a9b      	ldr	r2, [pc, #620]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 8004060:	f023 0301 	bic.w	r3, r3, #1
 8004064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004068:	4b98      	ldr	r3, [pc, #608]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 800406a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406e:	4a97      	ldr	r2, [pc, #604]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 8004070:	f023 0304 	bic.w	r3, r3, #4
 8004074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d016      	beq.n	80040ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004080:	f7fd feec 	bl	8001e5c <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004086:	e00a      	b.n	800409e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004088:	f7fd fee8 	bl	8001e5c <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	f241 3288 	movw	r2, #5000	; 0x1388
 8004096:	4293      	cmp	r3, r2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e12a      	b.n	80042f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800409e:	4b8b      	ldr	r3, [pc, #556]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 80040a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0ed      	beq.n	8004088 <HAL_RCC_OscConfig+0x53c>
 80040ac:	e015      	b.n	80040da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ae:	f7fd fed5 	bl	8001e5c <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040b4:	e00a      	b.n	80040cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b6:	f7fd fed1 	bl	8001e5c <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e113      	b.n	80042f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040cc:	4b7f      	ldr	r3, [pc, #508]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 80040ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1ed      	bne.n	80040b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040da:	7ffb      	ldrb	r3, [r7, #31]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d105      	bne.n	80040ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e0:	4b7a      	ldr	r3, [pc, #488]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 80040e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e4:	4a79      	ldr	r2, [pc, #484]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 80040e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80fe 	beq.w	80042f2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	f040 80d0 	bne.w	80042a0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004100:	4b72      	ldr	r3, [pc, #456]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f003 0203 	and.w	r2, r3, #3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	429a      	cmp	r2, r3
 8004112:	d130      	bne.n	8004176 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	3b01      	subs	r3, #1
 8004120:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004122:	429a      	cmp	r2, r3
 8004124:	d127      	bne.n	8004176 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004130:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004132:	429a      	cmp	r2, r3
 8004134:	d11f      	bne.n	8004176 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004140:	2a07      	cmp	r2, #7
 8004142:	bf14      	ite	ne
 8004144:	2201      	movne	r2, #1
 8004146:	2200      	moveq	r2, #0
 8004148:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800414a:	4293      	cmp	r3, r2
 800414c:	d113      	bne.n	8004176 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004158:	085b      	lsrs	r3, r3, #1
 800415a:	3b01      	subs	r3, #1
 800415c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800415e:	429a      	cmp	r2, r3
 8004160:	d109      	bne.n	8004176 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	085b      	lsrs	r3, r3, #1
 800416e:	3b01      	subs	r3, #1
 8004170:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004172:	429a      	cmp	r2, r3
 8004174:	d06e      	beq.n	8004254 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	2b0c      	cmp	r3, #12
 800417a:	d069      	beq.n	8004250 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800417c:	4b53      	ldr	r3, [pc, #332]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d105      	bne.n	8004194 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004188:	4b50      	ldr	r3, [pc, #320]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e0ad      	b.n	80042f4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004198:	4b4c      	ldr	r3, [pc, #304]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a4b      	ldr	r2, [pc, #300]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 800419e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041a2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041a4:	f7fd fe5a 	bl	8001e5c <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ac:	f7fd fe56 	bl	8001e5c <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e09a      	b.n	80042f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041be:	4b43      	ldr	r3, [pc, #268]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f0      	bne.n	80041ac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041ca:	4b40      	ldr	r3, [pc, #256]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	4b40      	ldr	r3, [pc, #256]	; (80042d0 <HAL_RCC_OscConfig+0x784>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041da:	3a01      	subs	r2, #1
 80041dc:	0112      	lsls	r2, r2, #4
 80041de:	4311      	orrs	r1, r2
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041e4:	0212      	lsls	r2, r2, #8
 80041e6:	4311      	orrs	r1, r2
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80041ec:	0852      	lsrs	r2, r2, #1
 80041ee:	3a01      	subs	r2, #1
 80041f0:	0552      	lsls	r2, r2, #21
 80041f2:	4311      	orrs	r1, r2
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80041f8:	0852      	lsrs	r2, r2, #1
 80041fa:	3a01      	subs	r2, #1
 80041fc:	0652      	lsls	r2, r2, #25
 80041fe:	4311      	orrs	r1, r2
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004204:	0912      	lsrs	r2, r2, #4
 8004206:	0452      	lsls	r2, r2, #17
 8004208:	430a      	orrs	r2, r1
 800420a:	4930      	ldr	r1, [pc, #192]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 800420c:	4313      	orrs	r3, r2
 800420e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004210:	4b2e      	ldr	r3, [pc, #184]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a2d      	ldr	r2, [pc, #180]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 8004216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800421a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800421c:	4b2b      	ldr	r3, [pc, #172]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4a2a      	ldr	r2, [pc, #168]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 8004222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004226:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004228:	f7fd fe18 	bl	8001e5c <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004230:	f7fd fe14 	bl	8001e5c <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e058      	b.n	80042f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004242:	4b22      	ldr	r3, [pc, #136]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f0      	beq.n	8004230 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800424e:	e050      	b.n	80042f2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e04f      	b.n	80042f4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004254:	4b1d      	ldr	r3, [pc, #116]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d148      	bne.n	80042f2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004260:	4b1a      	ldr	r3, [pc, #104]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a19      	ldr	r2, [pc, #100]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 8004266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800426a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800426c:	4b17      	ldr	r3, [pc, #92]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	4a16      	ldr	r2, [pc, #88]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 8004272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004276:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004278:	f7fd fdf0 	bl	8001e5c <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004280:	f7fd fdec 	bl	8001e5c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e030      	b.n	80042f4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004292:	4b0e      	ldr	r3, [pc, #56]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0x734>
 800429e:	e028      	b.n	80042f2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	2b0c      	cmp	r3, #12
 80042a4:	d023      	beq.n	80042ee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a6:	4b09      	ldr	r3, [pc, #36]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a08      	ldr	r2, [pc, #32]	; (80042cc <HAL_RCC_OscConfig+0x780>)
 80042ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b2:	f7fd fdd3 	bl	8001e5c <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042b8:	e00c      	b.n	80042d4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ba:	f7fd fdcf 	bl	8001e5c <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d905      	bls.n	80042d4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e013      	b.n	80042f4 <HAL_RCC_OscConfig+0x7a8>
 80042cc:	40021000 	.word	0x40021000
 80042d0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042d4:	4b09      	ldr	r3, [pc, #36]	; (80042fc <HAL_RCC_OscConfig+0x7b0>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1ec      	bne.n	80042ba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80042e0:	4b06      	ldr	r3, [pc, #24]	; (80042fc <HAL_RCC_OscConfig+0x7b0>)
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	4905      	ldr	r1, [pc, #20]	; (80042fc <HAL_RCC_OscConfig+0x7b0>)
 80042e6:	4b06      	ldr	r3, [pc, #24]	; (8004300 <HAL_RCC_OscConfig+0x7b4>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	60cb      	str	r3, [r1, #12]
 80042ec:	e001      	b.n	80042f2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3720      	adds	r7, #32
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40021000 	.word	0x40021000
 8004300:	feeefffc 	.word	0xfeeefffc

08004304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e0e7      	b.n	80044e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004318:	4b75      	ldr	r3, [pc, #468]	; (80044f0 <HAL_RCC_ClockConfig+0x1ec>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d910      	bls.n	8004348 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004326:	4b72      	ldr	r3, [pc, #456]	; (80044f0 <HAL_RCC_ClockConfig+0x1ec>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f023 0207 	bic.w	r2, r3, #7
 800432e:	4970      	ldr	r1, [pc, #448]	; (80044f0 <HAL_RCC_ClockConfig+0x1ec>)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	4313      	orrs	r3, r2
 8004334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004336:	4b6e      	ldr	r3, [pc, #440]	; (80044f0 <HAL_RCC_ClockConfig+0x1ec>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	d001      	beq.n	8004348 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e0cf      	b.n	80044e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d010      	beq.n	8004376 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	4b66      	ldr	r3, [pc, #408]	; (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004360:	429a      	cmp	r2, r3
 8004362:	d908      	bls.n	8004376 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004364:	4b63      	ldr	r3, [pc, #396]	; (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	4960      	ldr	r1, [pc, #384]	; (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004372:	4313      	orrs	r3, r2
 8004374:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d04c      	beq.n	800441c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b03      	cmp	r3, #3
 8004388:	d107      	bne.n	800439a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800438a:	4b5a      	ldr	r3, [pc, #360]	; (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d121      	bne.n	80043da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e0a6      	b.n	80044e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d107      	bne.n	80043b2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043a2:	4b54      	ldr	r3, [pc, #336]	; (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d115      	bne.n	80043da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e09a      	b.n	80044e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d107      	bne.n	80043ca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043ba:	4b4e      	ldr	r3, [pc, #312]	; (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e08e      	b.n	80044e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043ca:	4b4a      	ldr	r3, [pc, #296]	; (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e086      	b.n	80044e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043da:	4b46      	ldr	r3, [pc, #280]	; (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f023 0203 	bic.w	r2, r3, #3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	4943      	ldr	r1, [pc, #268]	; (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ec:	f7fd fd36 	bl	8001e5c <HAL_GetTick>
 80043f0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f2:	e00a      	b.n	800440a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f4:	f7fd fd32 	bl	8001e5c <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e06e      	b.n	80044e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800440a:	4b3a      	ldr	r3, [pc, #232]	; (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 020c 	and.w	r2, r3, #12
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	429a      	cmp	r2, r3
 800441a:	d1eb      	bne.n	80043f4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d010      	beq.n	800444a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	4b31      	ldr	r3, [pc, #196]	; (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004434:	429a      	cmp	r2, r3
 8004436:	d208      	bcs.n	800444a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004438:	4b2e      	ldr	r3, [pc, #184]	; (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	492b      	ldr	r1, [pc, #172]	; (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004446:	4313      	orrs	r3, r2
 8004448:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800444a:	4b29      	ldr	r3, [pc, #164]	; (80044f0 <HAL_RCC_ClockConfig+0x1ec>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d210      	bcs.n	800447a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004458:	4b25      	ldr	r3, [pc, #148]	; (80044f0 <HAL_RCC_ClockConfig+0x1ec>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f023 0207 	bic.w	r2, r3, #7
 8004460:	4923      	ldr	r1, [pc, #140]	; (80044f0 <HAL_RCC_ClockConfig+0x1ec>)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	4313      	orrs	r3, r2
 8004466:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004468:	4b21      	ldr	r3, [pc, #132]	; (80044f0 <HAL_RCC_ClockConfig+0x1ec>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d001      	beq.n	800447a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e036      	b.n	80044e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	2b00      	cmp	r3, #0
 8004484:	d008      	beq.n	8004498 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004486:	4b1b      	ldr	r3, [pc, #108]	; (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	4918      	ldr	r1, [pc, #96]	; (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004494:	4313      	orrs	r3, r2
 8004496:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d009      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044a4:	4b13      	ldr	r3, [pc, #76]	; (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	4910      	ldr	r1, [pc, #64]	; (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044b8:	f000 f824 	bl	8004504 <HAL_RCC_GetSysClockFreq>
 80044bc:	4602      	mov	r2, r0
 80044be:	4b0d      	ldr	r3, [pc, #52]	; (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	091b      	lsrs	r3, r3, #4
 80044c4:	f003 030f 	and.w	r3, r3, #15
 80044c8:	490b      	ldr	r1, [pc, #44]	; (80044f8 <HAL_RCC_ClockConfig+0x1f4>)
 80044ca:	5ccb      	ldrb	r3, [r1, r3]
 80044cc:	f003 031f 	and.w	r3, r3, #31
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
 80044d4:	4a09      	ldr	r2, [pc, #36]	; (80044fc <HAL_RCC_ClockConfig+0x1f8>)
 80044d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80044d8:	4b09      	ldr	r3, [pc, #36]	; (8004500 <HAL_RCC_ClockConfig+0x1fc>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fd fc6d 	bl	8001dbc <HAL_InitTick>
 80044e2:	4603      	mov	r3, r0
 80044e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80044e6:	7afb      	ldrb	r3, [r7, #11]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40022000 	.word	0x40022000
 80044f4:	40021000 	.word	0x40021000
 80044f8:	0800e498 	.word	0x0800e498
 80044fc:	20000000 	.word	0x20000000
 8004500:	20000004 	.word	0x20000004

08004504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004504:	b480      	push	{r7}
 8004506:	b089      	sub	sp, #36	; 0x24
 8004508:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800450a:	2300      	movs	r3, #0
 800450c:	61fb      	str	r3, [r7, #28]
 800450e:	2300      	movs	r3, #0
 8004510:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004512:	4b3e      	ldr	r3, [pc, #248]	; (800460c <HAL_RCC_GetSysClockFreq+0x108>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800451c:	4b3b      	ldr	r3, [pc, #236]	; (800460c <HAL_RCC_GetSysClockFreq+0x108>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f003 0303 	and.w	r3, r3, #3
 8004524:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <HAL_RCC_GetSysClockFreq+0x34>
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	2b0c      	cmp	r3, #12
 8004530:	d121      	bne.n	8004576 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d11e      	bne.n	8004576 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004538:	4b34      	ldr	r3, [pc, #208]	; (800460c <HAL_RCC_GetSysClockFreq+0x108>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0308 	and.w	r3, r3, #8
 8004540:	2b00      	cmp	r3, #0
 8004542:	d107      	bne.n	8004554 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004544:	4b31      	ldr	r3, [pc, #196]	; (800460c <HAL_RCC_GetSysClockFreq+0x108>)
 8004546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800454a:	0a1b      	lsrs	r3, r3, #8
 800454c:	f003 030f 	and.w	r3, r3, #15
 8004550:	61fb      	str	r3, [r7, #28]
 8004552:	e005      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004554:	4b2d      	ldr	r3, [pc, #180]	; (800460c <HAL_RCC_GetSysClockFreq+0x108>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	091b      	lsrs	r3, r3, #4
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004560:	4a2b      	ldr	r2, [pc, #172]	; (8004610 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004568:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10d      	bne.n	800458c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004574:	e00a      	b.n	800458c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	2b04      	cmp	r3, #4
 800457a:	d102      	bne.n	8004582 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800457c:	4b25      	ldr	r3, [pc, #148]	; (8004614 <HAL_RCC_GetSysClockFreq+0x110>)
 800457e:	61bb      	str	r3, [r7, #24]
 8004580:	e004      	b.n	800458c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	2b08      	cmp	r3, #8
 8004586:	d101      	bne.n	800458c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004588:	4b23      	ldr	r3, [pc, #140]	; (8004618 <HAL_RCC_GetSysClockFreq+0x114>)
 800458a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	2b0c      	cmp	r3, #12
 8004590:	d134      	bne.n	80045fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004592:	4b1e      	ldr	r3, [pc, #120]	; (800460c <HAL_RCC_GetSysClockFreq+0x108>)
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d003      	beq.n	80045aa <HAL_RCC_GetSysClockFreq+0xa6>
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d003      	beq.n	80045b0 <HAL_RCC_GetSysClockFreq+0xac>
 80045a8:	e005      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80045aa:	4b1a      	ldr	r3, [pc, #104]	; (8004614 <HAL_RCC_GetSysClockFreq+0x110>)
 80045ac:	617b      	str	r3, [r7, #20]
      break;
 80045ae:	e005      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80045b0:	4b19      	ldr	r3, [pc, #100]	; (8004618 <HAL_RCC_GetSysClockFreq+0x114>)
 80045b2:	617b      	str	r3, [r7, #20]
      break;
 80045b4:	e002      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	617b      	str	r3, [r7, #20]
      break;
 80045ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045bc:	4b13      	ldr	r3, [pc, #76]	; (800460c <HAL_RCC_GetSysClockFreq+0x108>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	091b      	lsrs	r3, r3, #4
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	3301      	adds	r3, #1
 80045c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045ca:	4b10      	ldr	r3, [pc, #64]	; (800460c <HAL_RCC_GetSysClockFreq+0x108>)
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	0a1b      	lsrs	r3, r3, #8
 80045d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	fb03 f202 	mul.w	r2, r3, r2
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045e2:	4b0a      	ldr	r3, [pc, #40]	; (800460c <HAL_RCC_GetSysClockFreq+0x108>)
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	0e5b      	lsrs	r3, r3, #25
 80045e8:	f003 0303 	and.w	r3, r3, #3
 80045ec:	3301      	adds	r3, #1
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80045fc:	69bb      	ldr	r3, [r7, #24]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3724      	adds	r7, #36	; 0x24
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40021000 	.word	0x40021000
 8004610:	0800e4b0 	.word	0x0800e4b0
 8004614:	00f42400 	.word	0x00f42400
 8004618:	007a1200 	.word	0x007a1200

0800461c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004620:	4b03      	ldr	r3, [pc, #12]	; (8004630 <HAL_RCC_GetHCLKFreq+0x14>)
 8004622:	681b      	ldr	r3, [r3, #0]
}
 8004624:	4618      	mov	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	20000000 	.word	0x20000000

08004634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004638:	f7ff fff0 	bl	800461c <HAL_RCC_GetHCLKFreq>
 800463c:	4602      	mov	r2, r0
 800463e:	4b06      	ldr	r3, [pc, #24]	; (8004658 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	0a1b      	lsrs	r3, r3, #8
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	4904      	ldr	r1, [pc, #16]	; (800465c <HAL_RCC_GetPCLK1Freq+0x28>)
 800464a:	5ccb      	ldrb	r3, [r1, r3]
 800464c:	f003 031f 	and.w	r3, r3, #31
 8004650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004654:	4618      	mov	r0, r3
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40021000 	.word	0x40021000
 800465c:	0800e4a8 	.word	0x0800e4a8

08004660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004664:	f7ff ffda 	bl	800461c <HAL_RCC_GetHCLKFreq>
 8004668:	4602      	mov	r2, r0
 800466a:	4b06      	ldr	r3, [pc, #24]	; (8004684 <HAL_RCC_GetPCLK2Freq+0x24>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	0adb      	lsrs	r3, r3, #11
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	4904      	ldr	r1, [pc, #16]	; (8004688 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004676:	5ccb      	ldrb	r3, [r1, r3]
 8004678:	f003 031f 	and.w	r3, r3, #31
 800467c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004680:	4618      	mov	r0, r3
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40021000 	.word	0x40021000
 8004688:	0800e4a8 	.word	0x0800e4a8

0800468c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004694:	2300      	movs	r3, #0
 8004696:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004698:	4b2a      	ldr	r3, [pc, #168]	; (8004744 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800469a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80046a4:	f7ff f922 	bl	80038ec <HAL_PWREx_GetVoltageRange>
 80046a8:	6178      	str	r0, [r7, #20]
 80046aa:	e014      	b.n	80046d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80046ac:	4b25      	ldr	r3, [pc, #148]	; (8004744 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b0:	4a24      	ldr	r2, [pc, #144]	; (8004744 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b6:	6593      	str	r3, [r2, #88]	; 0x58
 80046b8:	4b22      	ldr	r3, [pc, #136]	; (8004744 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80046c4:	f7ff f912 	bl	80038ec <HAL_PWREx_GetVoltageRange>
 80046c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80046ca:	4b1e      	ldr	r3, [pc, #120]	; (8004744 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ce:	4a1d      	ldr	r2, [pc, #116]	; (8004744 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046dc:	d10b      	bne.n	80046f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b80      	cmp	r3, #128	; 0x80
 80046e2:	d919      	bls.n	8004718 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2ba0      	cmp	r3, #160	; 0xa0
 80046e8:	d902      	bls.n	80046f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046ea:	2302      	movs	r3, #2
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	e013      	b.n	8004718 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046f0:	2301      	movs	r3, #1
 80046f2:	613b      	str	r3, [r7, #16]
 80046f4:	e010      	b.n	8004718 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b80      	cmp	r3, #128	; 0x80
 80046fa:	d902      	bls.n	8004702 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80046fc:	2303      	movs	r3, #3
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	e00a      	b.n	8004718 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b80      	cmp	r3, #128	; 0x80
 8004706:	d102      	bne.n	800470e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004708:	2302      	movs	r3, #2
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	e004      	b.n	8004718 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b70      	cmp	r3, #112	; 0x70
 8004712:	d101      	bne.n	8004718 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004714:	2301      	movs	r3, #1
 8004716:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004718:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f023 0207 	bic.w	r2, r3, #7
 8004720:	4909      	ldr	r1, [pc, #36]	; (8004748 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	4313      	orrs	r3, r2
 8004726:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004728:	4b07      	ldr	r3, [pc, #28]	; (8004748 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	429a      	cmp	r2, r3
 8004734:	d001      	beq.n	800473a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	40021000 	.word	0x40021000
 8004748:	40022000 	.word	0x40022000

0800474c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004754:	2300      	movs	r3, #0
 8004756:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004758:	2300      	movs	r3, #0
 800475a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004764:	2b00      	cmp	r3, #0
 8004766:	d041      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800476c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004770:	d02a      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004772:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004776:	d824      	bhi.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004778:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800477c:	d008      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800477e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004782:	d81e      	bhi.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00a      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800478c:	d010      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800478e:	e018      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004790:	4b86      	ldr	r3, [pc, #536]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	4a85      	ldr	r2, [pc, #532]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800479c:	e015      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	3304      	adds	r3, #4
 80047a2:	2100      	movs	r1, #0
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 facb 	bl	8004d40 <RCCEx_PLLSAI1_Config>
 80047aa:	4603      	mov	r3, r0
 80047ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047ae:	e00c      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3320      	adds	r3, #32
 80047b4:	2100      	movs	r1, #0
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fbb6 	bl	8004f28 <RCCEx_PLLSAI2_Config>
 80047bc:	4603      	mov	r3, r0
 80047be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047c0:	e003      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	74fb      	strb	r3, [r7, #19]
      break;
 80047c6:	e000      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80047c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047ca:	7cfb      	ldrb	r3, [r7, #19]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10b      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047d0:	4b76      	ldr	r3, [pc, #472]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047de:	4973      	ldr	r1, [pc, #460]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80047e6:	e001      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e8:	7cfb      	ldrb	r3, [r7, #19]
 80047ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d041      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004800:	d02a      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004802:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004806:	d824      	bhi.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004808:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800480c:	d008      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800480e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004812:	d81e      	bhi.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800481c:	d010      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800481e:	e018      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004820:	4b62      	ldr	r3, [pc, #392]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	4a61      	ldr	r2, [pc, #388]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800482a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800482c:	e015      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3304      	adds	r3, #4
 8004832:	2100      	movs	r1, #0
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fa83 	bl	8004d40 <RCCEx_PLLSAI1_Config>
 800483a:	4603      	mov	r3, r0
 800483c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800483e:	e00c      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3320      	adds	r3, #32
 8004844:	2100      	movs	r1, #0
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fb6e 	bl	8004f28 <RCCEx_PLLSAI2_Config>
 800484c:	4603      	mov	r3, r0
 800484e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004850:	e003      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	74fb      	strb	r3, [r7, #19]
      break;
 8004856:	e000      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004858:	bf00      	nop
    }

    if(ret == HAL_OK)
 800485a:	7cfb      	ldrb	r3, [r7, #19]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10b      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004860:	4b52      	ldr	r3, [pc, #328]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004866:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800486e:	494f      	ldr	r1, [pc, #316]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004876:	e001      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004878:	7cfb      	ldrb	r3, [r7, #19]
 800487a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 80a0 	beq.w	80049ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800488a:	2300      	movs	r3, #0
 800488c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800488e:	4b47      	ldr	r3, [pc, #284]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800489e:	2300      	movs	r3, #0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00d      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048a4:	4b41      	ldr	r3, [pc, #260]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a8:	4a40      	ldr	r2, [pc, #256]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ae:	6593      	str	r3, [r2, #88]	; 0x58
 80048b0:	4b3e      	ldr	r3, [pc, #248]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b8:	60bb      	str	r3, [r7, #8]
 80048ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048bc:	2301      	movs	r3, #1
 80048be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048c0:	4b3b      	ldr	r3, [pc, #236]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a3a      	ldr	r2, [pc, #232]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048cc:	f7fd fac6 	bl	8001e5c <HAL_GetTick>
 80048d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048d2:	e009      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d4:	f7fd fac2 	bl	8001e5c <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d902      	bls.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	74fb      	strb	r3, [r7, #19]
        break;
 80048e6:	e005      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048e8:	4b31      	ldr	r3, [pc, #196]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0ef      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80048f4:	7cfb      	ldrb	r3, [r7, #19]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d15c      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048fa:	4b2c      	ldr	r3, [pc, #176]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004904:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01f      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	429a      	cmp	r2, r3
 8004916:	d019      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004918:	4b24      	ldr	r3, [pc, #144]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004922:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004924:	4b21      	ldr	r3, [pc, #132]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492a:	4a20      	ldr	r2, [pc, #128]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800492c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004934:	4b1d      	ldr	r3, [pc, #116]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493a:	4a1c      	ldr	r2, [pc, #112]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800493c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004944:	4a19      	ldr	r2, [pc, #100]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d016      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004956:	f7fd fa81 	bl	8001e5c <HAL_GetTick>
 800495a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800495c:	e00b      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800495e:	f7fd fa7d 	bl	8001e5c <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	f241 3288 	movw	r2, #5000	; 0x1388
 800496c:	4293      	cmp	r3, r2
 800496e:	d902      	bls.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	74fb      	strb	r3, [r7, #19]
            break;
 8004974:	e006      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004976:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0ec      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004984:	7cfb      	ldrb	r3, [r7, #19]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10c      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800498a:	4b08      	ldr	r3, [pc, #32]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004990:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800499a:	4904      	ldr	r1, [pc, #16]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80049a2:	e009      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049a4:	7cfb      	ldrb	r3, [r7, #19]
 80049a6:	74bb      	strb	r3, [r7, #18]
 80049a8:	e006      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80049aa:	bf00      	nop
 80049ac:	40021000 	.word	0x40021000
 80049b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b4:	7cfb      	ldrb	r3, [r7, #19]
 80049b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049b8:	7c7b      	ldrb	r3, [r7, #17]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d105      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049be:	4b9e      	ldr	r3, [pc, #632]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c2:	4a9d      	ldr	r2, [pc, #628]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049d6:	4b98      	ldr	r3, [pc, #608]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049dc:	f023 0203 	bic.w	r2, r3, #3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e4:	4994      	ldr	r1, [pc, #592]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049f8:	4b8f      	ldr	r3, [pc, #572]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fe:	f023 020c 	bic.w	r2, r3, #12
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a06:	498c      	ldr	r1, [pc, #560]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a1a:	4b87      	ldr	r3, [pc, #540]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	4983      	ldr	r1, [pc, #524]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a3c:	4b7e      	ldr	r3, [pc, #504]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4a:	497b      	ldr	r1, [pc, #492]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a5e:	4b76      	ldr	r3, [pc, #472]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a6c:	4972      	ldr	r1, [pc, #456]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0320 	and.w	r3, r3, #32
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a80:	4b6d      	ldr	r3, [pc, #436]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8e:	496a      	ldr	r1, [pc, #424]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004aa2:	4b65      	ldr	r3, [pc, #404]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab0:	4961      	ldr	r1, [pc, #388]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00a      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ac4:	4b5c      	ldr	r3, [pc, #368]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad2:	4959      	ldr	r1, [pc, #356]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ae6:	4b54      	ldr	r3, [pc, #336]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af4:	4950      	ldr	r1, [pc, #320]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00a      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b08:	4b4b      	ldr	r3, [pc, #300]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b16:	4948      	ldr	r1, [pc, #288]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b2a:	4b43      	ldr	r3, [pc, #268]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b38:	493f      	ldr	r1, [pc, #252]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d028      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b4c:	4b3a      	ldr	r3, [pc, #232]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b5a:	4937      	ldr	r1, [pc, #220]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b6a:	d106      	bne.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b6c:	4b32      	ldr	r3, [pc, #200]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	4a31      	ldr	r2, [pc, #196]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b76:	60d3      	str	r3, [r2, #12]
 8004b78:	e011      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b82:	d10c      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3304      	adds	r3, #4
 8004b88:	2101      	movs	r1, #1
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 f8d8 	bl	8004d40 <RCCEx_PLLSAI1_Config>
 8004b90:	4603      	mov	r3, r0
 8004b92:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b94:	7cfb      	ldrb	r3, [r7, #19]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004b9a:	7cfb      	ldrb	r3, [r7, #19]
 8004b9c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d028      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004baa:	4b23      	ldr	r3, [pc, #140]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb8:	491f      	ldr	r1, [pc, #124]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bc8:	d106      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bca:	4b1b      	ldr	r3, [pc, #108]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	4a1a      	ldr	r2, [pc, #104]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bd4:	60d3      	str	r3, [r2, #12]
 8004bd6:	e011      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bdc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004be0:	d10c      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	3304      	adds	r3, #4
 8004be6:	2101      	movs	r1, #1
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 f8a9 	bl	8004d40 <RCCEx_PLLSAI1_Config>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bf2:	7cfb      	ldrb	r3, [r7, #19]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004bf8:	7cfb      	ldrb	r3, [r7, #19]
 8004bfa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d02b      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c08:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c16:	4908      	ldr	r1, [pc, #32]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c26:	d109      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c28:	4b03      	ldr	r3, [pc, #12]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	4a02      	ldr	r2, [pc, #8]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c32:	60d3      	str	r3, [r2, #12]
 8004c34:	e014      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004c36:	bf00      	nop
 8004c38:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c44:	d10c      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 f877 	bl	8004d40 <RCCEx_PLLSAI1_Config>
 8004c52:	4603      	mov	r3, r0
 8004c54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c56:	7cfb      	ldrb	r3, [r7, #19]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004c5c:	7cfb      	ldrb	r3, [r7, #19]
 8004c5e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d02f      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c6c:	4b2b      	ldr	r3, [pc, #172]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c7a:	4928      	ldr	r1, [pc, #160]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c8a:	d10d      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3304      	adds	r3, #4
 8004c90:	2102      	movs	r1, #2
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 f854 	bl	8004d40 <RCCEx_PLLSAI1_Config>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c9c:	7cfb      	ldrb	r3, [r7, #19]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d014      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ca2:	7cfb      	ldrb	r3, [r7, #19]
 8004ca4:	74bb      	strb	r3, [r7, #18]
 8004ca6:	e011      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cb0:	d10c      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3320      	adds	r3, #32
 8004cb6:	2102      	movs	r1, #2
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 f935 	bl	8004f28 <RCCEx_PLLSAI2_Config>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cc2:	7cfb      	ldrb	r3, [r7, #19]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004cc8:	7cfb      	ldrb	r3, [r7, #19]
 8004cca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00a      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cd8:	4b10      	ldr	r3, [pc, #64]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cde:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ce6:	490d      	ldr	r1, [pc, #52]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00b      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cfa:	4b08      	ldr	r3, [pc, #32]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d0a:	4904      	ldr	r1, [pc, #16]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d12:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40021000 	.word	0x40021000

08004d20 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004d24:	4b05      	ldr	r3, [pc, #20]	; (8004d3c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a04      	ldr	r2, [pc, #16]	; (8004d3c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004d2a:	f043 0304 	orr.w	r3, r3, #4
 8004d2e:	6013      	str	r3, [r2, #0]
}
 8004d30:	bf00      	nop
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40021000 	.word	0x40021000

08004d40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d4e:	4b75      	ldr	r3, [pc, #468]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d018      	beq.n	8004d8c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d5a:	4b72      	ldr	r3, [pc, #456]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f003 0203 	and.w	r2, r3, #3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d10d      	bne.n	8004d86 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
       ||
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d009      	beq.n	8004d86 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d72:	4b6c      	ldr	r3, [pc, #432]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	091b      	lsrs	r3, r3, #4
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
       ||
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d047      	beq.n	8004e16 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	73fb      	strb	r3, [r7, #15]
 8004d8a:	e044      	b.n	8004e16 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b03      	cmp	r3, #3
 8004d92:	d018      	beq.n	8004dc6 <RCCEx_PLLSAI1_Config+0x86>
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d825      	bhi.n	8004de4 <RCCEx_PLLSAI1_Config+0xa4>
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d002      	beq.n	8004da2 <RCCEx_PLLSAI1_Config+0x62>
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d009      	beq.n	8004db4 <RCCEx_PLLSAI1_Config+0x74>
 8004da0:	e020      	b.n	8004de4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004da2:	4b60      	ldr	r3, [pc, #384]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d11d      	bne.n	8004dea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004db2:	e01a      	b.n	8004dea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004db4:	4b5b      	ldr	r3, [pc, #364]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d116      	bne.n	8004dee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dc4:	e013      	b.n	8004dee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004dc6:	4b57      	ldr	r3, [pc, #348]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10f      	bne.n	8004df2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004dd2:	4b54      	ldr	r3, [pc, #336]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d109      	bne.n	8004df2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004de2:	e006      	b.n	8004df2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	73fb      	strb	r3, [r7, #15]
      break;
 8004de8:	e004      	b.n	8004df4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dea:	bf00      	nop
 8004dec:	e002      	b.n	8004df4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dee:	bf00      	nop
 8004df0:	e000      	b.n	8004df4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004df2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10d      	bne.n	8004e16 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004dfa:	4b4a      	ldr	r3, [pc, #296]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6819      	ldr	r1, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	011b      	lsls	r3, r3, #4
 8004e0e:	430b      	orrs	r3, r1
 8004e10:	4944      	ldr	r1, [pc, #272]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d17d      	bne.n	8004f18 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e1c:	4b41      	ldr	r3, [pc, #260]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a40      	ldr	r2, [pc, #256]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e28:	f7fd f818 	bl	8001e5c <HAL_GetTick>
 8004e2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e2e:	e009      	b.n	8004e44 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e30:	f7fd f814 	bl	8001e5c <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d902      	bls.n	8004e44 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	73fb      	strb	r3, [r7, #15]
        break;
 8004e42:	e005      	b.n	8004e50 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e44:	4b37      	ldr	r3, [pc, #220]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1ef      	bne.n	8004e30 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d160      	bne.n	8004f18 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d111      	bne.n	8004e80 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e5c:	4b31      	ldr	r3, [pc, #196]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6892      	ldr	r2, [r2, #8]
 8004e6c:	0211      	lsls	r1, r2, #8
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	68d2      	ldr	r2, [r2, #12]
 8004e72:	0912      	lsrs	r2, r2, #4
 8004e74:	0452      	lsls	r2, r2, #17
 8004e76:	430a      	orrs	r2, r1
 8004e78:	492a      	ldr	r1, [pc, #168]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	610b      	str	r3, [r1, #16]
 8004e7e:	e027      	b.n	8004ed0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d112      	bne.n	8004eac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e86:	4b27      	ldr	r3, [pc, #156]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004e8e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	6892      	ldr	r2, [r2, #8]
 8004e96:	0211      	lsls	r1, r2, #8
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6912      	ldr	r2, [r2, #16]
 8004e9c:	0852      	lsrs	r2, r2, #1
 8004e9e:	3a01      	subs	r2, #1
 8004ea0:	0552      	lsls	r2, r2, #21
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	491f      	ldr	r1, [pc, #124]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	610b      	str	r3, [r1, #16]
 8004eaa:	e011      	b.n	8004ed0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004eac:	4b1d      	ldr	r3, [pc, #116]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004eb4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6892      	ldr	r2, [r2, #8]
 8004ebc:	0211      	lsls	r1, r2, #8
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6952      	ldr	r2, [r2, #20]
 8004ec2:	0852      	lsrs	r2, r2, #1
 8004ec4:	3a01      	subs	r2, #1
 8004ec6:	0652      	lsls	r2, r2, #25
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	4916      	ldr	r1, [pc, #88]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ed0:	4b14      	ldr	r3, [pc, #80]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a13      	ldr	r2, [pc, #76]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ed6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004eda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004edc:	f7fc ffbe 	bl	8001e5c <HAL_GetTick>
 8004ee0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ee2:	e009      	b.n	8004ef8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ee4:	f7fc ffba 	bl	8001e5c <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d902      	bls.n	8004ef8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	73fb      	strb	r3, [r7, #15]
          break;
 8004ef6:	e005      	b.n	8004f04 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0ef      	beq.n	8004ee4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f0a:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f0c:	691a      	ldr	r2, [r3, #16]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	4904      	ldr	r1, [pc, #16]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40021000 	.word	0x40021000

08004f28 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f36:	4b6a      	ldr	r3, [pc, #424]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d018      	beq.n	8004f74 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f42:	4b67      	ldr	r3, [pc, #412]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f003 0203 	and.w	r2, r3, #3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d10d      	bne.n	8004f6e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
       ||
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d009      	beq.n	8004f6e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004f5a:	4b61      	ldr	r3, [pc, #388]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	091b      	lsrs	r3, r3, #4
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
       ||
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d047      	beq.n	8004ffe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	73fb      	strb	r3, [r7, #15]
 8004f72:	e044      	b.n	8004ffe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b03      	cmp	r3, #3
 8004f7a:	d018      	beq.n	8004fae <RCCEx_PLLSAI2_Config+0x86>
 8004f7c:	2b03      	cmp	r3, #3
 8004f7e:	d825      	bhi.n	8004fcc <RCCEx_PLLSAI2_Config+0xa4>
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d002      	beq.n	8004f8a <RCCEx_PLLSAI2_Config+0x62>
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d009      	beq.n	8004f9c <RCCEx_PLLSAI2_Config+0x74>
 8004f88:	e020      	b.n	8004fcc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f8a:	4b55      	ldr	r3, [pc, #340]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d11d      	bne.n	8004fd2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f9a:	e01a      	b.n	8004fd2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f9c:	4b50      	ldr	r3, [pc, #320]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d116      	bne.n	8004fd6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fac:	e013      	b.n	8004fd6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fae:	4b4c      	ldr	r3, [pc, #304]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10f      	bne.n	8004fda <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fba:	4b49      	ldr	r3, [pc, #292]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fca:	e006      	b.n	8004fda <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd0:	e004      	b.n	8004fdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004fd2:	bf00      	nop
 8004fd4:	e002      	b.n	8004fdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004fd6:	bf00      	nop
 8004fd8:	e000      	b.n	8004fdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004fda:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10d      	bne.n	8004ffe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fe2:	4b3f      	ldr	r3, [pc, #252]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6819      	ldr	r1, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	4939      	ldr	r1, [pc, #228]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d167      	bne.n	80050d4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005004:	4b36      	ldr	r3, [pc, #216]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a35      	ldr	r2, [pc, #212]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800500a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800500e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005010:	f7fc ff24 	bl	8001e5c <HAL_GetTick>
 8005014:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005016:	e009      	b.n	800502c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005018:	f7fc ff20 	bl	8001e5c <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d902      	bls.n	800502c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	73fb      	strb	r3, [r7, #15]
        break;
 800502a:	e005      	b.n	8005038 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800502c:	4b2c      	ldr	r3, [pc, #176]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1ef      	bne.n	8005018 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d14a      	bne.n	80050d4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d111      	bne.n	8005068 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005044:	4b26      	ldr	r3, [pc, #152]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800504c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6892      	ldr	r2, [r2, #8]
 8005054:	0211      	lsls	r1, r2, #8
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	68d2      	ldr	r2, [r2, #12]
 800505a:	0912      	lsrs	r2, r2, #4
 800505c:	0452      	lsls	r2, r2, #17
 800505e:	430a      	orrs	r2, r1
 8005060:	491f      	ldr	r1, [pc, #124]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005062:	4313      	orrs	r3, r2
 8005064:	614b      	str	r3, [r1, #20]
 8005066:	e011      	b.n	800508c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005068:	4b1d      	ldr	r3, [pc, #116]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005070:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6892      	ldr	r2, [r2, #8]
 8005078:	0211      	lsls	r1, r2, #8
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6912      	ldr	r2, [r2, #16]
 800507e:	0852      	lsrs	r2, r2, #1
 8005080:	3a01      	subs	r2, #1
 8005082:	0652      	lsls	r2, r2, #25
 8005084:	430a      	orrs	r2, r1
 8005086:	4916      	ldr	r1, [pc, #88]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005088:	4313      	orrs	r3, r2
 800508a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800508c:	4b14      	ldr	r3, [pc, #80]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a13      	ldr	r2, [pc, #76]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005096:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005098:	f7fc fee0 	bl	8001e5c <HAL_GetTick>
 800509c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800509e:	e009      	b.n	80050b4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050a0:	f7fc fedc 	bl	8001e5c <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d902      	bls.n	80050b4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	73fb      	strb	r3, [r7, #15]
          break;
 80050b2:	e005      	b.n	80050c0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050b4:	4b0a      	ldr	r3, [pc, #40]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0ef      	beq.n	80050a0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d106      	bne.n	80050d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80050c6:	4b06      	ldr	r3, [pc, #24]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050c8:	695a      	ldr	r2, [r3, #20]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	4904      	ldr	r1, [pc, #16]	; (80050e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	40021000 	.word	0x40021000

080050e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e095      	b.n	8005222 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d108      	bne.n	8005110 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005106:	d009      	beq.n	800511c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	61da      	str	r2, [r3, #28]
 800510e:	e005      	b.n	800511c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fc fb42 	bl	80017c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005152:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800515c:	d902      	bls.n	8005164 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	e002      	b.n	800516a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005168:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005172:	d007      	beq.n	8005184 <HAL_SPI_Init+0xa0>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800517c:	d002      	beq.n	8005184 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051b2:	431a      	orrs	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c6:	ea42 0103 	orr.w	r1, r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	0c1b      	lsrs	r3, r3, #16
 80051e0:	f003 0204 	and.w	r2, r3, #4
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	f003 0310 	and.w	r3, r3, #16
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	431a      	orrs	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005200:	ea42 0103 	orr.w	r1, r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b082      	sub	sp, #8
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e01a      	b.n	8005272 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005252:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7fc faff 	bl	8001858 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b088      	sub	sp, #32
 800527e:	af02      	add	r7, sp, #8
 8005280:	60f8      	str	r0, [r7, #12]
 8005282:	60b9      	str	r1, [r7, #8]
 8005284:	603b      	str	r3, [r7, #0]
 8005286:	4613      	mov	r3, r2
 8005288:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b01      	cmp	r3, #1
 8005298:	d002      	beq.n	80052a0 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800529a:	2302      	movs	r3, #2
 800529c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800529e:	e11a      	b.n	80054d6 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052a8:	d112      	bne.n	80052d0 <HAL_SPI_Receive+0x56>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10e      	bne.n	80052d0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2204      	movs	r2, #4
 80052b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80052ba:	88fa      	ldrh	r2, [r7, #6]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	4613      	mov	r3, r2
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	68b9      	ldr	r1, [r7, #8]
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 f90e 	bl	80054e8 <HAL_SPI_TransmitReceive>
 80052cc:	4603      	mov	r3, r0
 80052ce:	e107      	b.n	80054e0 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d101      	bne.n	80052de <HAL_SPI_Receive+0x64>
 80052da:	2302      	movs	r3, #2
 80052dc:	e100      	b.n	80054e0 <HAL_SPI_Receive+0x266>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052e6:	f7fc fdb9 	bl	8001e5c <HAL_GetTick>
 80052ea:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d002      	beq.n	80052f8 <HAL_SPI_Receive+0x7e>
 80052f2:	88fb      	ldrh	r3, [r7, #6]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d102      	bne.n	80052fe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052fc:	e0eb      	b.n	80054d6 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2204      	movs	r2, #4
 8005302:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	88fa      	ldrh	r2, [r7, #6]
 8005316:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	88fa      	ldrh	r2, [r7, #6]
 800531e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005348:	d908      	bls.n	800535c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005358:	605a      	str	r2, [r3, #4]
 800535a:	e007      	b.n	800536c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800536a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005374:	d10f      	bne.n	8005396 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005384:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005394:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a0:	2b40      	cmp	r3, #64	; 0x40
 80053a2:	d007      	beq.n	80053b4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053b2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053bc:	d86f      	bhi.n	800549e <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80053be:	e034      	b.n	800542a <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d117      	bne.n	80053fe <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f103 020c 	add.w	r2, r3, #12
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	7812      	ldrb	r2, [r2, #0]
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	3b01      	subs	r3, #1
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80053fc:	e015      	b.n	800542a <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053fe:	f7fc fd2d 	bl	8001e5c <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d803      	bhi.n	8005416 <HAL_SPI_Receive+0x19c>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005414:	d102      	bne.n	800541c <HAL_SPI_Receive+0x1a2>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d106      	bne.n	800542a <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005428:	e055      	b.n	80054d6 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005430:	b29b      	uxth	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1c4      	bne.n	80053c0 <HAL_SPI_Receive+0x146>
 8005436:	e038      	b.n	80054aa <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b01      	cmp	r3, #1
 8005444:	d115      	bne.n	8005472 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005450:	b292      	uxth	r2, r2
 8005452:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005458:	1c9a      	adds	r2, r3, #2
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005464:	b29b      	uxth	r3, r3
 8005466:	3b01      	subs	r3, #1
 8005468:	b29a      	uxth	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005470:	e015      	b.n	800549e <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005472:	f7fc fcf3 	bl	8001e5c <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d803      	bhi.n	800548a <HAL_SPI_Receive+0x210>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005488:	d102      	bne.n	8005490 <HAL_SPI_Receive+0x216>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d106      	bne.n	800549e <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800549c:	e01b      	b.n	80054d6 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1c6      	bne.n	8005438 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	6839      	ldr	r1, [r7, #0]
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 fffe 	bl	80064b0 <SPI_EndRxTransaction>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d002      	beq.n	80054c0 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2220      	movs	r2, #32
 80054be:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	75fb      	strb	r3, [r7, #23]
 80054cc:	e003      	b.n	80054d6 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80054de:	7dfb      	ldrb	r3, [r7, #23]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08a      	sub	sp, #40	; 0x28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80054f6:	2301      	movs	r3, #1
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005506:	2b01      	cmp	r3, #1
 8005508:	d101      	bne.n	800550e <HAL_SPI_TransmitReceive+0x26>
 800550a:	2302      	movs	r3, #2
 800550c:	e20a      	b.n	8005924 <HAL_SPI_TransmitReceive+0x43c>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005516:	f7fc fca1 	bl	8001e5c <HAL_GetTick>
 800551a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005522:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800552a:	887b      	ldrh	r3, [r7, #2]
 800552c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800552e:	887b      	ldrh	r3, [r7, #2]
 8005530:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005532:	7efb      	ldrb	r3, [r7, #27]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d00e      	beq.n	8005556 <HAL_SPI_TransmitReceive+0x6e>
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800553e:	d106      	bne.n	800554e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d102      	bne.n	800554e <HAL_SPI_TransmitReceive+0x66>
 8005548:	7efb      	ldrb	r3, [r7, #27]
 800554a:	2b04      	cmp	r3, #4
 800554c:	d003      	beq.n	8005556 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800554e:	2302      	movs	r3, #2
 8005550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005554:	e1e0      	b.n	8005918 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d005      	beq.n	8005568 <HAL_SPI_TransmitReceive+0x80>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <HAL_SPI_TransmitReceive+0x80>
 8005562:	887b      	ldrh	r3, [r7, #2]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d103      	bne.n	8005570 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800556e:	e1d3      	b.n	8005918 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b04      	cmp	r3, #4
 800557a:	d003      	beq.n	8005584 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2205      	movs	r2, #5
 8005580:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	887a      	ldrh	r2, [r7, #2]
 8005594:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	887a      	ldrh	r2, [r7, #2]
 800559c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	887a      	ldrh	r2, [r7, #2]
 80055aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	887a      	ldrh	r2, [r7, #2]
 80055b0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055c6:	d802      	bhi.n	80055ce <HAL_SPI_TransmitReceive+0xe6>
 80055c8:	8a3b      	ldrh	r3, [r7, #16]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d908      	bls.n	80055e0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055dc:	605a      	str	r2, [r3, #4]
 80055de:	e007      	b.n	80055f0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055ee:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fa:	2b40      	cmp	r3, #64	; 0x40
 80055fc:	d007      	beq.n	800560e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800560c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005616:	f240 8081 	bls.w	800571c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <HAL_SPI_TransmitReceive+0x140>
 8005622:	8a7b      	ldrh	r3, [r7, #18]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d16d      	bne.n	8005704 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	881a      	ldrh	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005638:	1c9a      	adds	r2, r3, #2
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005642:	b29b      	uxth	r3, r3
 8005644:	3b01      	subs	r3, #1
 8005646:	b29a      	uxth	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800564c:	e05a      	b.n	8005704 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b02      	cmp	r3, #2
 800565a:	d11b      	bne.n	8005694 <HAL_SPI_TransmitReceive+0x1ac>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005660:	b29b      	uxth	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d016      	beq.n	8005694 <HAL_SPI_TransmitReceive+0x1ac>
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	2b01      	cmp	r3, #1
 800566a:	d113      	bne.n	8005694 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005670:	881a      	ldrh	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567c:	1c9a      	adds	r2, r3, #2
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005686:	b29b      	uxth	r3, r3
 8005688:	3b01      	subs	r3, #1
 800568a:	b29a      	uxth	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d11c      	bne.n	80056dc <HAL_SPI_TransmitReceive+0x1f4>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d016      	beq.n	80056dc <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b8:	b292      	uxth	r2, r2
 80056ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c0:	1c9a      	adds	r2, r3, #2
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	3b01      	subs	r3, #1
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056d8:	2301      	movs	r3, #1
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80056dc:	f7fc fbbe 	bl	8001e5c <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d80b      	bhi.n	8005704 <HAL_SPI_TransmitReceive+0x21c>
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f2:	d007      	beq.n	8005704 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005702:	e109      	b.n	8005918 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005708:	b29b      	uxth	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d19f      	bne.n	800564e <HAL_SPI_TransmitReceive+0x166>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005714:	b29b      	uxth	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d199      	bne.n	800564e <HAL_SPI_TransmitReceive+0x166>
 800571a:	e0e3      	b.n	80058e4 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d003      	beq.n	800572c <HAL_SPI_TransmitReceive+0x244>
 8005724:	8a7b      	ldrh	r3, [r7, #18]
 8005726:	2b01      	cmp	r3, #1
 8005728:	f040 80cf 	bne.w	80058ca <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b01      	cmp	r3, #1
 8005734:	d912      	bls.n	800575c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573a:	881a      	ldrh	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	1c9a      	adds	r2, r3, #2
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005750:	b29b      	uxth	r3, r3
 8005752:	3b02      	subs	r3, #2
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	87da      	strh	r2, [r3, #62]	; 0x3e
 800575a:	e0b6      	b.n	80058ca <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	330c      	adds	r3, #12
 8005766:	7812      	ldrb	r2, [r2, #0]
 8005768:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005778:	b29b      	uxth	r3, r3
 800577a:	3b01      	subs	r3, #1
 800577c:	b29a      	uxth	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005782:	e0a2      	b.n	80058ca <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b02      	cmp	r3, #2
 8005790:	d134      	bne.n	80057fc <HAL_SPI_TransmitReceive+0x314>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005796:	b29b      	uxth	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d02f      	beq.n	80057fc <HAL_SPI_TransmitReceive+0x314>
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d12c      	bne.n	80057fc <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d912      	bls.n	80057d2 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b0:	881a      	ldrh	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057bc:	1c9a      	adds	r2, r3, #2
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	3b02      	subs	r3, #2
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057d0:	e012      	b.n	80057f8 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	330c      	adds	r3, #12
 80057dc:	7812      	ldrb	r2, [r2, #0]
 80057de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b01      	cmp	r3, #1
 8005808:	d148      	bne.n	800589c <HAL_SPI_TransmitReceive+0x3b4>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005810:	b29b      	uxth	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d042      	beq.n	800589c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800581c:	b29b      	uxth	r3, r3
 800581e:	2b01      	cmp	r3, #1
 8005820:	d923      	bls.n	800586a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68da      	ldr	r2, [r3, #12]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582c:	b292      	uxth	r2, r2
 800582e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005834:	1c9a      	adds	r2, r3, #2
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005840:	b29b      	uxth	r3, r3
 8005842:	3b02      	subs	r3, #2
 8005844:	b29a      	uxth	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b01      	cmp	r3, #1
 8005856:	d81f      	bhi.n	8005898 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005866:	605a      	str	r2, [r3, #4]
 8005868:	e016      	b.n	8005898 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f103 020c 	add.w	r2, r3, #12
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	7812      	ldrb	r2, [r2, #0]
 8005878:	b2d2      	uxtb	r2, r2
 800587a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800588c:	b29b      	uxth	r3, r3
 800588e:	3b01      	subs	r3, #1
 8005890:	b29a      	uxth	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005898:	2301      	movs	r3, #1
 800589a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800589c:	f7fc fade 	bl	8001e5c <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d803      	bhi.n	80058b4 <HAL_SPI_TransmitReceive+0x3cc>
 80058ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b2:	d102      	bne.n	80058ba <HAL_SPI_TransmitReceive+0x3d2>
 80058b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d107      	bne.n	80058ca <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80058c8:	e026      	b.n	8005918 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f47f af57 	bne.w	8005784 <HAL_SPI_TransmitReceive+0x29c>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058dc:	b29b      	uxth	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f47f af50 	bne.w	8005784 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058e4:	69fa      	ldr	r2, [r7, #28]
 80058e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 fe39 	bl	8006560 <SPI_EndRxTxTransaction>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d005      	beq.n	8005900 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2220      	movs	r2, #32
 80058fe:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800590e:	e003      	b.n	8005918 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005920:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005924:	4618      	mov	r0, r3
 8005926:	3728      	adds	r7, #40	; 0x28
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	4613      	mov	r3, r2
 8005938:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <HAL_SPI_Transmit_IT+0x1e>
 8005944:	88fb      	ldrh	r3, [r7, #6]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d102      	bne.n	8005950 <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800594e:	e06d      	b.n	8005a2c <HAL_SPI_Transmit_IT+0x100>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b01      	cmp	r3, #1
 800595a:	d002      	beq.n	8005962 <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 800595c:	2302      	movs	r3, #2
 800595e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005960:	e064      	b.n	8005a2c <HAL_SPI_Transmit_IT+0x100>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_SPI_Transmit_IT+0x44>
 800596c:	2302      	movs	r3, #2
 800596e:	e05e      	b.n	8005a2e <HAL_SPI_Transmit_IT+0x102>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2203      	movs	r2, #3
 800597c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	88fa      	ldrh	r2, [r7, #6]
 8005990:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	88fa      	ldrh	r2, [r7, #6]
 8005996:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059bc:	d903      	bls.n	80059c6 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4a1e      	ldr	r2, [pc, #120]	; (8005a3c <HAL_SPI_Transmit_IT+0x110>)
 80059c2:	651a      	str	r2, [r3, #80]	; 0x50
 80059c4:	e002      	b.n	80059cc <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4a1d      	ldr	r2, [pc, #116]	; (8005a40 <HAL_SPI_Transmit_IT+0x114>)
 80059ca:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d4:	d10f      	bne.n	80059f6 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a00:	2b40      	cmp	r3, #64	; 0x40
 8005a02:	d007      	beq.n	8005a14 <HAL_SPI_Transmit_IT+0xe8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a12:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8005a2a:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	371c      	adds	r7, #28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	0800622f 	.word	0x0800622f
 8005a40:	080061e9 	.word	0x080061e9

08005a44 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d002      	beq.n	8005a68 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 8005a62:	2302      	movs	r3, #2
 8005a64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a66:	e092      	b.n	8005b8e <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d110      	bne.n	8005a92 <HAL_SPI_Receive_IT+0x4e>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a78:	d10b      	bne.n	8005a92 <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2204      	movs	r2, #4
 8005a7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8005a82:	88fb      	ldrh	r3, [r7, #6]
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	68b9      	ldr	r1, [r7, #8]
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 f889 	bl	8005ba0 <HAL_SPI_TransmitReceive_IT>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	e07e      	b.n	8005b90 <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <HAL_SPI_Receive_IT+0x5a>
 8005a98:	88fb      	ldrh	r3, [r7, #6]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d102      	bne.n	8005aa4 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005aa2:	e074      	b.n	8005b8e <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d101      	bne.n	8005ab2 <HAL_SPI_Receive_IT+0x6e>
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e06e      	b.n	8005b90 <HAL_SPI_Receive_IT+0x14c>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2204      	movs	r2, #4
 8005abe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	88fa      	ldrh	r2, [r7, #6]
 8005ad2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	88fa      	ldrh	r2, [r7, #6]
 8005ada:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005afe:	d90b      	bls.n	8005b18 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b0e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4a21      	ldr	r2, [pc, #132]	; (8005b98 <HAL_SPI_Receive_IT+0x154>)
 8005b14:	64da      	str	r2, [r3, #76]	; 0x4c
 8005b16:	e00a      	b.n	8005b2e <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b26:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4a1c      	ldr	r2, [pc, #112]	; (8005b9c <HAL_SPI_Receive_IT+0x158>)
 8005b2c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b36:	d10f      	bne.n	8005b58 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b56:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b62:	2b40      	cmp	r3, #64	; 0x40
 8005b64:	d007      	beq.n	8005b76 <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b74:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005b8c:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8005b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	0800619d 	.word	0x0800619d
 8005b9c:	0800614d 	.word	0x0800614d

08005ba0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
 8005bac:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bb8:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005bc0:	7dbb      	ldrb	r3, [r7, #22]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d00d      	beq.n	8005be2 <HAL_SPI_TransmitReceive_IT+0x42>
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bcc:	d106      	bne.n	8005bdc <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d102      	bne.n	8005bdc <HAL_SPI_TransmitReceive_IT+0x3c>
 8005bd6:	7dbb      	ldrb	r3, [r7, #22]
 8005bd8:	2b04      	cmp	r3, #4
 8005bda:	d002      	beq.n	8005be2 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8005bdc:	2302      	movs	r3, #2
 8005bde:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005be0:	e07d      	b.n	8005cde <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d005      	beq.n	8005bf4 <HAL_SPI_TransmitReceive_IT+0x54>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <HAL_SPI_TransmitReceive_IT+0x54>
 8005bee:	887b      	ldrh	r3, [r7, #2]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d102      	bne.n	8005bfa <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005bf8:	e071      	b.n	8005cde <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d101      	bne.n	8005c08 <HAL_SPI_TransmitReceive_IT+0x68>
 8005c04:	2302      	movs	r3, #2
 8005c06:	e06b      	b.n	8005ce0 <HAL_SPI_TransmitReceive_IT+0x140>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	d003      	beq.n	8005c24 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2205      	movs	r2, #5
 8005c20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	887a      	ldrh	r2, [r7, #2]
 8005c34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	887a      	ldrh	r2, [r7, #2]
 8005c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	887a      	ldrh	r2, [r7, #2]
 8005c46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	887a      	ldrh	r2, [r7, #2]
 8005c4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c5a:	d906      	bls.n	8005c6a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4a23      	ldr	r2, [pc, #140]	; (8005cec <HAL_SPI_TransmitReceive_IT+0x14c>)
 8005c60:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	4a22      	ldr	r2, [pc, #136]	; (8005cf0 <HAL_SPI_TransmitReceive_IT+0x150>)
 8005c66:	651a      	str	r2, [r3, #80]	; 0x50
 8005c68:	e005      	b.n	8005c76 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4a21      	ldr	r2, [pc, #132]	; (8005cf4 <HAL_SPI_TransmitReceive_IT+0x154>)
 8005c6e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4a21      	ldr	r2, [pc, #132]	; (8005cf8 <HAL_SPI_TransmitReceive_IT+0x158>)
 8005c74:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c7e:	d802      	bhi.n	8005c86 <HAL_SPI_TransmitReceive_IT+0xe6>
 8005c80:	887b      	ldrh	r3, [r7, #2]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d908      	bls.n	8005c98 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c94:	605a      	str	r2, [r3, #4]
 8005c96:	e007      	b.n	8005ca8 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ca6:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb2:	2b40      	cmp	r3, #64	; 0x40
 8005cb4:	d007      	beq.n	8005cc6 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cc4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8005cdc:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8005cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	371c      	adds	r7, #28
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	08006087 	.word	0x08006087
 8005cf0:	080060ed 	.word	0x080060ed
 8005cf4:	08005f37 	.word	0x08005f37
 8005cf8:	08005ff5 	.word	0x08005ff5

08005cfc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10e      	bne.n	8005d3c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d009      	beq.n	8005d3c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d004      	beq.n	8005d3c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	4798      	blx	r3
    return;
 8005d3a:	e0ce      	b.n	8005eda <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d009      	beq.n	8005d5a <HAL_SPI_IRQHandler+0x5e>
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d004      	beq.n	8005d5a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	4798      	blx	r3
    return;
 8005d58:	e0bf      	b.n	8005eda <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	f003 0320 	and.w	r3, r3, #32
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10a      	bne.n	8005d7a <HAL_SPI_IRQHandler+0x7e>
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d105      	bne.n	8005d7a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f000 80b0 	beq.w	8005eda <HAL_SPI_IRQHandler+0x1de>
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	f003 0320 	and.w	r3, r3, #32
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 80aa 	beq.w	8005eda <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d023      	beq.n	8005dd8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b03      	cmp	r3, #3
 8005d9a:	d011      	beq.n	8005dc0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da0:	f043 0204 	orr.w	r2, r3, #4
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005da8:	2300      	movs	r3, #0
 8005daa:	617b      	str	r3, [r7, #20]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	617b      	str	r3, [r7, #20]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	617b      	str	r3, [r7, #20]
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	e00b      	b.n	8005dd8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	613b      	str	r3, [r7, #16]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	613b      	str	r3, [r7, #16]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	613b      	str	r3, [r7, #16]
 8005dd4:	693b      	ldr	r3, [r7, #16]
        return;
 8005dd6:	e080      	b.n	8005eda <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	f003 0320 	and.w	r3, r3, #32
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d014      	beq.n	8005e0c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de6:	f043 0201 	orr.w	r2, r3, #1
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005dee:	2300      	movs	r3, #0
 8005df0:	60fb      	str	r3, [r7, #12]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e08:	601a      	str	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00c      	beq.n	8005e30 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e1a:	f043 0208 	orr.w	r2, r3, #8
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e22:	2300      	movs	r3, #0
 8005e24:	60bb      	str	r3, [r7, #8]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	60bb      	str	r3, [r7, #8]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d04f      	beq.n	8005ed8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e46:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d104      	bne.n	8005e64 <HAL_SPI_IRQHandler+0x168>
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d034      	beq.n	8005ece <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 0203 	bic.w	r2, r2, #3
 8005e72:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d011      	beq.n	8005ea0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e80:	4a17      	ldr	r2, [pc, #92]	; (8005ee0 <HAL_SPI_IRQHandler+0x1e4>)
 8005e82:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7fc fa67 	bl	800235c <HAL_DMA_Abort_IT>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d005      	beq.n	8005ea0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d016      	beq.n	8005ed6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eac:	4a0c      	ldr	r2, [pc, #48]	; (8005ee0 <HAL_SPI_IRQHandler+0x1e4>)
 8005eae:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7fc fa51 	bl	800235c <HAL_DMA_Abort_IT>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00a      	beq.n	8005ed6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005ecc:	e003      	b.n	8005ed6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f812 	bl	8005ef8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005ed4:	e000      	b.n	8005ed8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005ed6:	bf00      	nop
    return;
 8005ed8:	bf00      	nop
  }
}
 8005eda:	3720      	adds	r7, #32
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	08005f0d 	.word	0x08005f0d

08005ee4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f18:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f7ff ffe5 	bl	8005ef8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f2e:	bf00      	nop
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b082      	sub	sp, #8
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d923      	bls.n	8005f92 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68da      	ldr	r2, [r3, #12]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	b292      	uxth	r2, r2
 8005f56:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	1c9a      	adds	r2, r3, #2
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	3b02      	subs	r3, #2
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d11f      	bne.n	8005fc0 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f8e:	605a      	str	r2, [r3, #4]
 8005f90:	e016      	b.n	8005fc0 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f103 020c 	add.w	r2, r3, #12
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9e:	7812      	ldrb	r2, [r2, #0]
 8005fa0:	b2d2      	uxtb	r2, r2
 8005fa2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa8:	1c5a      	adds	r2, r3, #1
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10f      	bne.n	8005fec <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005fda:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d102      	bne.n	8005fec <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fb00 	bl	80065ec <SPI_CloseRxTx_ISR>
    }
  }
}
 8005fec:	bf00      	nop
 8005fee:	3708      	adds	r7, #8
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006000:	b29b      	uxth	r3, r3
 8006002:	2b01      	cmp	r3, #1
 8006004:	d912      	bls.n	800602c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600a:	881a      	ldrh	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006016:	1c9a      	adds	r2, r3, #2
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006020:	b29b      	uxth	r3, r3
 8006022:	3b02      	subs	r3, #2
 8006024:	b29a      	uxth	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	87da      	strh	r2, [r3, #62]	; 0x3e
 800602a:	e012      	b.n	8006052 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	330c      	adds	r3, #12
 8006036:	7812      	ldrb	r2, [r2, #0]
 8006038:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006048:	b29b      	uxth	r3, r3
 800604a:	3b01      	subs	r3, #1
 800604c:	b29a      	uxth	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006056:	b29b      	uxth	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	d110      	bne.n	800607e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800606a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006072:	b29b      	uxth	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	d102      	bne.n	800607e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fab7 	bl	80065ec <SPI_CloseRxTx_ISR>
    }
  }
}
 800607e:	bf00      	nop
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b082      	sub	sp, #8
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68da      	ldr	r2, [r3, #12]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006098:	b292      	uxth	r2, r2
 800609a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a0:	1c9a      	adds	r2, r3, #2
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060be:	b29b      	uxth	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10f      	bne.n	80060e4 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685a      	ldr	r2, [r3, #4]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060d2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060d8:	b29b      	uxth	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d102      	bne.n	80060e4 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fa84 	bl	80065ec <SPI_CloseRxTx_ISR>
    }
  }
}
 80060e4:	bf00      	nop
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f8:	881a      	ldrh	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	1c9a      	adds	r2, r3, #2
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800610e:	b29b      	uxth	r3, r3
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800611c:	b29b      	uxth	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d110      	bne.n	8006144 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006130:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006138:	b29b      	uxth	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d102      	bne.n	8006144 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fa54 	bl	80065ec <SPI_CloseRxTx_ISR>
    }
  }
}
 8006144:	bf00      	nop
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f103 020c 	add.w	r2, r3, #12
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006160:	7812      	ldrb	r2, [r2, #0]
 8006162:	b2d2      	uxtb	r2, r2
 8006164:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006176:	b29b      	uxth	r3, r3
 8006178:	3b01      	subs	r3, #1
 800617a:	b29a      	uxth	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006188:	b29b      	uxth	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d102      	bne.n	8006194 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fa6e 	bl	8006670 <SPI_CloseRx_ISR>
  }
}
 8006194:	bf00      	nop
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	b292      	uxth	r2, r2
 80061b0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	1c9a      	adds	r2, r3, #2
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	3b01      	subs	r3, #1
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d102      	bne.n	80061e0 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fa48 	bl	8006670 <SPI_CloseRx_ISR>
  }
}
 80061e0:	bf00      	nop
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	330c      	adds	r3, #12
 80061fa:	7812      	ldrb	r2, [r2, #0]
 80061fc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800620c:	b29b      	uxth	r3, r3
 800620e:	3b01      	subs	r3, #1
 8006210:	b29a      	uxth	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800621a:	b29b      	uxth	r3, r3
 800621c:	2b00      	cmp	r3, #0
 800621e:	d102      	bne.n	8006226 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fa55 	bl	80066d0 <SPI_CloseTx_ISR>
  }
}
 8006226:	bf00      	nop
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b082      	sub	sp, #8
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623a:	881a      	ldrh	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006246:	1c9a      	adds	r2, r3, #2
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800625e:	b29b      	uxth	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	d102      	bne.n	800626a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fa33 	bl	80066d0 <SPI_CloseTx_ISR>
  }
}
 800626a:	bf00      	nop
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
	...

08006274 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b088      	sub	sp, #32
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	603b      	str	r3, [r7, #0]
 8006280:	4613      	mov	r3, r2
 8006282:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006284:	f7fb fdea 	bl	8001e5c <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628c:	1a9b      	subs	r3, r3, r2
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	4413      	add	r3, r2
 8006292:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006294:	f7fb fde2 	bl	8001e5c <HAL_GetTick>
 8006298:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800629a:	4b39      	ldr	r3, [pc, #228]	; (8006380 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	015b      	lsls	r3, r3, #5
 80062a0:	0d1b      	lsrs	r3, r3, #20
 80062a2:	69fa      	ldr	r2, [r7, #28]
 80062a4:	fb02 f303 	mul.w	r3, r2, r3
 80062a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062aa:	e054      	b.n	8006356 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b2:	d050      	beq.n	8006356 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062b4:	f7fb fdd2 	bl	8001e5c <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	69fa      	ldr	r2, [r7, #28]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d902      	bls.n	80062ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d13d      	bne.n	8006346 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80062d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062e2:	d111      	bne.n	8006308 <SPI_WaitFlagStateUntilTimeout+0x94>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ec:	d004      	beq.n	80062f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062f6:	d107      	bne.n	8006308 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006306:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006310:	d10f      	bne.n	8006332 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006330:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e017      	b.n	8006376 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	3b01      	subs	r3, #1
 8006354:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	4013      	ands	r3, r2
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	429a      	cmp	r2, r3
 8006364:	bf0c      	ite	eq
 8006366:	2301      	moveq	r3, #1
 8006368:	2300      	movne	r3, #0
 800636a:	b2db      	uxtb	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	79fb      	ldrb	r3, [r7, #7]
 8006370:	429a      	cmp	r2, r3
 8006372:	d19b      	bne.n	80062ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3720      	adds	r7, #32
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	20000000 	.word	0x20000000

08006384 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b08a      	sub	sp, #40	; 0x28
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006392:	2300      	movs	r3, #0
 8006394:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006396:	f7fb fd61 	bl	8001e5c <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639e:	1a9b      	subs	r3, r3, r2
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	4413      	add	r3, r2
 80063a4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80063a6:	f7fb fd59 	bl	8001e5c <HAL_GetTick>
 80063aa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	330c      	adds	r3, #12
 80063b2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80063b4:	4b3d      	ldr	r3, [pc, #244]	; (80064ac <SPI_WaitFifoStateUntilTimeout+0x128>)
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	4613      	mov	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	00da      	lsls	r2, r3, #3
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	0d1b      	lsrs	r3, r3, #20
 80063c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c6:	fb02 f303 	mul.w	r3, r2, r3
 80063ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80063cc:	e060      	b.n	8006490 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80063d4:	d107      	bne.n	80063e6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d104      	bne.n	80063e6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80063e4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ec:	d050      	beq.n	8006490 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063ee:	f7fb fd35 	bl	8001e5c <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d902      	bls.n	8006404 <SPI_WaitFifoStateUntilTimeout+0x80>
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	2b00      	cmp	r3, #0
 8006402:	d13d      	bne.n	8006480 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006412:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800641c:	d111      	bne.n	8006442 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006426:	d004      	beq.n	8006432 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006430:	d107      	bne.n	8006442 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006440:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800644a:	d10f      	bne.n	800646c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800646a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e010      	b.n	80064a2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	3b01      	subs	r3, #1
 800648e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689a      	ldr	r2, [r3, #8]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	4013      	ands	r3, r2
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	429a      	cmp	r2, r3
 800649e:	d196      	bne.n	80063ce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3728      	adds	r7, #40	; 0x28
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000000 	.word	0x20000000

080064b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af02      	add	r7, sp, #8
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064c4:	d111      	bne.n	80064ea <SPI_EndRxTransaction+0x3a>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064ce:	d004      	beq.n	80064da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064d8:	d107      	bne.n	80064ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064e8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2200      	movs	r2, #0
 80064f2:	2180      	movs	r1, #128	; 0x80
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f7ff febd 	bl	8006274 <SPI_WaitFlagStateUntilTimeout>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d007      	beq.n	8006510 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006504:	f043 0220 	orr.w	r2, r3, #32
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e023      	b.n	8006558 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006518:	d11d      	bne.n	8006556 <SPI_EndRxTransaction+0xa6>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006522:	d004      	beq.n	800652e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800652c:	d113      	bne.n	8006556 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2200      	movs	r2, #0
 8006536:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f7ff ff22 	bl	8006384 <SPI_WaitFifoStateUntilTimeout>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d007      	beq.n	8006556 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800654a:	f043 0220 	orr.w	r2, r3, #32
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e000      	b.n	8006558 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af02      	add	r7, sp, #8
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	2200      	movs	r2, #0
 8006574:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f7ff ff03 	bl	8006384 <SPI_WaitFifoStateUntilTimeout>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d007      	beq.n	8006594 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006588:	f043 0220 	orr.w	r2, r3, #32
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e027      	b.n	80065e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2200      	movs	r2, #0
 800659c:	2180      	movs	r1, #128	; 0x80
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f7ff fe68 	bl	8006274 <SPI_WaitFlagStateUntilTimeout>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d007      	beq.n	80065ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ae:	f043 0220 	orr.w	r2, r3, #32
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e014      	b.n	80065e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f7ff fedc 	bl	8006384 <SPI_WaitFifoStateUntilTimeout>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d007      	beq.n	80065e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065d6:	f043 0220 	orr.w	r2, r3, #32
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e000      	b.n	80065e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065f4:	f7fb fc32 	bl	8001e5c <HAL_GetTick>
 80065f8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f022 0220 	bic.w	r2, r2, #32
 8006608:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	2164      	movs	r1, #100	; 0x64
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7ff ffa6 	bl	8006560 <SPI_EndRxTxTransaction>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d005      	beq.n	8006626 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800661e:	f043 0220 	orr.w	r2, r3, #32
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800662a:	2b00      	cmp	r3, #0
 800662c:	d115      	bne.n	800665a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b04      	cmp	r3, #4
 8006638:	d107      	bne.n	800664a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f002 ffae 	bl	80095a4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006648:	e00e      	b.n	8006668 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7ff fc46 	bl	8005ee4 <HAL_SPI_TxRxCpltCallback>
}
 8006658:	e006      	b.n	8006668 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7ff fc48 	bl	8005ef8 <HAL_SPI_ErrorCallback>
}
 8006668:	bf00      	nop
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006686:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8006688:	f7fb fbe8 	bl	8001e5c <HAL_GetTick>
 800668c:	4603      	mov	r3, r0
 800668e:	461a      	mov	r2, r3
 8006690:	2164      	movs	r1, #100	; 0x64
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7ff ff0c 	bl	80064b0 <SPI_EndRxTransaction>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d005      	beq.n	80066aa <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a2:	f043 0220 	orr.w	r2, r3, #32
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d103      	bne.n	80066c2 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f002 ff72 	bl	80095a4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80066c0:	e002      	b.n	80066c8 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7ff fc18 	bl	8005ef8 <HAL_SPI_ErrorCallback>
}
 80066c8:	bf00      	nop
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066d8:	f7fb fbc0 	bl	8001e5c <HAL_GetTick>
 80066dc:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066ec:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	2164      	movs	r1, #100	; 0x64
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7ff ff34 	bl	8006560 <SPI_EndRxTxTransaction>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d005      	beq.n	800670a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006702:	f043 0220 	orr.w	r2, r3, #32
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10a      	bne.n	8006728 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006712:	2300      	movs	r3, #0
 8006714:	60bb      	str	r3, [r7, #8]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	60bb      	str	r3, [r7, #8]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	60bb      	str	r3, [r7, #8]
 8006726:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006734:	2b00      	cmp	r3, #0
 8006736:	d003      	beq.n	8006740 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7ff fbdd 	bl	8005ef8 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800673e:	e002      	b.n	8006746 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f002 ff43 	bl	80095cc <HAL_SPI_TxCpltCallback>
}
 8006746:	bf00      	nop
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b082      	sub	sp, #8
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e040      	b.n	80067e2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006764:	2b00      	cmp	r3, #0
 8006766:	d106      	bne.n	8006776 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7fb f893 	bl	800189c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2224      	movs	r2, #36	; 0x24
 800677a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 0201 	bic.w	r2, r2, #1
 800678a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006790:	2b00      	cmp	r3, #0
 8006792:	d002      	beq.n	800679a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fae1 	bl	8006d5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f826 	bl	80067ec <UART_SetConfig>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d101      	bne.n	80067aa <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e01b      	b.n	80067e2 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f042 0201 	orr.w	r2, r2, #1
 80067d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fb60 	bl	8006ea0 <UART_CheckIdleState>
 80067e0:	4603      	mov	r3, r0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067f0:	b08a      	sub	sp, #40	; 0x28
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	431a      	orrs	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	431a      	orrs	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	4313      	orrs	r3, r2
 8006812:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	4ba4      	ldr	r3, [pc, #656]	; (8006aac <UART_SetConfig+0x2c0>)
 800681c:	4013      	ands	r3, r2
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	6812      	ldr	r2, [r2, #0]
 8006822:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006824:	430b      	orrs	r3, r1
 8006826:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a99      	ldr	r2, [pc, #612]	; (8006ab0 <UART_SetConfig+0x2c4>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d004      	beq.n	8006858 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006854:	4313      	orrs	r3, r2
 8006856:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006868:	430a      	orrs	r2, r1
 800686a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a90      	ldr	r2, [pc, #576]	; (8006ab4 <UART_SetConfig+0x2c8>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d126      	bne.n	80068c4 <UART_SetConfig+0xd8>
 8006876:	4b90      	ldr	r3, [pc, #576]	; (8006ab8 <UART_SetConfig+0x2cc>)
 8006878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800687c:	f003 0303 	and.w	r3, r3, #3
 8006880:	2b03      	cmp	r3, #3
 8006882:	d81b      	bhi.n	80068bc <UART_SetConfig+0xd0>
 8006884:	a201      	add	r2, pc, #4	; (adr r2, 800688c <UART_SetConfig+0xa0>)
 8006886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688a:	bf00      	nop
 800688c:	0800689d 	.word	0x0800689d
 8006890:	080068ad 	.word	0x080068ad
 8006894:	080068a5 	.word	0x080068a5
 8006898:	080068b5 	.word	0x080068b5
 800689c:	2301      	movs	r3, #1
 800689e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068a2:	e116      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 80068a4:	2302      	movs	r3, #2
 80068a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068aa:	e112      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 80068ac:	2304      	movs	r3, #4
 80068ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068b2:	e10e      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 80068b4:	2308      	movs	r3, #8
 80068b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ba:	e10a      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 80068bc:	2310      	movs	r3, #16
 80068be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068c2:	e106      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a7c      	ldr	r2, [pc, #496]	; (8006abc <UART_SetConfig+0x2d0>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d138      	bne.n	8006940 <UART_SetConfig+0x154>
 80068ce:	4b7a      	ldr	r3, [pc, #488]	; (8006ab8 <UART_SetConfig+0x2cc>)
 80068d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d4:	f003 030c 	and.w	r3, r3, #12
 80068d8:	2b0c      	cmp	r3, #12
 80068da:	d82d      	bhi.n	8006938 <UART_SetConfig+0x14c>
 80068dc:	a201      	add	r2, pc, #4	; (adr r2, 80068e4 <UART_SetConfig+0xf8>)
 80068de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e2:	bf00      	nop
 80068e4:	08006919 	.word	0x08006919
 80068e8:	08006939 	.word	0x08006939
 80068ec:	08006939 	.word	0x08006939
 80068f0:	08006939 	.word	0x08006939
 80068f4:	08006929 	.word	0x08006929
 80068f8:	08006939 	.word	0x08006939
 80068fc:	08006939 	.word	0x08006939
 8006900:	08006939 	.word	0x08006939
 8006904:	08006921 	.word	0x08006921
 8006908:	08006939 	.word	0x08006939
 800690c:	08006939 	.word	0x08006939
 8006910:	08006939 	.word	0x08006939
 8006914:	08006931 	.word	0x08006931
 8006918:	2300      	movs	r3, #0
 800691a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800691e:	e0d8      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 8006920:	2302      	movs	r3, #2
 8006922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006926:	e0d4      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 8006928:	2304      	movs	r3, #4
 800692a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800692e:	e0d0      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 8006930:	2308      	movs	r3, #8
 8006932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006936:	e0cc      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 8006938:	2310      	movs	r3, #16
 800693a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800693e:	e0c8      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a5e      	ldr	r2, [pc, #376]	; (8006ac0 <UART_SetConfig+0x2d4>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d125      	bne.n	8006996 <UART_SetConfig+0x1aa>
 800694a:	4b5b      	ldr	r3, [pc, #364]	; (8006ab8 <UART_SetConfig+0x2cc>)
 800694c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006950:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006954:	2b30      	cmp	r3, #48	; 0x30
 8006956:	d016      	beq.n	8006986 <UART_SetConfig+0x19a>
 8006958:	2b30      	cmp	r3, #48	; 0x30
 800695a:	d818      	bhi.n	800698e <UART_SetConfig+0x1a2>
 800695c:	2b20      	cmp	r3, #32
 800695e:	d00a      	beq.n	8006976 <UART_SetConfig+0x18a>
 8006960:	2b20      	cmp	r3, #32
 8006962:	d814      	bhi.n	800698e <UART_SetConfig+0x1a2>
 8006964:	2b00      	cmp	r3, #0
 8006966:	d002      	beq.n	800696e <UART_SetConfig+0x182>
 8006968:	2b10      	cmp	r3, #16
 800696a:	d008      	beq.n	800697e <UART_SetConfig+0x192>
 800696c:	e00f      	b.n	800698e <UART_SetConfig+0x1a2>
 800696e:	2300      	movs	r3, #0
 8006970:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006974:	e0ad      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 8006976:	2302      	movs	r3, #2
 8006978:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800697c:	e0a9      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 800697e:	2304      	movs	r3, #4
 8006980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006984:	e0a5      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 8006986:	2308      	movs	r3, #8
 8006988:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800698c:	e0a1      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 800698e:	2310      	movs	r3, #16
 8006990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006994:	e09d      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a4a      	ldr	r2, [pc, #296]	; (8006ac4 <UART_SetConfig+0x2d8>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d125      	bne.n	80069ec <UART_SetConfig+0x200>
 80069a0:	4b45      	ldr	r3, [pc, #276]	; (8006ab8 <UART_SetConfig+0x2cc>)
 80069a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069aa:	2bc0      	cmp	r3, #192	; 0xc0
 80069ac:	d016      	beq.n	80069dc <UART_SetConfig+0x1f0>
 80069ae:	2bc0      	cmp	r3, #192	; 0xc0
 80069b0:	d818      	bhi.n	80069e4 <UART_SetConfig+0x1f8>
 80069b2:	2b80      	cmp	r3, #128	; 0x80
 80069b4:	d00a      	beq.n	80069cc <UART_SetConfig+0x1e0>
 80069b6:	2b80      	cmp	r3, #128	; 0x80
 80069b8:	d814      	bhi.n	80069e4 <UART_SetConfig+0x1f8>
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d002      	beq.n	80069c4 <UART_SetConfig+0x1d8>
 80069be:	2b40      	cmp	r3, #64	; 0x40
 80069c0:	d008      	beq.n	80069d4 <UART_SetConfig+0x1e8>
 80069c2:	e00f      	b.n	80069e4 <UART_SetConfig+0x1f8>
 80069c4:	2300      	movs	r3, #0
 80069c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ca:	e082      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 80069cc:	2302      	movs	r3, #2
 80069ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069d2:	e07e      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 80069d4:	2304      	movs	r3, #4
 80069d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069da:	e07a      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 80069dc:	2308      	movs	r3, #8
 80069de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e2:	e076      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 80069e4:	2310      	movs	r3, #16
 80069e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ea:	e072      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a35      	ldr	r2, [pc, #212]	; (8006ac8 <UART_SetConfig+0x2dc>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d12a      	bne.n	8006a4c <UART_SetConfig+0x260>
 80069f6:	4b30      	ldr	r3, [pc, #192]	; (8006ab8 <UART_SetConfig+0x2cc>)
 80069f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a04:	d01a      	beq.n	8006a3c <UART_SetConfig+0x250>
 8006a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a0a:	d81b      	bhi.n	8006a44 <UART_SetConfig+0x258>
 8006a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a10:	d00c      	beq.n	8006a2c <UART_SetConfig+0x240>
 8006a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a16:	d815      	bhi.n	8006a44 <UART_SetConfig+0x258>
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d003      	beq.n	8006a24 <UART_SetConfig+0x238>
 8006a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a20:	d008      	beq.n	8006a34 <UART_SetConfig+0x248>
 8006a22:	e00f      	b.n	8006a44 <UART_SetConfig+0x258>
 8006a24:	2300      	movs	r3, #0
 8006a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a2a:	e052      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a32:	e04e      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 8006a34:	2304      	movs	r3, #4
 8006a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a3a:	e04a      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 8006a3c:	2308      	movs	r3, #8
 8006a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a42:	e046      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 8006a44:	2310      	movs	r3, #16
 8006a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a4a:	e042      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a17      	ldr	r2, [pc, #92]	; (8006ab0 <UART_SetConfig+0x2c4>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d13a      	bne.n	8006acc <UART_SetConfig+0x2e0>
 8006a56:	4b18      	ldr	r3, [pc, #96]	; (8006ab8 <UART_SetConfig+0x2cc>)
 8006a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a64:	d01a      	beq.n	8006a9c <UART_SetConfig+0x2b0>
 8006a66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a6a:	d81b      	bhi.n	8006aa4 <UART_SetConfig+0x2b8>
 8006a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a70:	d00c      	beq.n	8006a8c <UART_SetConfig+0x2a0>
 8006a72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a76:	d815      	bhi.n	8006aa4 <UART_SetConfig+0x2b8>
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d003      	beq.n	8006a84 <UART_SetConfig+0x298>
 8006a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a80:	d008      	beq.n	8006a94 <UART_SetConfig+0x2a8>
 8006a82:	e00f      	b.n	8006aa4 <UART_SetConfig+0x2b8>
 8006a84:	2300      	movs	r3, #0
 8006a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a8a:	e022      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a92:	e01e      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 8006a94:	2304      	movs	r3, #4
 8006a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a9a:	e01a      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 8006a9c:	2308      	movs	r3, #8
 8006a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aa2:	e016      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 8006aa4:	2310      	movs	r3, #16
 8006aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aaa:	e012      	b.n	8006ad2 <UART_SetConfig+0x2e6>
 8006aac:	efff69f3 	.word	0xefff69f3
 8006ab0:	40008000 	.word	0x40008000
 8006ab4:	40013800 	.word	0x40013800
 8006ab8:	40021000 	.word	0x40021000
 8006abc:	40004400 	.word	0x40004400
 8006ac0:	40004800 	.word	0x40004800
 8006ac4:	40004c00 	.word	0x40004c00
 8006ac8:	40005000 	.word	0x40005000
 8006acc:	2310      	movs	r3, #16
 8006ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a9f      	ldr	r2, [pc, #636]	; (8006d54 <UART_SetConfig+0x568>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d17a      	bne.n	8006bd2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006adc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	d824      	bhi.n	8006b2e <UART_SetConfig+0x342>
 8006ae4:	a201      	add	r2, pc, #4	; (adr r2, 8006aec <UART_SetConfig+0x300>)
 8006ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aea:	bf00      	nop
 8006aec:	08006b11 	.word	0x08006b11
 8006af0:	08006b2f 	.word	0x08006b2f
 8006af4:	08006b19 	.word	0x08006b19
 8006af8:	08006b2f 	.word	0x08006b2f
 8006afc:	08006b1f 	.word	0x08006b1f
 8006b00:	08006b2f 	.word	0x08006b2f
 8006b04:	08006b2f 	.word	0x08006b2f
 8006b08:	08006b2f 	.word	0x08006b2f
 8006b0c:	08006b27 	.word	0x08006b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b10:	f7fd fd90 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 8006b14:	61f8      	str	r0, [r7, #28]
        break;
 8006b16:	e010      	b.n	8006b3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b18:	4b8f      	ldr	r3, [pc, #572]	; (8006d58 <UART_SetConfig+0x56c>)
 8006b1a:	61fb      	str	r3, [r7, #28]
        break;
 8006b1c:	e00d      	b.n	8006b3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b1e:	f7fd fcf1 	bl	8004504 <HAL_RCC_GetSysClockFreq>
 8006b22:	61f8      	str	r0, [r7, #28]
        break;
 8006b24:	e009      	b.n	8006b3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b2a:	61fb      	str	r3, [r7, #28]
        break;
 8006b2c:	e005      	b.n	8006b3a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 80fb 	beq.w	8006d38 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	685a      	ldr	r2, [r3, #4]
 8006b46:	4613      	mov	r3, r2
 8006b48:	005b      	lsls	r3, r3, #1
 8006b4a:	4413      	add	r3, r2
 8006b4c:	69fa      	ldr	r2, [r7, #28]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d305      	bcc.n	8006b5e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b58:	69fa      	ldr	r2, [r7, #28]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d903      	bls.n	8006b66 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b64:	e0e8      	b.n	8006d38 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	461c      	mov	r4, r3
 8006b6c:	4615      	mov	r5, r2
 8006b6e:	f04f 0200 	mov.w	r2, #0
 8006b72:	f04f 0300 	mov.w	r3, #0
 8006b76:	022b      	lsls	r3, r5, #8
 8006b78:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006b7c:	0222      	lsls	r2, r4, #8
 8006b7e:	68f9      	ldr	r1, [r7, #12]
 8006b80:	6849      	ldr	r1, [r1, #4]
 8006b82:	0849      	lsrs	r1, r1, #1
 8006b84:	2000      	movs	r0, #0
 8006b86:	4688      	mov	r8, r1
 8006b88:	4681      	mov	r9, r0
 8006b8a:	eb12 0a08 	adds.w	sl, r2, r8
 8006b8e:	eb43 0b09 	adc.w	fp, r3, r9
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	603b      	str	r3, [r7, #0]
 8006b9a:	607a      	str	r2, [r7, #4]
 8006b9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ba0:	4650      	mov	r0, sl
 8006ba2:	4659      	mov	r1, fp
 8006ba4:	f7f9 fb6c 	bl	8000280 <__aeabi_uldivmod>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	4613      	mov	r3, r2
 8006bae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bb6:	d308      	bcc.n	8006bca <UART_SetConfig+0x3de>
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bbe:	d204      	bcs.n	8006bca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	69ba      	ldr	r2, [r7, #24]
 8006bc6:	60da      	str	r2, [r3, #12]
 8006bc8:	e0b6      	b.n	8006d38 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006bd0:	e0b2      	b.n	8006d38 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bda:	d15e      	bne.n	8006c9a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006bdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006be0:	2b08      	cmp	r3, #8
 8006be2:	d828      	bhi.n	8006c36 <UART_SetConfig+0x44a>
 8006be4:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <UART_SetConfig+0x400>)
 8006be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bea:	bf00      	nop
 8006bec:	08006c11 	.word	0x08006c11
 8006bf0:	08006c19 	.word	0x08006c19
 8006bf4:	08006c21 	.word	0x08006c21
 8006bf8:	08006c37 	.word	0x08006c37
 8006bfc:	08006c27 	.word	0x08006c27
 8006c00:	08006c37 	.word	0x08006c37
 8006c04:	08006c37 	.word	0x08006c37
 8006c08:	08006c37 	.word	0x08006c37
 8006c0c:	08006c2f 	.word	0x08006c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c10:	f7fd fd10 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 8006c14:	61f8      	str	r0, [r7, #28]
        break;
 8006c16:	e014      	b.n	8006c42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c18:	f7fd fd22 	bl	8004660 <HAL_RCC_GetPCLK2Freq>
 8006c1c:	61f8      	str	r0, [r7, #28]
        break;
 8006c1e:	e010      	b.n	8006c42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c20:	4b4d      	ldr	r3, [pc, #308]	; (8006d58 <UART_SetConfig+0x56c>)
 8006c22:	61fb      	str	r3, [r7, #28]
        break;
 8006c24:	e00d      	b.n	8006c42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c26:	f7fd fc6d 	bl	8004504 <HAL_RCC_GetSysClockFreq>
 8006c2a:	61f8      	str	r0, [r7, #28]
        break;
 8006c2c:	e009      	b.n	8006c42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c32:	61fb      	str	r3, [r7, #28]
        break;
 8006c34:	e005      	b.n	8006c42 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d077      	beq.n	8006d38 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	005a      	lsls	r2, r3, #1
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	085b      	lsrs	r3, r3, #1
 8006c52:	441a      	add	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	2b0f      	cmp	r3, #15
 8006c62:	d916      	bls.n	8006c92 <UART_SetConfig+0x4a6>
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c6a:	d212      	bcs.n	8006c92 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	f023 030f 	bic.w	r3, r3, #15
 8006c74:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	085b      	lsrs	r3, r3, #1
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	f003 0307 	and.w	r3, r3, #7
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	8afb      	ldrh	r3, [r7, #22]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	8afa      	ldrh	r2, [r7, #22]
 8006c8e:	60da      	str	r2, [r3, #12]
 8006c90:	e052      	b.n	8006d38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c98:	e04e      	b.n	8006d38 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c9e:	2b08      	cmp	r3, #8
 8006ca0:	d827      	bhi.n	8006cf2 <UART_SetConfig+0x506>
 8006ca2:	a201      	add	r2, pc, #4	; (adr r2, 8006ca8 <UART_SetConfig+0x4bc>)
 8006ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca8:	08006ccd 	.word	0x08006ccd
 8006cac:	08006cd5 	.word	0x08006cd5
 8006cb0:	08006cdd 	.word	0x08006cdd
 8006cb4:	08006cf3 	.word	0x08006cf3
 8006cb8:	08006ce3 	.word	0x08006ce3
 8006cbc:	08006cf3 	.word	0x08006cf3
 8006cc0:	08006cf3 	.word	0x08006cf3
 8006cc4:	08006cf3 	.word	0x08006cf3
 8006cc8:	08006ceb 	.word	0x08006ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ccc:	f7fd fcb2 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 8006cd0:	61f8      	str	r0, [r7, #28]
        break;
 8006cd2:	e014      	b.n	8006cfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cd4:	f7fd fcc4 	bl	8004660 <HAL_RCC_GetPCLK2Freq>
 8006cd8:	61f8      	str	r0, [r7, #28]
        break;
 8006cda:	e010      	b.n	8006cfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cdc:	4b1e      	ldr	r3, [pc, #120]	; (8006d58 <UART_SetConfig+0x56c>)
 8006cde:	61fb      	str	r3, [r7, #28]
        break;
 8006ce0:	e00d      	b.n	8006cfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ce2:	f7fd fc0f 	bl	8004504 <HAL_RCC_GetSysClockFreq>
 8006ce6:	61f8      	str	r0, [r7, #28]
        break;
 8006ce8:	e009      	b.n	8006cfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cee:	61fb      	str	r3, [r7, #28]
        break;
 8006cf0:	e005      	b.n	8006cfe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006cfc:	bf00      	nop
    }

    if (pclk != 0U)
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d019      	beq.n	8006d38 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	085a      	lsrs	r2, r3, #1
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	441a      	add	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d16:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	2b0f      	cmp	r3, #15
 8006d1c:	d909      	bls.n	8006d32 <UART_SetConfig+0x546>
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d24:	d205      	bcs.n	8006d32 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	60da      	str	r2, [r3, #12]
 8006d30:	e002      	b.n	8006d38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006d44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3728      	adds	r7, #40	; 0x28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d52:	bf00      	nop
 8006d54:	40008000 	.word	0x40008000
 8006d58:	00f42400 	.word	0x00f42400

08006d5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d68:	f003 0308 	and.w	r3, r3, #8
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00a      	beq.n	8006d86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00a      	beq.n	8006da8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	430a      	orrs	r2, r1
 8006da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	f003 0302 	and.w	r3, r3, #2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00a      	beq.n	8006dca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dce:	f003 0304 	and.w	r3, r3, #4
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00a      	beq.n	8006dec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	430a      	orrs	r2, r1
 8006dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	f003 0310 	and.w	r3, r3, #16
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00a      	beq.n	8006e0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e12:	f003 0320 	and.w	r3, r3, #32
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00a      	beq.n	8006e30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d01a      	beq.n	8006e72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e5a:	d10a      	bne.n	8006e72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00a      	beq.n	8006e94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	430a      	orrs	r2, r1
 8006e92:	605a      	str	r2, [r3, #4]
  }
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b098      	sub	sp, #96	; 0x60
 8006ea4:	af02      	add	r7, sp, #8
 8006ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006eb0:	f7fa ffd4 	bl	8001e5c <HAL_GetTick>
 8006eb4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0308 	and.w	r3, r3, #8
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d12e      	bne.n	8006f22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ec4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f88c 	bl	8006ff0 <UART_WaitOnFlagUntilTimeout>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d021      	beq.n	8006f22 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee6:	e853 3f00 	ldrex	r3, [r3]
 8006eea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006efc:	647b      	str	r3, [r7, #68]	; 0x44
 8006efe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f04:	e841 2300 	strex	r3, r2, [r1]
 8006f08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e6      	bne.n	8006ede <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2220      	movs	r2, #32
 8006f14:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e062      	b.n	8006fe8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0304 	and.w	r3, r3, #4
 8006f2c:	2b04      	cmp	r3, #4
 8006f2e:	d149      	bne.n	8006fc4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f856 	bl	8006ff0 <UART_WaitOnFlagUntilTimeout>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d03c      	beq.n	8006fc4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	e853 3f00 	ldrex	r3, [r3]
 8006f56:	623b      	str	r3, [r7, #32]
   return(result);
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	461a      	mov	r2, r3
 8006f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f68:	633b      	str	r3, [r7, #48]	; 0x30
 8006f6a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f70:	e841 2300 	strex	r3, r2, [r1]
 8006f74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1e6      	bne.n	8006f4a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3308      	adds	r3, #8
 8006f82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	e853 3f00 	ldrex	r3, [r3]
 8006f8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f023 0301 	bic.w	r3, r3, #1
 8006f92:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3308      	adds	r3, #8
 8006f9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f9c:	61fa      	str	r2, [r7, #28]
 8006f9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa0:	69b9      	ldr	r1, [r7, #24]
 8006fa2:	69fa      	ldr	r2, [r7, #28]
 8006fa4:	e841 2300 	strex	r3, r2, [r1]
 8006fa8:	617b      	str	r3, [r7, #20]
   return(result);
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1e5      	bne.n	8006f7c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e011      	b.n	8006fe8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3758      	adds	r7, #88	; 0x58
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	603b      	str	r3, [r7, #0]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007000:	e049      	b.n	8007096 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007008:	d045      	beq.n	8007096 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800700a:	f7fa ff27 	bl	8001e5c <HAL_GetTick>
 800700e:	4602      	mov	r2, r0
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	69ba      	ldr	r2, [r7, #24]
 8007016:	429a      	cmp	r2, r3
 8007018:	d302      	bcc.n	8007020 <UART_WaitOnFlagUntilTimeout+0x30>
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e048      	b.n	80070b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0304 	and.w	r3, r3, #4
 800702e:	2b00      	cmp	r3, #0
 8007030:	d031      	beq.n	8007096 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	69db      	ldr	r3, [r3, #28]
 8007038:	f003 0308 	and.w	r3, r3, #8
 800703c:	2b08      	cmp	r3, #8
 800703e:	d110      	bne.n	8007062 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2208      	movs	r2, #8
 8007046:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f000 f838 	bl	80070be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2208      	movs	r2, #8
 8007052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e029      	b.n	80070b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	69db      	ldr	r3, [r3, #28]
 8007068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800706c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007070:	d111      	bne.n	8007096 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800707a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 f81e 	bl	80070be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2220      	movs	r2, #32
 8007086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e00f      	b.n	80070b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	69da      	ldr	r2, [r3, #28]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	4013      	ands	r3, r2
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	bf0c      	ite	eq
 80070a6:	2301      	moveq	r3, #1
 80070a8:	2300      	movne	r3, #0
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	461a      	mov	r2, r3
 80070ae:	79fb      	ldrb	r3, [r7, #7]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d0a6      	beq.n	8007002 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070be:	b480      	push	{r7}
 80070c0:	b095      	sub	sp, #84	; 0x54
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ce:	e853 3f00 	ldrex	r3, [r3]
 80070d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	461a      	mov	r2, r3
 80070e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e4:	643b      	str	r3, [r7, #64]	; 0x40
 80070e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070ec:	e841 2300 	strex	r3, r2, [r1]
 80070f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1e6      	bne.n	80070c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3308      	adds	r3, #8
 80070fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007100:	6a3b      	ldr	r3, [r7, #32]
 8007102:	e853 3f00 	ldrex	r3, [r3]
 8007106:	61fb      	str	r3, [r7, #28]
   return(result);
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	f023 0301 	bic.w	r3, r3, #1
 800710e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3308      	adds	r3, #8
 8007116:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007118:	62fa      	str	r2, [r7, #44]	; 0x2c
 800711a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800711e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007120:	e841 2300 	strex	r3, r2, [r1]
 8007124:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1e5      	bne.n	80070f8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007130:	2b01      	cmp	r3, #1
 8007132:	d118      	bne.n	8007166 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	e853 3f00 	ldrex	r3, [r3]
 8007140:	60bb      	str	r3, [r7, #8]
   return(result);
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	f023 0310 	bic.w	r3, r3, #16
 8007148:	647b      	str	r3, [r7, #68]	; 0x44
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007152:	61bb      	str	r3, [r7, #24]
 8007154:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	6979      	ldr	r1, [r7, #20]
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	613b      	str	r3, [r7, #16]
   return(result);
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1e6      	bne.n	8007134 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2220      	movs	r2, #32
 800716a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	669a      	str	r2, [r3, #104]	; 0x68
}
 800717a:	bf00      	nop
 800717c:	3754      	adds	r7, #84	; 0x54
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007186:	b084      	sub	sp, #16
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	f107 001c 	add.w	r0, r7, #28
 8007194:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fa65 	bl	8007674 <USB_CoreReset>
 80071aa:	4603      	mov	r3, r0
 80071ac:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80071ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d106      	bne.n	80071c2 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	639a      	str	r2, [r3, #56]	; 0x38
 80071c0:	e005      	b.n	80071ce <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071da:	b004      	add	sp, #16
 80071dc:	4770      	bx	lr

080071de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071de:	b480      	push	{r7}
 80071e0:	b083      	sub	sp, #12
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f023 0201 	bic.w	r2, r3, #1
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	460b      	mov	r3, r1
 800720a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800720c:	2300      	movs	r3, #0
 800720e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800721c:	78fb      	ldrb	r3, [r7, #3]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d115      	bne.n	800724e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800722e:	2001      	movs	r0, #1
 8007230:	f7fa fe20 	bl	8001e74 <HAL_Delay>
      ms++;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	3301      	adds	r3, #1
 8007238:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fa0c 	bl	8007658 <USB_GetMode>
 8007240:	4603      	mov	r3, r0
 8007242:	2b01      	cmp	r3, #1
 8007244:	d01e      	beq.n	8007284 <USB_SetCurrentMode+0x84>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2b31      	cmp	r3, #49	; 0x31
 800724a:	d9f0      	bls.n	800722e <USB_SetCurrentMode+0x2e>
 800724c:	e01a      	b.n	8007284 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800724e:	78fb      	ldrb	r3, [r7, #3]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d115      	bne.n	8007280 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007260:	2001      	movs	r0, #1
 8007262:	f7fa fe07 	bl	8001e74 <HAL_Delay>
      ms++;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	3301      	adds	r3, #1
 800726a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f9f3 	bl	8007658 <USB_GetMode>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d005      	beq.n	8007284 <USB_SetCurrentMode+0x84>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2b31      	cmp	r3, #49	; 0x31
 800727c:	d9f0      	bls.n	8007260 <USB_SetCurrentMode+0x60>
 800727e:	e001      	b.n	8007284 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e005      	b.n	8007290 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2b32      	cmp	r3, #50	; 0x32
 8007288:	d101      	bne.n	800728e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e000      	b.n	8007290 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007298:	b084      	sub	sp, #16
 800729a:	b580      	push	{r7, lr}
 800729c:	b086      	sub	sp, #24
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80072a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80072b2:	2300      	movs	r3, #0
 80072b4:	613b      	str	r3, [r7, #16]
 80072b6:	e009      	b.n	80072cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	3340      	adds	r3, #64	; 0x40
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	2200      	movs	r2, #0
 80072c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	3301      	adds	r3, #1
 80072ca:	613b      	str	r3, [r7, #16]
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	2b0e      	cmp	r3, #14
 80072d0:	d9f2      	bls.n	80072b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80072d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d11c      	bne.n	8007312 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072e6:	f043 0302 	orr.w	r3, r3, #2
 80072ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	e005      	b.n	800731e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007316:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007324:	461a      	mov	r2, r3
 8007326:	2300      	movs	r3, #0
 8007328:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800732a:	2103      	movs	r1, #3
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f959 	bl	80075e4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007332:	2110      	movs	r1, #16
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f8f1 	bl	800751c <USB_FlushTxFifo>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d001      	beq.n	8007344 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f91d 	bl	8007584 <USB_FlushRxFifo>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800735a:	461a      	mov	r2, r3
 800735c:	2300      	movs	r3, #0
 800735e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007366:	461a      	mov	r2, r3
 8007368:	2300      	movs	r3, #0
 800736a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007372:	461a      	mov	r2, r3
 8007374:	2300      	movs	r3, #0
 8007376:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007378:	2300      	movs	r3, #0
 800737a:	613b      	str	r3, [r7, #16]
 800737c:	e043      	b.n	8007406 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007390:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007394:	d118      	bne.n	80073c8 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10a      	bne.n	80073b2 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	015a      	lsls	r2, r3, #5
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a8:	461a      	mov	r2, r3
 80073aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073ae:	6013      	str	r3, [r2, #0]
 80073b0:	e013      	b.n	80073da <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073be:	461a      	mov	r2, r3
 80073c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80073c4:	6013      	str	r3, [r2, #0]
 80073c6:	e008      	b.n	80073da <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d4:	461a      	mov	r2, r3
 80073d6:	2300      	movs	r3, #0
 80073d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e6:	461a      	mov	r2, r3
 80073e8:	2300      	movs	r3, #0
 80073ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	015a      	lsls	r2, r3, #5
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	4413      	add	r3, r2
 80073f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f8:	461a      	mov	r2, r3
 80073fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80073fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	3301      	adds	r3, #1
 8007404:	613b      	str	r3, [r7, #16]
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	429a      	cmp	r2, r3
 800740c:	d3b7      	bcc.n	800737e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800740e:	2300      	movs	r3, #0
 8007410:	613b      	str	r3, [r7, #16]
 8007412:	e043      	b.n	800749c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	015a      	lsls	r2, r3, #5
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	4413      	add	r3, r2
 800741c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007426:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800742a:	d118      	bne.n	800745e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10a      	bne.n	8007448 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	015a      	lsls	r2, r3, #5
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	4413      	add	r3, r2
 800743a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800743e:	461a      	mov	r2, r3
 8007440:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007444:	6013      	str	r3, [r2, #0]
 8007446:	e013      	b.n	8007470 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4413      	add	r3, r2
 8007450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007454:	461a      	mov	r2, r3
 8007456:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800745a:	6013      	str	r3, [r2, #0]
 800745c:	e008      	b.n	8007470 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	4413      	add	r3, r2
 8007466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800746a:	461a      	mov	r2, r3
 800746c:	2300      	movs	r3, #0
 800746e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4413      	add	r3, r2
 8007478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800747c:	461a      	mov	r2, r3
 800747e:	2300      	movs	r3, #0
 8007480:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	015a      	lsls	r2, r3, #5
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	4413      	add	r3, r2
 800748a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800748e:	461a      	mov	r2, r3
 8007490:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007494:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	3301      	adds	r3, #1
 800749a:	613b      	str	r3, [r7, #16]
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d3b7      	bcc.n	8007414 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80074c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	f043 0210 	orr.w	r2, r3, #16
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	699a      	ldr	r2, [r3, #24]
 80074d6:	4b10      	ldr	r3, [pc, #64]	; (8007518 <USB_DevInit+0x280>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80074de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d005      	beq.n	80074f0 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	699b      	ldr	r3, [r3, #24]
 80074e8:	f043 0208 	orr.w	r2, r3, #8
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80074f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d107      	bne.n	8007506 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074fe:	f043 0304 	orr.w	r3, r3, #4
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007506:	7dfb      	ldrb	r3, [r7, #23]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3718      	adds	r7, #24
 800750c:	46bd      	mov	sp, r7
 800750e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007512:	b004      	add	sp, #16
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	803c3800 	.word	0x803c3800

0800751c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007526:	2300      	movs	r3, #0
 8007528:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	3301      	adds	r3, #1
 800752e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	4a13      	ldr	r2, [pc, #76]	; (8007580 <USB_FlushTxFifo+0x64>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d901      	bls.n	800753c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e01b      	b.n	8007574 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	daf2      	bge.n	800752a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007544:	2300      	movs	r3, #0
 8007546:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	019b      	lsls	r3, r3, #6
 800754c:	f043 0220 	orr.w	r2, r3, #32
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3301      	adds	r3, #1
 8007558:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	4a08      	ldr	r2, [pc, #32]	; (8007580 <USB_FlushTxFifo+0x64>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d901      	bls.n	8007566 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e006      	b.n	8007574 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	f003 0320 	and.w	r3, r3, #32
 800756e:	2b20      	cmp	r3, #32
 8007570:	d0f0      	beq.n	8007554 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3714      	adds	r7, #20
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr
 8007580:	00030d40 	.word	0x00030d40

08007584 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800758c:	2300      	movs	r3, #0
 800758e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	3301      	adds	r3, #1
 8007594:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	4a11      	ldr	r2, [pc, #68]	; (80075e0 <USB_FlushRxFifo+0x5c>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d901      	bls.n	80075a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e018      	b.n	80075d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	daf2      	bge.n	8007590 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80075aa:	2300      	movs	r3, #0
 80075ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2210      	movs	r2, #16
 80075b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3301      	adds	r3, #1
 80075b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	4a08      	ldr	r2, [pc, #32]	; (80075e0 <USB_FlushRxFifo+0x5c>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d901      	bls.n	80075c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e006      	b.n	80075d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	f003 0310 	and.w	r3, r3, #16
 80075ce:	2b10      	cmp	r3, #16
 80075d0:	d0f0      	beq.n	80075b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr
 80075e0:	00030d40 	.word	0x00030d40

080075e4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	460b      	mov	r3, r1
 80075ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	78fb      	ldrb	r3, [r7, #3]
 80075fe:	68f9      	ldr	r1, [r7, #12]
 8007600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007604:	4313      	orrs	r3, r2
 8007606:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007616:	b480      	push	{r7}
 8007618:	b085      	sub	sp, #20
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007630:	f023 0303 	bic.w	r3, r3, #3
 8007634:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007644:	f043 0302 	orr.w	r3, r3, #2
 8007648:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3714      	adds	r7, #20
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	695b      	ldr	r3, [r3, #20]
 8007664:	f003 0301 	and.w	r3, r3, #1
}
 8007668:	4618      	mov	r0, r3
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800767c:	2300      	movs	r3, #0
 800767e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	3301      	adds	r3, #1
 8007684:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	4a13      	ldr	r2, [pc, #76]	; (80076d8 <USB_CoreReset+0x64>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d901      	bls.n	8007692 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e01b      	b.n	80076ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	daf2      	bge.n	8007680 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800769a:	2300      	movs	r3, #0
 800769c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	f043 0201 	orr.w	r2, r3, #1
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3301      	adds	r3, #1
 80076ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4a09      	ldr	r2, [pc, #36]	; (80076d8 <USB_CoreReset+0x64>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d901      	bls.n	80076bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e006      	b.n	80076ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d0f0      	beq.n	80076aa <USB_CoreReset+0x36>

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	00030d40 	.word	0x00030d40

080076dc <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b08a      	sub	sp, #40	; 0x28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	4603      	mov	r3, r0
 80076e4:	6039      	str	r1, [r7, #0]
 80076e6:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 80076e8:	79fb      	ldrb	r3, [r7, #7]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10b      	bne.n	8007706 <BSP_COM_Init+0x2a>
 80076ee:	4b2d      	ldr	r3, [pc, #180]	; (80077a4 <BSP_COM_Init+0xc8>)
 80076f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076f2:	4a2c      	ldr	r2, [pc, #176]	; (80077a4 <BSP_COM_Init+0xc8>)
 80076f4:	f043 0302 	orr.w	r3, r3, #2
 80076f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80076fa:	4b2a      	ldr	r3, [pc, #168]	; (80077a4 <BSP_COM_Init+0xc8>)
 80076fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076fe:	f003 0302 	and.w	r3, r3, #2
 8007702:	613b      	str	r3, [r7, #16]
 8007704:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8007706:	79fb      	ldrb	r3, [r7, #7]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10b      	bne.n	8007724 <BSP_COM_Init+0x48>
 800770c:	4b25      	ldr	r3, [pc, #148]	; (80077a4 <BSP_COM_Init+0xc8>)
 800770e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007710:	4a24      	ldr	r2, [pc, #144]	; (80077a4 <BSP_COM_Init+0xc8>)
 8007712:	f043 0302 	orr.w	r3, r3, #2
 8007716:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007718:	4b22      	ldr	r3, [pc, #136]	; (80077a4 <BSP_COM_Init+0xc8>)
 800771a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800771c:	f003 0302 	and.w	r3, r3, #2
 8007720:	60fb      	str	r3, [r7, #12]
 8007722:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8007724:	79fb      	ldrb	r3, [r7, #7]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10b      	bne.n	8007742 <BSP_COM_Init+0x66>
 800772a:	4b1e      	ldr	r3, [pc, #120]	; (80077a4 <BSP_COM_Init+0xc8>)
 800772c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800772e:	4a1d      	ldr	r2, [pc, #116]	; (80077a4 <BSP_COM_Init+0xc8>)
 8007730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007734:	6613      	str	r3, [r2, #96]	; 0x60
 8007736:	4b1b      	ldr	r3, [pc, #108]	; (80077a4 <BSP_COM_Init+0xc8>)
 8007738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800773a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800773e:	60bb      	str	r3, [r7, #8]
 8007740:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8007742:	2340      	movs	r3, #64	; 0x40
 8007744:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8007746:	2302      	movs	r3, #2
 8007748:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800774a:	2302      	movs	r3, #2
 800774c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800774e:	2300      	movs	r3, #0
 8007750:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8007752:	2307      	movs	r3, #7
 8007754:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8007756:	79fb      	ldrb	r3, [r7, #7]
 8007758:	4a13      	ldr	r2, [pc, #76]	; (80077a8 <BSP_COM_Init+0xcc>)
 800775a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800775e:	f107 0214 	add.w	r2, r7, #20
 8007762:	4611      	mov	r1, r2
 8007764:	4618      	mov	r0, r3
 8007766:	f7fa fe3b 	bl	80023e0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 800776a:	2380      	movs	r3, #128	; 0x80
 800776c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800776e:	2302      	movs	r3, #2
 8007770:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8007772:	2307      	movs	r3, #7
 8007774:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8007776:	79fb      	ldrb	r3, [r7, #7]
 8007778:	4a0c      	ldr	r2, [pc, #48]	; (80077ac <BSP_COM_Init+0xd0>)
 800777a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800777e:	f107 0214 	add.w	r2, r7, #20
 8007782:	4611      	mov	r1, r2
 8007784:	4618      	mov	r0, r3
 8007786:	f7fa fe2b 	bl	80023e0 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 800778a:	79fb      	ldrb	r3, [r7, #7]
 800778c:	4a08      	ldr	r2, [pc, #32]	; (80077b0 <BSP_COM_Init+0xd4>)
 800778e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8007796:	6838      	ldr	r0, [r7, #0]
 8007798:	f7fe ffd9 	bl	800674e <HAL_UART_Init>
}
 800779c:	bf00      	nop
 800779e:	3728      	adds	r7, #40	; 0x28
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	40021000 	.word	0x40021000
 80077a8:	20000010 	.word	0x20000010
 80077ac:	20000014 	.word	0x20000014
 80077b0:	2000000c 	.word	0x2000000c

080077b4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b08a      	sub	sp, #40	; 0x28
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80077bc:	4b27      	ldr	r3, [pc, #156]	; (800785c <I2Cx_MspInit+0xa8>)
 80077be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077c0:	4a26      	ldr	r2, [pc, #152]	; (800785c <I2Cx_MspInit+0xa8>)
 80077c2:	f043 0302 	orr.w	r3, r3, #2
 80077c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80077c8:	4b24      	ldr	r3, [pc, #144]	; (800785c <I2Cx_MspInit+0xa8>)
 80077ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077cc:	f003 0302 	and.w	r3, r3, #2
 80077d0:	613b      	str	r3, [r7, #16]
 80077d2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80077d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80077d8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80077da:	2312      	movs	r3, #18
 80077dc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80077de:	2301      	movs	r3, #1
 80077e0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077e2:	2303      	movs	r3, #3
 80077e4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80077e6:	2304      	movs	r3, #4
 80077e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80077ea:	f107 0314 	add.w	r3, r7, #20
 80077ee:	4619      	mov	r1, r3
 80077f0:	481b      	ldr	r0, [pc, #108]	; (8007860 <I2Cx_MspInit+0xac>)
 80077f2:	f7fa fdf5 	bl	80023e0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80077f6:	f107 0314 	add.w	r3, r7, #20
 80077fa:	4619      	mov	r1, r3
 80077fc:	4818      	ldr	r0, [pc, #96]	; (8007860 <I2Cx_MspInit+0xac>)
 80077fe:	f7fa fdef 	bl	80023e0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8007802:	4b16      	ldr	r3, [pc, #88]	; (800785c <I2Cx_MspInit+0xa8>)
 8007804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007806:	4a15      	ldr	r2, [pc, #84]	; (800785c <I2Cx_MspInit+0xa8>)
 8007808:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800780c:	6593      	str	r3, [r2, #88]	; 0x58
 800780e:	4b13      	ldr	r3, [pc, #76]	; (800785c <I2Cx_MspInit+0xa8>)
 8007810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800781a:	4b10      	ldr	r3, [pc, #64]	; (800785c <I2Cx_MspInit+0xa8>)
 800781c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781e:	4a0f      	ldr	r2, [pc, #60]	; (800785c <I2Cx_MspInit+0xa8>)
 8007820:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007824:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8007826:	4b0d      	ldr	r3, [pc, #52]	; (800785c <I2Cx_MspInit+0xa8>)
 8007828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782a:	4a0c      	ldr	r2, [pc, #48]	; (800785c <I2Cx_MspInit+0xa8>)
 800782c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007830:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8007832:	2200      	movs	r2, #0
 8007834:	210f      	movs	r1, #15
 8007836:	2021      	movs	r0, #33	; 0x21
 8007838:	f7fa fc3f 	bl	80020ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800783c:	2021      	movs	r0, #33	; 0x21
 800783e:	f7fa fc58 	bl	80020f2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8007842:	2200      	movs	r2, #0
 8007844:	210f      	movs	r1, #15
 8007846:	2022      	movs	r0, #34	; 0x22
 8007848:	f7fa fc37 	bl	80020ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800784c:	2022      	movs	r0, #34	; 0x22
 800784e:	f7fa fc50 	bl	80020f2 <HAL_NVIC_EnableIRQ>
}
 8007852:	bf00      	nop
 8007854:	3728      	adds	r7, #40	; 0x28
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	40021000 	.word	0x40021000
 8007860:	48000400 	.word	0x48000400

08007864 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a12      	ldr	r2, [pc, #72]	; (80078b8 <I2Cx_Init+0x54>)
 8007870:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a11      	ldr	r2, [pc, #68]	; (80078bc <I2Cx_Init+0x58>)
 8007876:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7ff ff89 	bl	80077b4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7fb f882 	bl	80029ac <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80078a8:	2100      	movs	r1, #0
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7fb fe2e 	bl	800350c <HAL_I2CEx_ConfigAnalogFilter>
}
 80078b0:	bf00      	nop
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	40005800 	.word	0x40005800
 80078bc:	00702681 	.word	0x00702681

080078c0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b08a      	sub	sp, #40	; 0x28
 80078c4:	af04      	add	r7, sp, #16
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	4608      	mov	r0, r1
 80078ca:	4611      	mov	r1, r2
 80078cc:	461a      	mov	r2, r3
 80078ce:	4603      	mov	r3, r0
 80078d0:	72fb      	strb	r3, [r7, #11]
 80078d2:	460b      	mov	r3, r1
 80078d4:	813b      	strh	r3, [r7, #8]
 80078d6:	4613      	mov	r3, r2
 80078d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80078de:	7afb      	ldrb	r3, [r7, #11]
 80078e0:	b299      	uxth	r1, r3
 80078e2:	88f8      	ldrh	r0, [r7, #6]
 80078e4:	893a      	ldrh	r2, [r7, #8]
 80078e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80078ea:	9302      	str	r3, [sp, #8]
 80078ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078ee:	9301      	str	r3, [sp, #4]
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	9300      	str	r3, [sp, #0]
 80078f4:	4603      	mov	r3, r0
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f7fb fa36 	bl	8002d68 <HAL_I2C_Mem_Read>
 80078fc:	4603      	mov	r3, r0
 80078fe:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8007900:	7dfb      	ldrb	r3, [r7, #23]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d004      	beq.n	8007910 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8007906:	7afb      	ldrb	r3, [r7, #11]
 8007908:	4619      	mov	r1, r3
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f000 f832 	bl	8007974 <I2Cx_Error>
  }
  return status;
 8007910:	7dfb      	ldrb	r3, [r7, #23]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3718      	adds	r7, #24
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b08a      	sub	sp, #40	; 0x28
 800791e:	af04      	add	r7, sp, #16
 8007920:	60f8      	str	r0, [r7, #12]
 8007922:	4608      	mov	r0, r1
 8007924:	4611      	mov	r1, r2
 8007926:	461a      	mov	r2, r3
 8007928:	4603      	mov	r3, r0
 800792a:	72fb      	strb	r3, [r7, #11]
 800792c:	460b      	mov	r3, r1
 800792e:	813b      	strh	r3, [r7, #8]
 8007930:	4613      	mov	r3, r2
 8007932:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8007938:	7afb      	ldrb	r3, [r7, #11]
 800793a:	b299      	uxth	r1, r3
 800793c:	88f8      	ldrh	r0, [r7, #6]
 800793e:	893a      	ldrh	r2, [r7, #8]
 8007940:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007944:	9302      	str	r3, [sp, #8]
 8007946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007948:	9301      	str	r3, [sp, #4]
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	4603      	mov	r3, r0
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f7fb f8f5 	bl	8002b40 <HAL_I2C_Mem_Write>
 8007956:	4603      	mov	r3, r0
 8007958:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800795a:	7dfb      	ldrb	r3, [r7, #23]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d004      	beq.n	800796a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8007960:	7afb      	ldrb	r3, [r7, #11]
 8007962:	4619      	mov	r1, r3
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 f805 	bl	8007974 <I2Cx_Error>
  }
  return status;
 800796a:	7dfb      	ldrb	r3, [r7, #23]
}
 800796c:	4618      	mov	r0, r3
 800796e:	3718      	adds	r7, #24
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	460b      	mov	r3, r1
 800797e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7fb f8ae 	bl	8002ae2 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7ff ff6c 	bl	8007864 <I2Cx_Init>
}
 800798c:	bf00      	nop
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8007998:	4802      	ldr	r0, [pc, #8]	; (80079a4 <SENSOR_IO_Init+0x10>)
 800799a:	f7ff ff63 	bl	8007864 <I2Cx_Init>
}
 800799e:	bf00      	nop
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	20001434 	.word	0x20001434

080079a8 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af02      	add	r7, sp, #8
 80079ae:	4603      	mov	r3, r0
 80079b0:	71fb      	strb	r3, [r7, #7]
 80079b2:	460b      	mov	r3, r1
 80079b4:	71bb      	strb	r3, [r7, #6]
 80079b6:	4613      	mov	r3, r2
 80079b8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80079ba:	79bb      	ldrb	r3, [r7, #6]
 80079bc:	b29a      	uxth	r2, r3
 80079be:	79f9      	ldrb	r1, [r7, #7]
 80079c0:	2301      	movs	r3, #1
 80079c2:	9301      	str	r3, [sp, #4]
 80079c4:	1d7b      	adds	r3, r7, #5
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	2301      	movs	r3, #1
 80079ca:	4803      	ldr	r0, [pc, #12]	; (80079d8 <SENSOR_IO_Write+0x30>)
 80079cc:	f7ff ffa5 	bl	800791a <I2Cx_WriteMultiple>
}
 80079d0:	bf00      	nop
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	20001434 	.word	0x20001434

080079dc <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af02      	add	r7, sp, #8
 80079e2:	4603      	mov	r3, r0
 80079e4:	460a      	mov	r2, r1
 80079e6:	71fb      	strb	r3, [r7, #7]
 80079e8:	4613      	mov	r3, r2
 80079ea:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80079ec:	2300      	movs	r3, #0
 80079ee:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80079f0:	79bb      	ldrb	r3, [r7, #6]
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	79f9      	ldrb	r1, [r7, #7]
 80079f6:	2301      	movs	r3, #1
 80079f8:	9301      	str	r3, [sp, #4]
 80079fa:	f107 030f 	add.w	r3, r7, #15
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	2301      	movs	r3, #1
 8007a02:	4804      	ldr	r0, [pc, #16]	; (8007a14 <SENSOR_IO_Read+0x38>)
 8007a04:	f7ff ff5c 	bl	80078c0 <I2Cx_ReadMultiple>

  return read_value;
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	20001434 	.word	0x20001434

08007a18 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af02      	add	r7, sp, #8
 8007a1e:	603a      	str	r2, [r7, #0]
 8007a20:	461a      	mov	r2, r3
 8007a22:	4603      	mov	r3, r0
 8007a24:	71fb      	strb	r3, [r7, #7]
 8007a26:	460b      	mov	r3, r1
 8007a28:	71bb      	strb	r3, [r7, #6]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8007a2e:	79bb      	ldrb	r3, [r7, #6]
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	79f9      	ldrb	r1, [r7, #7]
 8007a34:	88bb      	ldrh	r3, [r7, #4]
 8007a36:	9301      	str	r3, [sp, #4]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	9300      	str	r3, [sp, #0]
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	4804      	ldr	r0, [pc, #16]	; (8007a50 <SENSOR_IO_ReadMultiple+0x38>)
 8007a40:	f7ff ff3e 	bl	80078c0 <I2Cx_ReadMultiple>
 8007a44:	4603      	mov	r3, r0
 8007a46:	b29b      	uxth	r3, r3
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	20001434 	.word	0x20001434

08007a54 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8007a5e:	4b09      	ldr	r3, [pc, #36]	; (8007a84 <BSP_TSENSOR_Init+0x30>)
 8007a60:	4a09      	ldr	r2, [pc, #36]	; (8007a88 <BSP_TSENSOR_Init+0x34>)
 8007a62:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8007a64:	f7ff ff96 	bl	8007994 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8007a68:	4b06      	ldr	r3, [pc, #24]	; (8007a84 <BSP_TSENSOR_Init+0x30>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2100      	movs	r1, #0
 8007a70:	20be      	movs	r0, #190	; 0xbe
 8007a72:	4798      	blx	r3

  ret = TSENSOR_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8007a78:	79fb      	ldrb	r3, [r7, #7]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20001510 	.word	0x20001510
 8007a88:	20000018 	.word	0x20000018

08007a8c <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	4603      	mov	r3, r0
 8007a94:	6039      	str	r1, [r7, #0]
 8007a96:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8007a98:	88fb      	ldrh	r3, [r7, #6]
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2120      	movs	r1, #32
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7ff ff9c 	bl	80079dc <SENSOR_IO_Read>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
 8007aaa:	f023 0304 	bic.w	r3, r3, #4
 8007aae:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
 8007ab2:	f043 0304 	orr.w	r3, r3, #4
 8007ab6:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8007ab8:	7bfb      	ldrb	r3, [r7, #15]
 8007aba:	f023 0303 	bic.w	r3, r3, #3
 8007abe:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
 8007ac2:	f043 0301 	orr.w	r3, r3, #1
 8007ac6:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
 8007aca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ace:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8007ad0:	88fb      	ldrh	r3, [r7, #6]
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	7bfa      	ldrb	r2, [r7, #15]
 8007ad6:	2120      	movs	r1, #32
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7ff ff65 	bl	80079a8 <SENSOR_IO_Write>
}
 8007ade:	bf00      	nop
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b088      	sub	sp, #32
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	4603      	mov	r3, r0
 8007aee:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8007af0:	88fb      	ldrh	r3, [r7, #6]
 8007af2:	b2d8      	uxtb	r0, r3
 8007af4:	f107 0208 	add.w	r2, r7, #8
 8007af8:	2302      	movs	r3, #2
 8007afa:	21b2      	movs	r1, #178	; 0xb2
 8007afc:	f7ff ff8c 	bl	8007a18 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8007b00:	88fb      	ldrh	r3, [r7, #6]
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	2135      	movs	r1, #53	; 0x35
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7ff ff68 	bl	80079dc <SENSOR_IO_Read>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8007b10:	7ffb      	ldrb	r3, [r7, #31]
 8007b12:	021b      	lsls	r3, r3, #8
 8007b14:	b21b      	sxth	r3, r3
 8007b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b1a:	b21a      	sxth	r2, r3
 8007b1c:	7a3b      	ldrb	r3, [r7, #8]
 8007b1e:	b21b      	sxth	r3, r3
 8007b20:	4313      	orrs	r3, r2
 8007b22:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8007b24:	7ffb      	ldrb	r3, [r7, #31]
 8007b26:	019b      	lsls	r3, r3, #6
 8007b28:	b21b      	sxth	r3, r3
 8007b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b2e:	b21a      	sxth	r2, r3
 8007b30:	7a7b      	ldrb	r3, [r7, #9]
 8007b32:	b21b      	sxth	r3, r3
 8007b34:	4313      	orrs	r3, r2
 8007b36:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8007b38:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007b3c:	10db      	asrs	r3, r3, #3
 8007b3e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8007b40:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007b44:	10db      	asrs	r3, r3, #3
 8007b46:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8007b48:	88fb      	ldrh	r3, [r7, #6]
 8007b4a:	b2d8      	uxtb	r0, r3
 8007b4c:	f107 0208 	add.w	r2, r7, #8
 8007b50:	2304      	movs	r3, #4
 8007b52:	21bc      	movs	r1, #188	; 0xbc
 8007b54:	f7ff ff60 	bl	8007a18 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8007b58:	7a7b      	ldrb	r3, [r7, #9]
 8007b5a:	021b      	lsls	r3, r3, #8
 8007b5c:	b21a      	sxth	r2, r3
 8007b5e:	7a3b      	ldrb	r3, [r7, #8]
 8007b60:	b21b      	sxth	r3, r3
 8007b62:	4313      	orrs	r3, r2
 8007b64:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8007b66:	7afb      	ldrb	r3, [r7, #11]
 8007b68:	021b      	lsls	r3, r3, #8
 8007b6a:	b21a      	sxth	r2, r3
 8007b6c:	7abb      	ldrb	r3, [r7, #10]
 8007b6e:	b21b      	sxth	r3, r3
 8007b70:	4313      	orrs	r3, r2
 8007b72:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8007b74:	88fb      	ldrh	r3, [r7, #6]
 8007b76:	b2d8      	uxtb	r0, r3
 8007b78:	f107 0208 	add.w	r2, r7, #8
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	21aa      	movs	r1, #170	; 0xaa
 8007b80:	f7ff ff4a 	bl	8007a18 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8007b84:	7a7b      	ldrb	r3, [r7, #9]
 8007b86:	021b      	lsls	r3, r3, #8
 8007b88:	b21a      	sxth	r2, r3
 8007b8a:	7a3b      	ldrb	r3, [r7, #8]
 8007b8c:	b21b      	sxth	r3, r3
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8007b92:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8007b96:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	ee07 3a90 	vmov	s15, r3
 8007ba0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007ba4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007ba8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	ee07 3a90 	vmov	s15, r3
 8007bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bb6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8007bba:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007bbe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	ee07 3a90 	vmov	s15, r3
 8007bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bd0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007bd4:	ee07 3a90 	vmov	s15, r3
 8007bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007be0:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	ee07 3a90 	vmov	s15, r3
}
 8007bea:	eeb0 0a67 	vmov.f32	s0, s15
 8007bee:	3720      	adds	r7, #32
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <Hex2Num>:
  * @brief  Convert char in Hex format to integer.
  * @param  a: character to convert
  * @retval integer value.
  */
static  uint8_t Hex2Num(char a)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8007bfe:	79fb      	ldrb	r3, [r7, #7]
 8007c00:	2b2f      	cmp	r3, #47	; 0x2f
 8007c02:	d906      	bls.n	8007c12 <Hex2Num+0x1e>
 8007c04:	79fb      	ldrb	r3, [r7, #7]
 8007c06:	2b39      	cmp	r3, #57	; 0x39
 8007c08:	d803      	bhi.n	8007c12 <Hex2Num+0x1e>
        return a - '0';
 8007c0a:	79fb      	ldrb	r3, [r7, #7]
 8007c0c:	3b30      	subs	r3, #48	; 0x30
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	e014      	b.n	8007c3c <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8007c12:	79fb      	ldrb	r3, [r7, #7]
 8007c14:	2b60      	cmp	r3, #96	; 0x60
 8007c16:	d906      	bls.n	8007c26 <Hex2Num+0x32>
 8007c18:	79fb      	ldrb	r3, [r7, #7]
 8007c1a:	2b66      	cmp	r3, #102	; 0x66
 8007c1c:	d803      	bhi.n	8007c26 <Hex2Num+0x32>
        return (a - 'a') + 10;
 8007c1e:	79fb      	ldrb	r3, [r7, #7]
 8007c20:	3b57      	subs	r3, #87	; 0x57
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	e00a      	b.n	8007c3c <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8007c26:	79fb      	ldrb	r3, [r7, #7]
 8007c28:	2b40      	cmp	r3, #64	; 0x40
 8007c2a:	d906      	bls.n	8007c3a <Hex2Num+0x46>
 8007c2c:	79fb      	ldrb	r3, [r7, #7]
 8007c2e:	2b46      	cmp	r3, #70	; 0x46
 8007c30:	d803      	bhi.n	8007c3a <Hex2Num+0x46>
        return (a - 'A') + 10;
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	3b37      	subs	r3, #55	; 0x37
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	e000      	b.n	8007c3c <Hex2Num+0x48>
    }

    return 0;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint8_t ParseHexNumber(const char *ptr, uint8_t *cnt)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 8007c52:	2300      	movs	r3, #0
 8007c54:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8007c56:	2300      	movs	r3, #0
 8007c58:	73bb      	strb	r3, [r7, #14]

    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8007c5a:	e012      	b.n	8007c82 <ParseHexNumber+0x3a>
        sum <<= 4;
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
 8007c5e:	011b      	lsls	r3, r3, #4
 8007c60:	73fb      	strb	r3, [r7, #15]
        sum += Hex2Num(*ptr);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7ff ffc4 	bl	8007bf4 <Hex2Num>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	461a      	mov	r2, r3
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
 8007c72:	4413      	add	r3, r2
 8007c74:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	607b      	str	r3, [r7, #4]
        done_count++;
 8007c7c:	7bbb      	ldrb	r3, [r7, #14]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	73bb      	strb	r3, [r7, #14]
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	2b2f      	cmp	r3, #47	; 0x2f
 8007c88:	d903      	bls.n	8007c92 <ParseHexNumber+0x4a>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	2b39      	cmp	r3, #57	; 0x39
 8007c90:	d90f      	bls.n	8007cb2 <ParseHexNumber+0x6a>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	2b60      	cmp	r3, #96	; 0x60
 8007c98:	d903      	bls.n	8007ca2 <ParseHexNumber+0x5a>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	2b66      	cmp	r3, #102	; 0x66
 8007ca0:	d907      	bls.n	8007cb2 <ParseHexNumber+0x6a>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	2b40      	cmp	r3, #64	; 0x40
 8007ca8:	d906      	bls.n	8007cb8 <ParseHexNumber+0x70>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	2b46      	cmp	r3, #70	; 0x46
 8007cb0:	d802      	bhi.n	8007cb8 <ParseHexNumber+0x70>
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d9d1      	bls.n	8007c5c <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d002      	beq.n	8007cc4 <ParseHexNumber+0x7c>
        *cnt = done_count;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	7bba      	ldrb	r2, [r7, #14]
 8007cc2:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                             /* Return number */
 8007cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b085      	sub	sp, #20
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	2b2d      	cmp	r3, #45	; 0x2d
 8007cea:	d119      	bne.n	8007d20 <ParseNumber+0x52>
        minus = 1;
 8007cec:	2301      	movs	r3, #1
 8007cee:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	607b      	str	r3, [r7, #4]
        done_count++;
 8007cf6:	7bbb      	ldrb	r3, [r7, #14]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8007cfc:	e010      	b.n	8007d20 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	4613      	mov	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4413      	add	r3, r2
 8007d06:	005b      	lsls	r3, r3, #1
 8007d08:	461a      	mov	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	3b30      	subs	r3, #48	; 0x30
 8007d10:	4413      	add	r3, r2
 8007d12:	60bb      	str	r3, [r7, #8]
        ptr++;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	3301      	adds	r3, #1
 8007d18:	607b      	str	r3, [r7, #4]
        done_count++;
 8007d1a:	7bbb      	ldrb	r3, [r7, #14]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	2b2f      	cmp	r3, #47	; 0x2f
 8007d26:	d903      	bls.n	8007d30 <ParseNumber+0x62>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	2b39      	cmp	r3, #57	; 0x39
 8007d2e:	d9e6      	bls.n	8007cfe <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d002      	beq.n	8007d3c <ParseNumber+0x6e>
        *cnt = done_count;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	7bba      	ldrb	r2, [r7, #14]
 8007d3a:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d002      	beq.n	8007d48 <ParseNumber+0x7a>
        return 0 - sum;
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	425b      	negs	r3, r3
 8007d46:	e000      	b.n	8007d4a <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 8007d48:	68bb      	ldr	r3, [r7, #8]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <ParseMAC>:
  * @param  Mac: pointer to MAC-48 array
  * @param  MacSize: the size of the MAC array
  * @retval None.
  */
static void ParseMAC(const char *ptr, uint8_t Mac[], size_t MacSize)
{
 8007d56:	b590      	push	{r4, r7, lr}
 8007d58:	b087      	sub	sp, #28
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	60f8      	str	r0, [r7, #12]
 8007d5e:	60b9      	str	r1, [r7, #8]
 8007d60:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8007d62:	2300      	movs	r3, #0
 8007d64:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (Mac != NULL))
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d027      	beq.n	8007dbc <ParseMAC+0x66>
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d024      	beq.n	8007dbc <ParseMAC+0x66>
  {
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8007d72:	e018      	b.n	8007da6 <ParseMAC+0x50>
    uint8_t done_count = 1;
 8007d74:	2301      	movs	r3, #1
 8007d76:	75bb      	strb	r3, [r7, #22]
    if (*ptr != ':')
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	2b3a      	cmp	r3, #58	; 0x3a
 8007d7e:	d00d      	beq.n	8007d9c <ParseMAC+0x46>
    {
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 8007d80:	7dfb      	ldrb	r3, [r7, #23]
 8007d82:	1c5a      	adds	r2, r3, #1
 8007d84:	75fa      	strb	r2, [r7, #23]
 8007d86:	461a      	mov	r2, r3
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	189c      	adds	r4, r3, r2
 8007d8c:	f107 0316 	add.w	r3, r7, #22
 8007d90:	4619      	mov	r1, r3
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f7ff ff58 	bl	8007c48 <ParseHexNumber>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	7023      	strb	r3, [r4, #0]
    }
    ptr = ptr + done_count;
 8007d9c:	7dbb      	ldrb	r3, [r7, #22]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	4413      	add	r3, r2
 8007da4:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8007da6:	7dfb      	ldrb	r3, [r7, #23]
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d906      	bls.n	8007dbc <ParseMAC+0x66>
 8007dae:	7dfb      	ldrb	r3, [r7, #23]
 8007db0:	2b05      	cmp	r3, #5
 8007db2:	d803      	bhi.n	8007dbc <ParseMAC+0x66>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1db      	bne.n	8007d74 <ParseMAC+0x1e>
   }
  }
}
 8007dbc:	bf00      	nop
 8007dbe:	371c      	adds	r7, #28
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd90      	pop	{r4, r7, pc}

08007dc4 <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d027      	beq.n	8007e2a <ParseIP+0x66>
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d024      	beq.n	8007e2a <ParseIP+0x66>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d921      	bls.n	8007e2a <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8007de6:	e019      	b.n	8007e1c <ParseIP+0x58>
    uint8_t done_count = 1;
 8007de8:	2301      	movs	r3, #1
 8007dea:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	2b2e      	cmp	r3, #46	; 0x2e
 8007df2:	d00e      	beq.n	8007e12 <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 8007df4:	f107 0316 	add.w	r3, r7, #22
 8007df8:	4619      	mov	r1, r3
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f7ff ff67 	bl	8007cce <ParseNumber>
 8007e00:	4601      	mov	r1, r0
 8007e02:	7dfb      	ldrb	r3, [r7, #23]
 8007e04:	1c5a      	adds	r2, r3, #1
 8007e06:	75fa      	strb	r2, [r7, #23]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	b2ca      	uxtb	r2, r1
 8007e10:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 8007e12:	7dbb      	ldrb	r3, [r7, #22]
 8007e14:	461a      	mov	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	4413      	add	r3, r2
 8007e1a:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8007e1c:	7dfb      	ldrb	r3, [r7, #23]
 8007e1e:	2b03      	cmp	r3, #3
 8007e20:	d803      	bhi.n	8007e2a <ParseIP+0x66>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1de      	bne.n	8007de8 <ParseIP+0x24>
   }
  }
}
 8007e2a:	bf00      	nop
 8007e2c:	3718      	adds	r7, #24
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
	...

08007e34 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	3302      	adds	r3, #2
 8007e46:	4940      	ldr	r1, [pc, #256]	; (8007f48 <AT_ParseInfo+0x114>)
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f004 fd5b 	bl	800c904 <strtok>
 8007e4e:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8007e50:	e071      	b.n	8007f36 <AT_ParseInfo+0x102>
    switch (num++) {
 8007e52:	7afb      	ldrb	r3, [r7, #11]
 8007e54:	1c5a      	adds	r2, r3, #1
 8007e56:	72fa      	strb	r2, [r7, #11]
 8007e58:	2b06      	cmp	r3, #6
 8007e5a:	d866      	bhi.n	8007f2a <AT_ParseInfo+0xf6>
 8007e5c:	a201      	add	r2, pc, #4	; (adr r2, 8007e64 <AT_ParseInfo+0x30>)
 8007e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e62:	bf00      	nop
 8007e64:	08007e81 	.word	0x08007e81
 8007e68:	08007e95 	.word	0x08007e95
 8007e6c:	08007ead 	.word	0x08007ead
 8007e70:	08007ec5 	.word	0x08007ec5
 8007e74:	08007edd 	.word	0x08007edd
 8007e78:	08007ef5 	.word	0x08007ef5
 8007e7c:	08007f09 	.word	0x08007f09
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	221f      	movs	r2, #31
 8007e84:	68f9      	ldr	r1, [r7, #12]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f004 fd29 	bl	800c8de <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	77da      	strb	r2, [r3, #31]
      break;
 8007e92:	e04b      	b.n	8007f2c <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	3320      	adds	r3, #32
 8007e98:	2217      	movs	r2, #23
 8007e9a:	68f9      	ldr	r1, [r7, #12]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f004 fd1e 	bl	800c8de <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
      break;
 8007eaa:	e03f      	b.n	8007f2c <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	3338      	adds	r3, #56	; 0x38
 8007eb0:	220f      	movs	r2, #15
 8007eb2:	68f9      	ldr	r1, [r7, #12]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f004 fd12 	bl	800c8de <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8007ec2:	e033      	b.n	8007f2c <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	3348      	adds	r3, #72	; 0x48
 8007ec8:	220f      	movs	r2, #15
 8007eca:	68f9      	ldr	r1, [r7, #12]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f004 fd06 	bl	800c8de <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
      break;
 8007eda:	e027      	b.n	8007f2c <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	3358      	adds	r3, #88	; 0x58
 8007ee0:	220f      	movs	r2, #15
 8007ee2:	68f9      	ldr	r1, [r7, #12]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f004 fcfa 	bl	800c8de <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      break;
 8007ef2:	e01b      	b.n	8007f2c <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f7ff fee9 	bl	8007cce <ParseNumber>
 8007efc:	4603      	mov	r3, r0
 8007efe:	461a      	mov	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8007f06:	e011      	b.n	8007f2c <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 8007f08:	4910      	ldr	r1, [pc, #64]	; (8007f4c <AT_ParseInfo+0x118>)
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f004 fcfa 	bl	800c904 <strtok>
 8007f10:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	3368      	adds	r3, #104	; 0x68
 8007f16:	221f      	movs	r2, #31
 8007f18:	68f9      	ldr	r1, [r7, #12]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f004 fcdf 	bl	800c8de <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
      break;
 8007f28:	e000      	b.n	8007f2c <AT_ParseInfo+0xf8>

    default: break;
 8007f2a:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8007f2c:	4906      	ldr	r1, [pc, #24]	; (8007f48 <AT_ParseInfo+0x114>)
 8007f2e:	2000      	movs	r0, #0
 8007f30:	f004 fce8 	bl	800c904 <strtok>
 8007f34:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d18a      	bne.n	8007e52 <AT_ParseInfo+0x1e>
  }
}
 8007f3c:	bf00      	nop
 8007f3e:	bf00      	nop
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	0800dfac 	.word	0x0800dfac
 8007f4c:	0800dfb0 	.word	0x0800dfb0

08007f50 <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	3302      	adds	r3, #2
 8007f62:	4959      	ldr	r1, [pc, #356]	; (80080c8 <AT_ParseConnSettings+0x178>)
 8007f64:	4618      	mov	r0, r3
 8007f66:	f004 fccd 	bl	800c904 <strtok>
 8007f6a:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8007f6c:	e0a2      	b.n	80080b4 <AT_ParseConnSettings+0x164>
    switch (num++) {
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
 8007f70:	1c5a      	adds	r2, r3, #1
 8007f72:	73fa      	strb	r2, [r7, #15]
 8007f74:	2b0b      	cmp	r3, #11
 8007f76:	f200 808c 	bhi.w	8008092 <AT_ParseConnSettings+0x142>
 8007f7a:	a201      	add	r2, pc, #4	; (adr r2, 8007f80 <AT_ParseConnSettings+0x30>)
 8007f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f80:	08007fb1 	.word	0x08007fb1
 8007f84:	08007fc7 	.word	0x08007fc7
 8007f88:	08007fdf 	.word	0x08007fdf
 8007f8c:	08007ff3 	.word	0x08007ff3
 8007f90:	08008007 	.word	0x08008007
 8007f94:	0800801b 	.word	0x0800801b
 8007f98:	0800802b 	.word	0x0800802b
 8007f9c:	0800803b 	.word	0x0800803b
 8007fa0:	0800804b 	.word	0x0800804b
 8007fa4:	0800805b 	.word	0x0800805b
 8007fa8:	0800806b 	.word	0x0800806b
 8007fac:	0800807f 	.word	0x0800807f
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	2220      	movs	r2, #32
 8007fb4:	68b9      	ldr	r1, [r7, #8]
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f004 fc91 	bl	800c8de <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 8007fc4:	e066      	b.n	8008094 <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	3321      	adds	r3, #33	; 0x21
 8007fca:	2220      	movs	r2, #32
 8007fcc:	68b9      	ldr	r1, [r7, #8]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f004 fc85 	bl	800c8de <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      break;
 8007fdc:	e05a      	b.n	8008094 <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8007fde:	2100      	movs	r1, #0
 8007fe0:	68b8      	ldr	r0, [r7, #8]
 8007fe2:	f7ff fe74 	bl	8007cce <ParseNumber>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8007ff0:	e050      	b.n	8008094 <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	68b8      	ldr	r0, [r7, #8]
 8007ff6:	f7ff fe6a 	bl	8007cce <ParseNumber>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8008004:	e046      	b.n	8008094 <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8008006:	2100      	movs	r1, #0
 8008008:	68b8      	ldr	r0, [r7, #8]
 800800a:	f7ff fe60 	bl	8007cce <ParseNumber>
 800800e:	4603      	mov	r3, r0
 8008010:	b2da      	uxtb	r2, r3
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8008018:	e03c      	b.n	8008094 <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	3348      	adds	r3, #72	; 0x48
 800801e:	2204      	movs	r2, #4
 8008020:	4619      	mov	r1, r3
 8008022:	68b8      	ldr	r0, [r7, #8]
 8008024:	f7ff fece 	bl	8007dc4 <ParseIP>
      break;
 8008028:	e034      	b.n	8008094 <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	334c      	adds	r3, #76	; 0x4c
 800802e:	2204      	movs	r2, #4
 8008030:	4619      	mov	r1, r3
 8008032:	68b8      	ldr	r0, [r7, #8]
 8008034:	f7ff fec6 	bl	8007dc4 <ParseIP>
      break;
 8008038:	e02c      	b.n	8008094 <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	3350      	adds	r3, #80	; 0x50
 800803e:	2204      	movs	r2, #4
 8008040:	4619      	mov	r1, r3
 8008042:	68b8      	ldr	r0, [r7, #8]
 8008044:	f7ff febe 	bl	8007dc4 <ParseIP>
      break;
 8008048:	e024      	b.n	8008094 <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	3354      	adds	r3, #84	; 0x54
 800804e:	2204      	movs	r2, #4
 8008050:	4619      	mov	r1, r3
 8008052:	68b8      	ldr	r0, [r7, #8]
 8008054:	f7ff feb6 	bl	8007dc4 <ParseIP>
      break;
 8008058:	e01c      	b.n	8008094 <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	3358      	adds	r3, #88	; 0x58
 800805e:	2204      	movs	r2, #4
 8008060:	4619      	mov	r1, r3
 8008062:	68b8      	ldr	r0, [r7, #8]
 8008064:	f7ff feae 	bl	8007dc4 <ParseIP>
      break;
 8008068:	e014      	b.n	8008094 <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 800806a:	2100      	movs	r1, #0
 800806c:	68b8      	ldr	r0, [r7, #8]
 800806e:	f7ff fe2e 	bl	8007cce <ParseNumber>
 8008072:	4603      	mov	r3, r0
 8008074:	b2da      	uxtb	r2, r3
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 800807c:	e00a      	b.n	8008094 <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 800807e:	2100      	movs	r1, #0
 8008080:	68b8      	ldr	r0, [r7, #8]
 8008082:	f7ff fe24 	bl	8007cce <ParseNumber>
 8008086:	4603      	mov	r3, r0
 8008088:	b2da      	uxtb	r2, r3
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8008090:	e000      	b.n	8008094 <AT_ParseConnSettings+0x144>

    default:
      break;
 8008092:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8008094:	490c      	ldr	r1, [pc, #48]	; (80080c8 <AT_ParseConnSettings+0x178>)
 8008096:	2000      	movs	r0, #0
 8008098:	f004 fc34 	bl	800c904 <strtok>
 800809c:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d007      	beq.n	80080b4 <AT_ParseConnSettings+0x164>
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	3b01      	subs	r3, #1
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	2b2c      	cmp	r3, #44	; 0x2c
 80080ac:	d102      	bne.n	80080b4 <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 80080ae:	7bfb      	ldrb	r3, [r7, #15]
 80080b0:	3301      	adds	r3, #1
 80080b2:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f47f af59 	bne.w	8007f6e <AT_ParseConnSettings+0x1e>
    }
  }
}
 80080bc:	bf00      	nop
 80080be:	bf00      	nop
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	0800dfac 	.word	0x0800dfac

080080cc <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 80080cc:	b590      	push	{r4, r7, lr}
 80080ce:	b087      	sub	sp, #28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
  int ret = 0;
 80080d8:	2300      	movs	r3, #0
 80080da:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 80080dc:	2300      	movs	r3, #0
 80080de:	82fb      	strh	r3, [r7, #22]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d056      	beq.n	8008198 <AT_ExecuteCommand+0xcc>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d051      	beq.n	8008198 <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 80080fa:	68b8      	ldr	r0, [r7, #8]
 80080fc:	f7f8 f868 	bl	80001d0 <strlen>
 8008100:	4603      	mov	r3, r0
 8008102:	b299      	uxth	r1, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800810a:	461a      	mov	r2, r3
 800810c:	68b8      	ldr	r0, [r7, #8]
 800810e:	47a0      	blx	r4
 8008110:	4603      	mov	r3, r0
 8008112:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	2b00      	cmp	r3, #0
 8008118:	dd3e      	ble.n	8008198 <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8008126:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	4798      	blx	r3
 800812e:	4603      	mov	r3, r0
 8008130:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8008132:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008136:	2b00      	cmp	r3, #0
 8008138:	dd27      	ble.n	800818a <AT_ExecuteCommand+0xbe>
 800813a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800813e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008142:	dc22      	bgt.n	800818a <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8008144:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008148:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800814c:	d105      	bne.n	800815a <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 800814e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008152:	b29b      	uxth	r3, r3
 8008154:	3b01      	subs	r3, #1
 8008156:	b29b      	uxth	r3, r3
 8008158:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 800815a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	4413      	add	r3, r2
 8008162:	2200      	movs	r2, #0
 8008164:	701a      	strb	r2, [r3, #0]

      if (strstr((char *)pdata, AT_OK_STRING))
 8008166:	490f      	ldr	r1, [pc, #60]	; (80081a4 <AT_ExecuteCommand+0xd8>)
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f004 fc27 	bl	800c9bc <strstr>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d001      	beq.n	8008178 <AT_ExecuteCommand+0xac>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8008174:	2300      	movs	r3, #0
 8008176:	e010      	b.n	800819a <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 8008178:	490b      	ldr	r1, [pc, #44]	; (80081a8 <AT_ExecuteCommand+0xdc>)
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f004 fc1e 	bl	800c9bc <strstr>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <AT_ExecuteCommand+0xbe>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8008186:	2305      	movs	r3, #5
 8008188:	e007      	b.n	800819a <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 800818a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800818e:	f113 0f04 	cmn.w	r3, #4
 8008192:	d101      	bne.n	8008198 <AT_ExecuteCommand+0xcc>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8008194:	2306      	movs	r3, #6
 8008196:	e000      	b.n	800819a <AT_ExecuteCommand+0xce>
    }
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8008198:	2304      	movs	r3, #4
}
 800819a:	4618      	mov	r0, r3
 800819c:	371c      	adds	r7, #28
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd90      	pop	{r4, r7, pc}
 80081a2:	bf00      	nop
 80081a4:	0800dfc4 	.word	0x0800dfc4
 80081a8:	0800dfd0 	.word	0x0800dfd0

080081ac <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
 80081b8:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 80081ba:	2300      	movs	r3, #0
 80081bc:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 80081be:	2300      	movs	r3, #0
 80081c0:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 80081c2:	2300      	movs	r3, #0
 80081c4:	827b      	strh	r3, [r7, #18]
  uint16_t n;

  LOCK_WIFI();

  cmd_len = strlen((char*)cmd);
 80081c6:	68b8      	ldr	r0, [r7, #8]
 80081c8:	f7f8 f802 	bl	80001d0 <strlen>
 80081cc:	4603      	mov	r3, r0
 80081ce:	827b      	strh	r3, [r7, #18]

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80081d0:	8a7b      	ldrh	r3, [r7, #18]
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <AT_RequestSendData+0x32>
 80081da:	2302      	movs	r3, #2
 80081dc:	e05d      	b.n	800829a <AT_RequestSendData+0xee>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d057      	beq.n	8008298 <AT_RequestSendData+0xec>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d052      	beq.n	8008298 <AT_RequestSendData+0xec>

  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 80081fe:	8a79      	ldrh	r1, [r7, #18]
 8008200:	68b8      	ldr	r0, [r7, #8]
 8008202:	4798      	blx	r3
 8008204:	4603      	mov	r3, r0
 8008206:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8008208:	8a3a      	ldrh	r2, [r7, #16]
 800820a:	8a7b      	ldrh	r3, [r7, #18]
 800820c:	429a      	cmp	r2, r3
 800820e:	d143      	bne.n	8008298 <AT_RequestSendData+0xec>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800821c:	8879      	ldrh	r1, [r7, #2]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	4798      	blx	r3
 8008222:	4603      	mov	r3, r0
 8008224:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8008226:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800822a:	887b      	ldrh	r3, [r7, #2]
 800822c:	429a      	cmp	r2, r3
 800822e:	d131      	bne.n	8008294 <AT_RequestSendData+0xe8>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800823c:	2100      	movs	r1, #0
 800823e:	6a38      	ldr	r0, [r7, #32]
 8008240:	4798      	blx	r3
 8008242:	4603      	mov	r3, r0
 8008244:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8008246:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800824a:	2b00      	cmp	r3, #0
 800824c:	dd19      	ble.n	8008282 <AT_RequestSendData+0xd6>
      {
        *(pdata + recv_len) = 0;
 800824e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008252:	6a3a      	ldr	r2, [r7, #32]
 8008254:	4413      	add	r3, r2
 8008256:	2200      	movs	r2, #0
 8008258:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 800825a:	4912      	ldr	r1, [pc, #72]	; (80082a4 <AT_RequestSendData+0xf8>)
 800825c:	6a38      	ldr	r0, [r7, #32]
 800825e:	f004 fbad 	bl	800c9bc <strstr>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d001      	beq.n	800826c <AT_RequestSendData+0xc0>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8008268:	2300      	movs	r3, #0
 800826a:	e016      	b.n	800829a <AT_RequestSendData+0xee>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800826c:	490e      	ldr	r1, [pc, #56]	; (80082a8 <AT_RequestSendData+0xfc>)
 800826e:	6a38      	ldr	r0, [r7, #32]
 8008270:	f004 fba4 	bl	800c9bc <strstr>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d001      	beq.n	800827e <AT_RequestSendData+0xd2>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800827a:	2305      	movs	r3, #5
 800827c:	e00d      	b.n	800829a <AT_RequestSendData+0xee>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 800827e:	2302      	movs	r3, #2
 8008280:	e00b      	b.n	800829a <AT_RequestSendData+0xee>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8008282:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008286:	f113 0f04 	cmn.w	r3, #4
 800828a:	d101      	bne.n	8008290 <AT_RequestSendData+0xe4>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 800828c:	2306      	movs	r3, #6
 800828e:	e004      	b.n	800829a <AT_RequestSendData+0xee>
      }
      return ES_WIFI_STATUS_ERROR;
 8008290:	2302      	movs	r3, #2
 8008292:	e002      	b.n	800829a <AT_RequestSendData+0xee>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8008294:	2302      	movs	r3, #2
 8008296:	e000      	b.n	800829a <AT_RequestSendData+0xee>
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 8008298:	2304      	movs	r3, #4
}
 800829a:	4618      	mov	r0, r3
 800829c:	3718      	adds	r7, #24
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	0800dfc4 	.word	0x0800dfc4
 80082a8:	0800dfd0 	.word	0x0800dfd0

080082ac <AT_RequestReceiveData>:
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t *cmd,
                                              char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 80082ac:	b590      	push	{r4, r7, lr}
 80082ae:	b087      	sub	sp, #28
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
 80082b8:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80082c0:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f000 8087 	beq.w	80083dc <AT_RequestReceiveData+0x130>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f000 8081 	beq.w	80083dc <AT_RequestReceiveData+0x130>

  if (Obj->fops.IO_Send(cmd, (uint16_t)strlen((char *)cmd), Obj->Timeout) > 0)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 80082e0:	68b8      	ldr	r0, [r7, #8]
 80082e2:	f7f7 ff75 	bl	80001d0 <strlen>
 80082e6:	4603      	mov	r3, r0
 80082e8:	b299      	uxth	r1, r3
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80082f0:	461a      	mov	r2, r3
 80082f2:	68b8      	ldr	r0, [r7, #8]
 80082f4:	47a0      	blx	r4
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	dd6f      	ble.n	80083dc <AT_RequestReceiveData+0x130>
  {
    len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8008308:	2100      	movs	r1, #0
 800830a:	6938      	ldr	r0, [r7, #16]
 800830c:	4798      	blx	r3
 800830e:	4603      	mov	r3, r0
 8008310:	617b      	str	r3, [r7, #20]

    /* Check if start at "\r\n". */
    if ((p[0] != '\r') || (p[1] != '\n'))
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	2b0d      	cmp	r3, #13
 8008318:	d104      	bne.n	8008324 <AT_RequestReceiveData+0x78>
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	3301      	adds	r3, #1
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	2b0a      	cmp	r3, #10
 8008322:	d001      	beq.n	8008328 <AT_RequestReceiveData+0x7c>
    {
      return ES_WIFI_STATUS_IO_ERROR;
 8008324:	2304      	movs	r3, #4
 8008326:	e05a      	b.n	80083de <AT_RequestReceiveData+0x132>
    }
    len -= 2;
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	3b02      	subs	r3, #2
 800832c:	617b      	str	r3, [r7, #20]
    p += 2;
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	3302      	adds	r3, #2
 8008332:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	2b07      	cmp	r3, #7
 8008338:	d94a      	bls.n	80083d0 <AT_RequestReceiveData+0x124>
    {
     while(len && (p[len - 1] == 0x15)) len--;
 800833a:	e002      	b.n	8008342 <AT_RequestReceiveData+0x96>
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	3b01      	subs	r3, #1
 8008340:	617b      	str	r3, [r7, #20]
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d006      	beq.n	8008356 <AT_RequestReceiveData+0xaa>
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	3b01      	subs	r3, #1
 800834c:	693a      	ldr	r2, [r7, #16]
 800834e:	4413      	add	r3, r2
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	2b15      	cmp	r3, #21
 8008354:	d0f2      	beq.n	800833c <AT_RequestReceiveData+0x90>
     p[len] = '\0';
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	693a      	ldr	r2, [r7, #16]
 800835a:	4413      	add	r3, r2
 800835c:	2200      	movs	r2, #0
 800835e:	701a      	strb	r2, [r3, #0]

     if (strstr((char *) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	3b08      	subs	r3, #8
 8008364:	693a      	ldr	r2, [r7, #16]
 8008366:	4413      	add	r3, r2
 8008368:	491f      	ldr	r1, [pc, #124]	; (80083e8 <AT_RequestReceiveData+0x13c>)
 800836a:	4618      	mov	r0, r3
 800836c:	f004 fb26 	bl	800c9bc <strstr>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d016      	beq.n	80083a4 <AT_RequestReceiveData+0xf8>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	b29b      	uxth	r3, r3
 800837a:	3b08      	subs	r3, #8
 800837c:	b29a      	uxth	r2, r3
 800837e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008380:	801a      	strh	r2, [r3, #0]
       if (*ReadData > Reqlen)
 8008382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008384:	881b      	ldrh	r3, [r3, #0]
 8008386:	887a      	ldrh	r2, [r7, #2]
 8008388:	429a      	cmp	r2, r3
 800838a:	d202      	bcs.n	8008392 <AT_RequestReceiveData+0xe6>
       {
         *ReadData = Reqlen;
 800838c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838e:	887a      	ldrh	r2, [r7, #2]
 8008390:	801a      	strh	r2, [r3, #0]
       }

       memcpy(pdata, p, *ReadData);
 8008392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008394:	881b      	ldrh	r3, [r3, #0]
 8008396:	461a      	mov	r2, r3
 8008398:	6939      	ldr	r1, [r7, #16]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f004 fb97 	bl	800cace <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 80083a0:	2300      	movs	r3, #0
 80083a2:	e01c      	b.n	80083de <AT_RequestReceiveData+0x132>
     }
     else if (memcmp((char *)p + len - AT_DELIMETER_LEN, AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	3b04      	subs	r3, #4
 80083a8:	693a      	ldr	r2, [r7, #16]
 80083aa:	4413      	add	r3, r2
 80083ac:	2204      	movs	r2, #4
 80083ae:	490f      	ldr	r1, [pc, #60]	; (80083ec <AT_RequestReceiveData+0x140>)
 80083b0:	4618      	mov	r0, r3
 80083b2:	f004 fa5b 	bl	800c86c <memcmp>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d104      	bne.n	80083c6 <AT_RequestReceiveData+0x11a>
     {
       *ReadData = 0;
 80083bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083be:	2200      	movs	r2, #0
 80083c0:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80083c2:	2305      	movs	r3, #5
 80083c4:	e00b      	b.n	80083de <AT_RequestReceiveData+0x132>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 80083c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c8:	2200      	movs	r2, #0
 80083ca:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80083cc:	2305      	movs	r3, #5
 80083ce:	e006      	b.n	80083de <AT_RequestReceiveData+0x132>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	f113 0f04 	cmn.w	r3, #4
 80083d6:	d101      	bne.n	80083dc <AT_RequestReceiveData+0x130>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 80083d8:	2306      	movs	r3, #6
 80083da:	e000      	b.n	80083de <AT_RequestReceiveData+0x132>
   }
  }
 }

  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80083dc:	2304      	movs	r3, #4
}
 80083de:	4618      	mov	r0, r3
 80083e0:	371c      	adds	r7, #28
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd90      	pop	{r4, r7, pc}
 80083e6:	bf00      	nop
 80083e8:	0800dfc4 	.word	0x0800dfc4
 80083ec:	0800dfd8 	.word	0x0800dfd8

080083f0 <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80083f8:	2302      	movs	r3, #2
 80083fa:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f247 5230 	movw	r2, #30000	; 0x7530
 8008402:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800840c:	2b00      	cmp	r3, #0
 800840e:	d01b      	beq.n	8008448 <ES_WIFI_Init+0x58>

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008416:	2000      	movs	r0, #0
 8008418:	4798      	blx	r3
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d113      	bne.n	8008448 <ES_WIFI_Init+0x58>
  {
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008426:	461a      	mov	r2, r3
 8008428:	490a      	ldr	r1, [pc, #40]	; (8008454 <ES_WIFI_Init+0x64>)
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7ff fe4e 	bl	80080cc <AT_ExecuteCommand>
 8008430:	4603      	mov	r3, r0
 8008432:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8008434:	7bfb      	ldrb	r3, [r7, #15]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d106      	bne.n	8008448 <ES_WIFI_Init+0x58>
    {
      AT_ParseInfo(Obj, Obj->CmdData);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008440:	4619      	mov	r1, r3
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7ff fcf6 	bl	8007e34 <AT_ParseInfo>
    }
   }
  }

  UNLOCK_WIFI();
  return ret;
 8008448:	7bfb      	ldrb	r3, [r7, #15]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	0800dfe0 	.word	0x0800dfe0

08008458 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
 8008464:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d00b      	beq.n	8008484 <ES_WIFI_RegisterBusIO+0x2c>
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d008      	beq.n	8008484 <ES_WIFI_RegisterBusIO+0x2c>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d005      	beq.n	8008484 <ES_WIFI_RegisterBusIO+0x2c>
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d002      	beq.n	8008484 <ES_WIFI_RegisterBusIO+0x2c>
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d101      	bne.n	8008488 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8008484:	2302      	movs	r3, #2
 8008486:	e014      	b.n	80084b2 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	69ba      	ldr	r2, [r7, #24]
 800849c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	69fa      	ldr	r2, [r7, #28]
 80084a4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	683a      	ldr	r2, [r7, #0]
 80084ac:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3714      	adds	r7, #20
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
	...

080084c0 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
 80084cc:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80084d4:	68ba      	ldr	r2, [r7, #8]
 80084d6:	4932      	ldr	r1, [pc, #200]	; (80085a0 <ES_WIFI_Connect+0xe0>)
 80084d8:	4618      	mov	r0, r3
 80084da:	f004 f8cf 	bl	800c67c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80084ea:	461a      	mov	r2, r3
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f7ff fded 	bl	80080cc <AT_ExecuteCommand>
 80084f2:	4603      	mov	r3, r0
 80084f4:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80084f6:	7dfb      	ldrb	r3, [r7, #23]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d14b      	bne.n	8008594 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	4927      	ldr	r1, [pc, #156]	; (80085a4 <ES_WIFI_Connect+0xe4>)
 8008506:	4618      	mov	r0, r3
 8008508:	f004 f8b8 	bl	800c67c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008518:	461a      	mov	r2, r3
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f7ff fdd6 	bl	80080cc <AT_ExecuteCommand>
 8008520:	4603      	mov	r3, r0
 8008522:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8008524:	7dfb      	ldrb	r3, [r7, #23]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d134      	bne.n	8008594 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	78fa      	ldrb	r2, [r7, #3]
 800852e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008538:	78fa      	ldrb	r2, [r7, #3]
 800853a:	491b      	ldr	r1, [pc, #108]	; (80085a8 <ES_WIFI_Connect+0xe8>)
 800853c:	4618      	mov	r0, r3
 800853e:	f004 f89d 	bl	800c67c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800854e:	461a      	mov	r2, r3
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f7ff fdbb 	bl	80080cc <AT_ExecuteCommand>
 8008556:	4603      	mov	r3, r0
 8008558:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800855a:	7dfb      	ldrb	r3, [r7, #23]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d119      	bne.n	8008594 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008566:	4911      	ldr	r1, [pc, #68]	; (80085ac <ES_WIFI_Connect+0xec>)
 8008568:	4618      	mov	r0, r3
 800856a:	f004 f887 	bl	800c67c <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800857a:	461a      	mov	r2, r3
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f7ff fda5 	bl	80080cc <AT_ExecuteCommand>
 8008582:	4603      	mov	r3, r0
 8008584:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8008586:	7dfb      	ldrb	r3, [r7, #23]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d103      	bne.n	8008594 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2201      	movs	r2, #1
 8008590:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8008594:	7dfb      	ldrb	r3, [r7, #23]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3718      	adds	r7, #24
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	0800dff8 	.word	0x0800dff8
 80085a4:	0800e000 	.word	0x0800e000
 80085a8:	0800e008 	.word	0x0800e008
 80085ac:	0800e010 	.word	0x0800e010

080085b0 <ES_WIFI_IsConnected>:
  * @brief  Check whether the module is connected to an access point.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80085be:	4913      	ldr	r1, [pc, #76]	; (800860c <ES_WIFI_IsConnected+0x5c>)
 80085c0:	4618      	mov	r0, r3
 80085c2:	f004 f85b 	bl	800c67c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80085d2:	461a      	mov	r2, r3
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f7ff fd79 	bl	80080cc <AT_ExecuteCommand>
 80085da:	4603      	mov	r3, r0
 80085dc:	73fb      	strb	r3, [r7, #15]
  if (ret == ES_WIFI_STATUS_OK)
 80085de:	7bfb      	ldrb	r3, [r7, #15]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10b      	bne.n	80085fc <ES_WIFI_IsConnected+0x4c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 80085ea:	2b31      	cmp	r3, #49	; 0x31
 80085ec:	bf0c      	ite	eq
 80085ee:	2301      	moveq	r3, #1
 80085f0:	2300      	movne	r3, #0
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	461a      	mov	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	0800e014 	.word	0x0800e014

08008610 <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800861e:	4910      	ldr	r1, [pc, #64]	; (8008660 <ES_WIFI_GetNetworkSettings+0x50>)
 8008620:	4618      	mov	r0, r3
 8008622:	f004 f82b 	bl	800c67c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008632:	461a      	mov	r2, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f7ff fd49 	bl	80080cc <AT_ExecuteCommand>
 800863a:	4603      	mov	r3, r0
 800863c:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800863e:	7bfb      	ldrb	r3, [r7, #15]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d108      	bne.n	8008656 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	338d      	adds	r3, #141	; 0x8d
 800864e:	4619      	mov	r1, r3
 8008650:	4610      	mov	r0, r2
 8008652:	f7ff fc7d 	bl	8007f50 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 8008656:	7bfb      	ldrb	r3, [r7, #15]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	0800e01c 	.word	0x0800e01c

08008664 <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b086      	sub	sp, #24
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	4613      	mov	r3, r2
 8008670:	71fb      	strb	r3, [r7, #7]
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008678:	4913      	ldr	r1, [pc, #76]	; (80086c8 <ES_WIFI_GetMACAddress+0x64>)
 800867a:	4618      	mov	r0, r3
 800867c:	f003 fffe 	bl	800c67c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800868c:	461a      	mov	r2, r3
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f7ff fd1c 	bl	80080cc <AT_ExecuteCommand>
 8008694:	4603      	mov	r3, r0
 8008696:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8008698:	7dfb      	ldrb	r3, [r7, #23]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10e      	bne.n	80086bc <ES_WIFI_GetMACAddress+0x58>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80086a4:	3302      	adds	r3, #2
 80086a6:	4909      	ldr	r1, [pc, #36]	; (80086cc <ES_WIFI_GetMACAddress+0x68>)
 80086a8:	4618      	mov	r0, r3
 80086aa:	f004 f92b 	bl	800c904 <strtok>
 80086ae:	6138      	str	r0, [r7, #16]
    ParseMAC(ptr, mac, MacLength);
 80086b0:	79fb      	ldrb	r3, [r7, #7]
 80086b2:	461a      	mov	r2, r3
 80086b4:	68b9      	ldr	r1, [r7, #8]
 80086b6:	6938      	ldr	r0, [r7, #16]
 80086b8:	f7ff fb4d 	bl	8007d56 <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
 80086bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3718      	adds	r7, #24
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	0800e06c 	.word	0x0800e06c
 80086cc:	0800e070 	.word	0x0800e070

080086d0 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 80086da:	2300      	movs	r3, #0
 80086dc:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	785b      	ldrb	r3, [r3, #1]
 80086e8:	461a      	mov	r2, r3
 80086ea:	4949      	ldr	r1, [pc, #292]	; (8008810 <ES_WIFI_StartServerSingleConn+0x140>)
 80086ec:	f003 ffc6 	bl	800c67c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80086fc:	461a      	mov	r2, r3
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7ff fce4 	bl	80080cc <AT_ExecuteCommand>
 8008704:	4603      	mov	r3, r0
 8008706:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8008708:	7bfb      	ldrb	r3, [r7, #15]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <ES_WIFI_StartServerSingleConn+0x42>
  {
    UNLOCK_WIFI();
    return ret;
 800870e:	7bfb      	ldrb	r3, [r7, #15]
 8008710:	e079      	b.n	8008806 <ES_WIFI_StartServerSingleConn+0x136>
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	2b01      	cmp	r3, #1
 8008718:	d016      	beq.n	8008748 <ES_WIFI_StartServerSingleConn+0x78>
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	2b02      	cmp	r3, #2
 8008720:	d012      	beq.n	8008748 <ES_WIFI_StartServerSingleConn+0x78>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008728:	493a      	ldr	r1, [pc, #232]	; (8008814 <ES_WIFI_StartServerSingleConn+0x144>)
 800872a:	4618      	mov	r0, r3
 800872c:	f003 ffa6 	bl	800c67c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800873c:	461a      	mov	r2, r3
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7ff fcc4 	bl	80080cc <AT_ExecuteCommand>
 8008744:	4603      	mov	r3, r0
 8008746:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8008748:	7bfb      	ldrb	r3, [r7, #15]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d15a      	bne.n	8008804 <ES_WIFI_StartServerSingleConn+0x134>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	461a      	mov	r2, r3
 800875a:	492f      	ldr	r1, [pc, #188]	; (8008818 <ES_WIFI_StartServerSingleConn+0x148>)
 800875c:	f003 ff8e 	bl	800c67c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800876c:	461a      	mov	r2, r3
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7ff fcac 	bl	80080cc <AT_ExecuteCommand>
 8008774:	4603      	mov	r3, r0
 8008776:	73fb      	strb	r3, [r7, #15]
    if (ret == ES_WIFI_STATUS_OK)
 8008778:	7bfb      	ldrb	r3, [r7, #15]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d142      	bne.n	8008804 <ES_WIFI_StartServerSingleConn+0x134>
    {
      sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	7c1b      	ldrb	r3, [r3, #16]
 8008788:	461a      	mov	r2, r3
 800878a:	4924      	ldr	r1, [pc, #144]	; (800881c <ES_WIFI_StartServerSingleConn+0x14c>)
 800878c:	f003 ff76 	bl	800c67c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800879c:	461a      	mov	r2, r3
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f7ff fc94 	bl	80080cc <AT_ExecuteCommand>
 80087a4:	4603      	mov	r3, r0
 80087a6:	73fb      	strb	r3, [r7, #15]
      if (ret == ES_WIFI_STATUS_OK)
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d12a      	bne.n	8008804 <ES_WIFI_StartServerSingleConn+0x134>
      {
        sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	889b      	ldrh	r3, [r3, #4]
 80087b8:	461a      	mov	r2, r3
 80087ba:	4919      	ldr	r1, [pc, #100]	; (8008820 <ES_WIFI_StartServerSingleConn+0x150>)
 80087bc:	f003 ff5e 	bl	800c67c <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80087cc:	461a      	mov	r2, r3
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7ff fc7c 	bl	80080cc <AT_ExecuteCommand>
 80087d4:	4603      	mov	r3, r0
 80087d6:	73fb      	strb	r3, [r7, #15]
        if (ret == ES_WIFI_STATUS_OK)
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d112      	bne.n	8008804 <ES_WIFI_StartServerSingleConn+0x134>
        {
          /* multi accept mode */
          sprintf((char*)Obj->CmdData,"P5=11\r");
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80087e4:	490f      	ldr	r1, [pc, #60]	; (8008824 <ES_WIFI_StartServerSingleConn+0x154>)
 80087e6:	4618      	mov	r0, r3
 80087e8:	f003 ff48 	bl	800c67c <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80087f8:	461a      	mov	r2, r3
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7ff fc66 	bl	80080cc <AT_ExecuteCommand>
 8008800:	4603      	mov	r3, r0
 8008802:	73fb      	strb	r3, [r7, #15]
    }
  }

  UNLOCK_WIFI();

  return ret;
 8008804:	7bfb      	ldrb	r3, [r7, #15]
}
 8008806:	4618      	mov	r0, r3
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	0800e0d4 	.word	0x0800e0d4
 8008814:	0800e11c 	.word	0x0800e11c
 8008818:	0800e0dc 	.word	0x0800e0dc
 800881c:	0800e128 	.word	0x0800e128
 8008820:	0800e0e4 	.word	0x0800e0e4
 8008824:	0800e130 	.word	0x0800e130

08008828 <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj, uint32_t timeout, ES_WIFI_Conn_t *conn)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b08a      	sub	sp, #40	; 0x28
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8008834:	2300      	movs	r3, #0
 8008836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t      t;
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;

  tstart = HAL_GetTick();
 800883a:	f7f9 fb0f 	bl	8001e5c <HAL_GetTick>
 800883e:	6278      	str	r0, [r7, #36]	; 0x24
  tlast = tstart + timeout;
 8008840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	4413      	add	r3, r2
 8008846:	61fb      	str	r3, [r7, #28]
  if (tlast < tstart)
 8008848:	69fa      	ldr	r2, [r7, #28]
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	429a      	cmp	r2, r3
 800884e:	d201      	bcs.n	8008854 <ES_WIFI_WaitServerConnection+0x2c>
  {
    tstart=0;
 8008850:	2300      	movs	r3, #0
 8008852:	627b      	str	r3, [r7, #36]	; 0x24

  do
  {
#if (ES_WIFI_USE_UART == 0)
    /* mandatory to flush MR async messages */
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800885a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800885e:	2100      	movs	r1, #0
 8008860:	4618      	mov	r0, r3
 8008862:	f004 f813 	bl	800c88c <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800886c:	4973      	ldr	r1, [pc, #460]	; (8008a3c <ES_WIFI_WaitServerConnection+0x214>)
 800886e:	4618      	mov	r0, r3
 8008870:	f003 ff04 	bl	800c67c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008880:	461a      	mov	r2, r3
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f7ff fc22 	bl	80080cc <AT_ExecuteCommand>
 8008888:	4603      	mov	r3, r0
 800888a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret == ES_WIFI_STATUS_OK)
 800888e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008892:	2b00      	cmp	r3, #0
 8008894:	d136      	bne.n	8008904 <ES_WIFI_WaitServerConnection+0xdc>
    {
      if ((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800889c:	4968      	ldr	r1, [pc, #416]	; (8008a40 <ES_WIFI_WaitServerConnection+0x218>)
 800889e:	4618      	mov	r0, r3
 80088a0:	f004 f88c 	bl	800c9bc <strstr>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d03b      	beq.n	8008922 <ES_WIFI_WaitServerConnection+0xfa>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80088b0:	4964      	ldr	r1, [pc, #400]	; (8008a44 <ES_WIFI_WaitServerConnection+0x21c>)
 80088b2:	4618      	mov	r0, r3
 80088b4:	f004 f882 	bl	800c9bc <strstr>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d031      	beq.n	8008922 <ES_WIFI_WaitServerConnection+0xfa>
      {
        if(strstr((char *)Obj->CmdData, "Accepted"))
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80088c4:	4960      	ldr	r1, [pc, #384]	; (8008a48 <ES_WIFI_WaitServerConnection+0x220>)
 80088c6:	4618      	mov	r0, r3
 80088c8:	f004 f878 	bl	800c9bc <strstr>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d127      	bne.n	8008922 <ES_WIFI_WaitServerConnection+0xfa>
        {
         //printf("SOMA Accepted\n");
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80088d8:	495c      	ldr	r1, [pc, #368]	; (8008a4c <ES_WIFI_WaitServerConnection+0x224>)
 80088da:	4618      	mov	r0, r3
 80088dc:	f004 f86e 	bl	800c9bc <strstr>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d11d      	bne.n	8008922 <ES_WIFI_WaitServerConnection+0xfa>
        {
          DEBUG("Bad MR stntax msg %s\n", Obj->CmdData);
 80088e6:	f240 72cb 	movw	r2, #1995	; 0x7cb
 80088ea:	4959      	ldr	r1, [pc, #356]	; (8008a50 <ES_WIFI_WaitServerConnection+0x228>)
 80088ec:	4859      	ldr	r0, [pc, #356]	; (8008a54 <ES_WIFI_WaitServerConnection+0x22c>)
 80088ee:	f003 fe57 	bl	800c5a0 <iprintf>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80088f8:	4619      	mov	r1, r3
 80088fa:	4857      	ldr	r0, [pc, #348]	; (8008a58 <ES_WIFI_WaitServerConnection+0x230>)
 80088fc:	f003 fe50 	bl	800c5a0 <iprintf>

          UNLOCK_WIFI();

          return ES_WIFI_STATUS_ERROR;
 8008900:	2302      	movs	r3, #2
 8008902:	e096      	b.n	8008a32 <ES_WIFI_WaitServerConnection+0x20a>
        }
      }
    }
    else
    {
      DEBUG("MR command failed %s\n", Obj->CmdData);
 8008904:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8008908:	4951      	ldr	r1, [pc, #324]	; (8008a50 <ES_WIFI_WaitServerConnection+0x228>)
 800890a:	4852      	ldr	r0, [pc, #328]	; (8008a54 <ES_WIFI_WaitServerConnection+0x22c>)
 800890c:	f003 fe48 	bl	800c5a0 <iprintf>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008916:	4619      	mov	r1, r3
 8008918:	4850      	ldr	r0, [pc, #320]	; (8008a5c <ES_WIFI_WaitServerConnection+0x234>)
 800891a:	f003 fe41 	bl	800c5a0 <iprintf>

      UNLOCK_WIFI();

      return ES_WIFI_STATUS_ERROR;
 800891e:	2302      	movs	r3, #2
 8008920:	e087      	b.n	8008a32 <ES_WIFI_WaitServerConnection+0x20a>
    }
#endif /* (ES_WIFI_USE_UART == 0) */

    memset(Obj->CmdData, 0, sizeof(Obj->CmdData));
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008928:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800892c:	2100      	movs	r1, #0
 800892e:	4618      	mov	r0, r3
 8008930:	f003 ffac 	bl	800c88c <memset>
    sprintf((char*)Obj->CmdData, "P?\r");
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800893a:	4949      	ldr	r1, [pc, #292]	; (8008a60 <ES_WIFI_WaitServerConnection+0x238>)
 800893c:	4618      	mov	r0, r3
 800893e:	f003 fe9d 	bl	800c67c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800894e:	461a      	mov	r2, r3
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f7ff fbbb 	bl	80080cc <AT_ExecuteCommand>
 8008956:	4603      	mov	r3, r0
 8008958:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret == ES_WIFI_STATUS_OK)
 800895c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008960:	2b00      	cmp	r3, #0
 8008962:	d140      	bne.n	80089e6 <ES_WIFI_WaitServerConnection+0x1be>
    {
      if (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800896a:	220c      	movs	r2, #12
 800896c:	493d      	ldr	r1, [pc, #244]	; (8008a64 <ES_WIFI_WaitServerConnection+0x23c>)
 800896e:	4618      	mov	r0, r3
 8008970:	f003 ffa3 	bl	800c8ba <strncmp>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d044      	beq.n	8008a04 <ES_WIFI_WaitServerConnection+0x1dc>
      {
        ptr = strtok((char *)Obj->CmdData + 2, ",");
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008980:	3302      	adds	r3, #2
 8008982:	4939      	ldr	r1, [pc, #228]	; (8008a68 <ES_WIFI_WaitServerConnection+0x240>)
 8008984:	4618      	mov	r0, r3
 8008986:	f003 ffbd 	bl	800c904 <strtok>
 800898a:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); /* port */
 800898c:	4936      	ldr	r1, [pc, #216]	; (8008a68 <ES_WIFI_WaitServerConnection+0x240>)
 800898e:	2000      	movs	r0, #0
 8008990:	f003 ffb8 	bl	800c904 <strtok>
 8008994:	6178      	str	r0, [r7, #20]
        ParseIP((char *)ptr, conn->RemoteIP, sizeof(conn->RemoteIP));
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	3306      	adds	r3, #6
 800899a:	2204      	movs	r2, #4
 800899c:	4619      	mov	r1, r3
 800899e:	6978      	ldr	r0, [r7, #20]
 80089a0:	f7ff fa10 	bl	8007dc4 <ParseIP>
        ptr = strtok(0, ","); /* port */
 80089a4:	4930      	ldr	r1, [pc, #192]	; (8008a68 <ES_WIFI_WaitServerConnection+0x240>)
 80089a6:	2000      	movs	r0, #0
 80089a8:	f003 ffac 	bl	800c904 <strtok>
 80089ac:	6178      	str	r0, [r7, #20]
        conn->LocalPort=ParseNumber(ptr,0);
 80089ae:	2100      	movs	r1, #0
 80089b0:	6978      	ldr	r0, [r7, #20]
 80089b2:	f7ff f98c 	bl	8007cce <ParseNumber>
 80089b6:	4603      	mov	r3, r0
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	809a      	strh	r2, [r3, #4]
        ptr = strtok(0, ","); /* ip */
 80089be:	492a      	ldr	r1, [pc, #168]	; (8008a68 <ES_WIFI_WaitServerConnection+0x240>)
 80089c0:	2000      	movs	r0, #0
 80089c2:	f003 ff9f 	bl	800c904 <strtok>
 80089c6:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); /* remote port */
 80089c8:	4927      	ldr	r1, [pc, #156]	; (8008a68 <ES_WIFI_WaitServerConnection+0x240>)
 80089ca:	2000      	movs	r0, #0
 80089cc:	f003 ff9a 	bl	800c904 <strtok>
 80089d0:	6178      	str	r0, [r7, #20]
        conn->RemotePort=ParseNumber(ptr,0);
 80089d2:	2100      	movs	r1, #0
 80089d4:	6978      	ldr	r0, [r7, #20]
 80089d6:	f7ff f97a 	bl	8007cce <ParseNumber>
 80089da:	4603      	mov	r3, r0
 80089dc:	b29a      	uxth	r2, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	805a      	strh	r2, [r3, #2]

        UNLOCK_WIFI();

        return ES_WIFI_STATUS_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	e025      	b.n	8008a32 <ES_WIFI_WaitServerConnection+0x20a>
      }
    }
    else
    {
      DEBUG("P? command failed %s\n", Obj->CmdData);
 80089e6:	f240 72f4 	movw	r2, #2036	; 0x7f4
 80089ea:	4919      	ldr	r1, [pc, #100]	; (8008a50 <ES_WIFI_WaitServerConnection+0x228>)
 80089ec:	4819      	ldr	r0, [pc, #100]	; (8008a54 <ES_WIFI_WaitServerConnection+0x22c>)
 80089ee:	f003 fdd7 	bl	800c5a0 <iprintf>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80089f8:	4619      	mov	r1, r3
 80089fa:	481c      	ldr	r0, [pc, #112]	; (8008a6c <ES_WIFI_WaitServerConnection+0x244>)
 80089fc:	f003 fdd0 	bl	800c5a0 <iprintf>

      UNLOCK_WIFI();

      return ES_WIFI_STATUS_ERROR;
 8008a00:	2302      	movs	r3, #2
 8008a02:	e016      	b.n	8008a32 <ES_WIFI_WaitServerConnection+0x20a>
    }

    UNLOCK_WIFI();

    Obj->fops.IO_Delay(100);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008a0a:	2064      	movs	r0, #100	; 0x64
 8008a0c:	4798      	blx	r3

    LOCK_WIFI();
    t = HAL_GetTick();
 8008a0e:	f7f9 fa25 	bl	8001e5c <HAL_GetTick>
 8008a12:	61b8      	str	r0, [r7, #24]
  }
  while ((timeout==0) || ((t < tlast) || (t < tstart)));
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f43f af1c 	beq.w	8008854 <ES_WIFI_WaitServerConnection+0x2c>
 8008a1c:	69ba      	ldr	r2, [r7, #24]
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	f4ff af17 	bcc.w	8008854 <ES_WIFI_WaitServerConnection+0x2c>
 8008a26:	69ba      	ldr	r2, [r7, #24]
 8008a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	f4ff af12 	bcc.w	8008854 <ES_WIFI_WaitServerConnection+0x2c>
  return ES_WIFI_STATUS_TIMEOUT;
 8008a30:	2303      	movs	r3, #3
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3728      	adds	r7, #40	; 0x28
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	0800dff0 	.word	0x0800dff0
 8008a40:	0800e138 	.word	0x0800e138
 8008a44:	0800e140 	.word	0x0800e140
 8008a48:	0800e148 	.word	0x0800e148
 8008a4c:	0800e154 	.word	0x0800e154
 8008a50:	0800e164 	.word	0x0800e164
 8008a54:	0800e180 	.word	0x0800e180
 8008a58:	0800e188 	.word	0x0800e188
 8008a5c:	0800e1a0 	.word	0x0800e1a0
 8008a60:	0800e1b8 	.word	0x0800e1b8
 8008a64:	0800e1bc 	.word	0x0800e1bc
 8008a68:	0800dfac 	.word	0x0800dfac
 8008a6c:	0800e1cc 	.word	0x0800e1cc

08008a70 <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to the module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, uint8_t socket)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "P0=%d\r", socket);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008a82:	78fa      	ldrb	r2, [r7, #3]
 8008a84:	4924      	ldr	r1, [pc, #144]	; (8008b18 <ES_WIFI_CloseServerConnection+0xa8>)
 8008a86:	4618      	mov	r0, r3
 8008a88:	f003 fdf8 	bl	800c67c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008a98:	461a      	mov	r2, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f7ff fb16 	bl	80080cc <AT_ExecuteCommand>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00e      	beq.n	8008ac8 <ES_WIFI_CloseServerConnection+0x58>
  {
    DEBUG(" Can not select socket %s\n", Obj->CmdData);
 8008aaa:	f640 0217 	movw	r2, #2071	; 0x817
 8008aae:	491b      	ldr	r1, [pc, #108]	; (8008b1c <ES_WIFI_CloseServerConnection+0xac>)
 8008ab0:	481b      	ldr	r0, [pc, #108]	; (8008b20 <ES_WIFI_CloseServerConnection+0xb0>)
 8008ab2:	f003 fd75 	bl	800c5a0 <iprintf>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008abc:	4619      	mov	r1, r3
 8008abe:	4819      	ldr	r0, [pc, #100]	; (8008b24 <ES_WIFI_CloseServerConnection+0xb4>)
 8008ac0:	f003 fd6e 	bl	800c5a0 <iprintf>
    UNLOCK_WIFI();
    return ret;
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
 8008ac6:	e023      	b.n	8008b10 <ES_WIFI_CloseServerConnection+0xa0>
  }

  sprintf((char*)Obj->CmdData, "P5=10\r");
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008ace:	4916      	ldr	r1, [pc, #88]	; (8008b28 <ES_WIFI_CloseServerConnection+0xb8>)
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f003 fdd3 	bl	800c67c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f7ff faf1 	bl	80080cc <AT_ExecuteCommand>
 8008aea:	4603      	mov	r3, r0
 8008aec:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00c      	beq.n	8008b0e <ES_WIFI_CloseServerConnection+0x9e>
  {
    DEBUG(" Open next failed %s\n", Obj->CmdData);
 8008af4:	f44f 6202 	mov.w	r2, #2080	; 0x820
 8008af8:	4908      	ldr	r1, [pc, #32]	; (8008b1c <ES_WIFI_CloseServerConnection+0xac>)
 8008afa:	4809      	ldr	r0, [pc, #36]	; (8008b20 <ES_WIFI_CloseServerConnection+0xb0>)
 8008afc:	f003 fd50 	bl	800c5a0 <iprintf>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008b06:	4619      	mov	r1, r3
 8008b08:	4808      	ldr	r0, [pc, #32]	; (8008b2c <ES_WIFI_CloseServerConnection+0xbc>)
 8008b0a:	f003 fd49 	bl	800c5a0 <iprintf>
  }

  UNLOCK_WIFI();
  return ret;
 8008b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	0800e0d4 	.word	0x0800e0d4
 8008b1c:	0800e164 	.word	0x0800e164
 8008b20:	0800e180 	.word	0x0800e180
 8008b24:	0800e1e4 	.word	0x0800e1e4
 8008b28:	0800e200 	.word	0x0800e200
 8008b2c:	0800e208 	.word	0x0800e208

08008b30 <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, uint8_t socket)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	460b      	mov	r3, r1
 8008b3a:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008b42:	78fa      	ldrb	r2, [r7, #3]
 8008b44:	4925      	ldr	r1, [pc, #148]	; (8008bdc <ES_WIFI_StopServerSingleConn+0xac>)
 8008b46:	4618      	mov	r0, r3
 8008b48:	f003 fd98 	bl	800c67c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008b58:	461a      	mov	r2, r3
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f7ff fab6 	bl	80080cc <AT_ExecuteCommand>
 8008b60:	4603      	mov	r3, r0
 8008b62:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00e      	beq.n	8008b88 <ES_WIFI_StopServerSingleConn+0x58>
  {
    DEBUG("Selecting socket failed: %s\n", Obj->CmdData);
 8008b6a:	f640 0237 	movw	r2, #2103	; 0x837
 8008b6e:	491c      	ldr	r1, [pc, #112]	; (8008be0 <ES_WIFI_StopServerSingleConn+0xb0>)
 8008b70:	481c      	ldr	r0, [pc, #112]	; (8008be4 <ES_WIFI_StopServerSingleConn+0xb4>)
 8008b72:	f003 fd15 	bl	800c5a0 <iprintf>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	481a      	ldr	r0, [pc, #104]	; (8008be8 <ES_WIFI_StopServerSingleConn+0xb8>)
 8008b80:	f003 fd0e 	bl	800c5a0 <iprintf>
    UNLOCK_WIFI();
    return ret;
 8008b84:	7bfb      	ldrb	r3, [r7, #15]
 8008b86:	e025      	b.n	8008bd4 <ES_WIFI_StopServerSingleConn+0xa4>
  }

  sprintf((char*)Obj->CmdData,"P5=0\r");
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008b8e:	4917      	ldr	r1, [pc, #92]	; (8008bec <ES_WIFI_StopServerSingleConn+0xbc>)
 8008b90:	4618      	mov	r0, r3
 8008b92:	f003 fd73 	bl	800c67c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f7ff fa91 	bl	80080cc <AT_ExecuteCommand>
 8008baa:	4603      	mov	r3, r0
 8008bac:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8008bae:	7bfb      	ldrb	r3, [r7, #15]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00e      	beq.n	8008bd2 <ES_WIFI_StopServerSingleConn+0xa2>
  {
    DEBUG("Stopping server failed %s\n", Obj->CmdData);
 8008bb4:	f44f 6204 	mov.w	r2, #2112	; 0x840
 8008bb8:	4909      	ldr	r1, [pc, #36]	; (8008be0 <ES_WIFI_StopServerSingleConn+0xb0>)
 8008bba:	480a      	ldr	r0, [pc, #40]	; (8008be4 <ES_WIFI_StopServerSingleConn+0xb4>)
 8008bbc:	f003 fcf0 	bl	800c5a0 <iprintf>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	4809      	ldr	r0, [pc, #36]	; (8008bf0 <ES_WIFI_StopServerSingleConn+0xc0>)
 8008bca:	f003 fce9 	bl	800c5a0 <iprintf>
    UNLOCK_WIFI();
    return ret;
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
 8008bd0:	e000      	b.n	8008bd4 <ES_WIFI_StopServerSingleConn+0xa4>
  }

  UNLOCK_WIFI();
  return ret;
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	0800e0d4 	.word	0x0800e0d4
 8008be0:	0800e164 	.word	0x0800e164
 8008be4:	0800e180 	.word	0x0800e180
 8008be8:	0800e220 	.word	0x0800e220
 8008bec:	0800e240 	.word	0x0800e240
 8008bf0:	0800e248 	.word	0x0800e248

08008bf4 <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b088      	sub	sp, #32
 8008bf8:	af02      	add	r7, sp, #8
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	607a      	str	r2, [r7, #4]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	460b      	mov	r3, r1
 8008c02:	72fb      	strb	r3, [r7, #11]
 8008c04:	4613      	mov	r3, r2
 8008c06:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8008c08:	2302      	movs	r3, #2
 8008c0a:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d102      	bne.n	8008c18 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8008c12:	2301      	movs	r3, #1
 8008c14:	617b      	str	r3, [r7, #20]
 8008c16:	e001      	b.n	8008c1c <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8008c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1a:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 8008c1c:	893b      	ldrh	r3, [r7, #8]
 8008c1e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8008c22:	d302      	bcc.n	8008c2a <ES_WIFI_SendData+0x36>
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
 8008c24:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008c28:	813b      	strh	r3, [r7, #8]
  }

  *SentLen = Reqlen;
 8008c2a:	6a3b      	ldr	r3, [r7, #32]
 8008c2c:	893a      	ldrh	r2, [r7, #8]
 8008c2e:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008c36:	7afa      	ldrb	r2, [r7, #11]
 8008c38:	4942      	ldr	r1, [pc, #264]	; (8008d44 <ES_WIFI_SendData+0x150>)
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f003 fd1e 	bl	800c67c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f7ff fa3c 	bl	80080cc <AT_ExecuteCommand>
 8008c54:	4603      	mov	r3, r0
 8008c56:	74fb      	strb	r3, [r7, #19]
  if (ret == ES_WIFI_STATUS_OK)
 8008c58:	7cfb      	ldrb	r3, [r7, #19]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d15e      	bne.n	8008d1c <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	4938      	ldr	r1, [pc, #224]	; (8008d48 <ES_WIFI_SendData+0x154>)
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f003 fd07 	bl	800c67c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f7ff fa25 	bl	80080cc <AT_ExecuteCommand>
 8008c82:	4603      	mov	r3, r0
 8008c84:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8008c86:	7cfb      	ldrb	r3, [r7, #19]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d13d      	bne.n	8008d08 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008c92:	893a      	ldrh	r2, [r7, #8]
 8008c94:	492d      	ldr	r1, [pc, #180]	; (8008d4c <ES_WIFI_SendData+0x158>)
 8008c96:	4618      	mov	r0, r3
 8008c98:	f003 fcf0 	bl	800c67c <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008ca8:	893a      	ldrh	r2, [r7, #8]
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	4613      	mov	r3, r2
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f7ff fa7b 	bl	80081ac <AT_RequestSendData>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	74fb      	strb	r3, [r7, #19]

      if (ret == ES_WIFI_STATUS_OK)
 8008cba:	7cfb      	ldrb	r3, [r7, #19]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d119      	bne.n	8008cf4 <ES_WIFI_SendData+0x100>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008cc6:	4922      	ldr	r1, [pc, #136]	; (8008d50 <ES_WIFI_SendData+0x15c>)
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f003 fe77 	bl	800c9bc <strstr>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d02c      	beq.n	8008d2e <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8008cd4:	f640 1201 	movw	r2, #2305	; 0x901
 8008cd8:	491e      	ldr	r1, [pc, #120]	; (8008d54 <ES_WIFI_SendData+0x160>)
 8008cda:	481f      	ldr	r0, [pc, #124]	; (8008d58 <ES_WIFI_SendData+0x164>)
 8008cdc:	f003 fc60 	bl	800c5a0 <iprintf>
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	481c      	ldr	r0, [pc, #112]	; (8008d5c <ES_WIFI_SendData+0x168>)
 8008cea:	f003 fc59 	bl	800c5a0 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 8008cee:	2302      	movs	r3, #2
 8008cf0:	74fb      	strb	r3, [r7, #19]
 8008cf2:	e01c      	b.n	8008d2e <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 8008cf4:	f640 1207 	movw	r2, #2311	; 0x907
 8008cf8:	4916      	ldr	r1, [pc, #88]	; (8008d54 <ES_WIFI_SendData+0x160>)
 8008cfa:	4817      	ldr	r0, [pc, #92]	; (8008d58 <ES_WIFI_SendData+0x164>)
 8008cfc:	f003 fc50 	bl	800c5a0 <iprintf>
 8008d00:	4817      	ldr	r0, [pc, #92]	; (8008d60 <ES_WIFI_SendData+0x16c>)
 8008d02:	f003 fcb3 	bl	800c66c <puts>
 8008d06:	e012      	b.n	8008d2e <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 8008d08:	f640 120c 	movw	r2, #2316	; 0x90c
 8008d0c:	4911      	ldr	r1, [pc, #68]	; (8008d54 <ES_WIFI_SendData+0x160>)
 8008d0e:	4812      	ldr	r0, [pc, #72]	; (8008d58 <ES_WIFI_SendData+0x164>)
 8008d10:	f003 fc46 	bl	800c5a0 <iprintf>
 8008d14:	4813      	ldr	r0, [pc, #76]	; (8008d64 <ES_WIFI_SendData+0x170>)
 8008d16:	f003 fca9 	bl	800c66c <puts>
 8008d1a:	e008      	b.n	8008d2e <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 8008d1c:	f640 1211 	movw	r2, #2321	; 0x911
 8008d20:	490c      	ldr	r1, [pc, #48]	; (8008d54 <ES_WIFI_SendData+0x160>)
 8008d22:	480d      	ldr	r0, [pc, #52]	; (8008d58 <ES_WIFI_SendData+0x164>)
 8008d24:	f003 fc3c 	bl	800c5a0 <iprintf>
 8008d28:	480f      	ldr	r0, [pc, #60]	; (8008d68 <ES_WIFI_SendData+0x174>)
 8008d2a:	f003 fc9f 	bl	800c66c <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8008d2e:	7cfb      	ldrb	r3, [r7, #19]
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d102      	bne.n	8008d3a <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 8008d34:	6a3b      	ldr	r3, [r7, #32]
 8008d36:	2200      	movs	r2, #0
 8008d38:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();

  return ret;
 8008d3a:	7cfb      	ldrb	r3, [r7, #19]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3718      	adds	r7, #24
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	0800e0d4 	.word	0x0800e0d4
 8008d48:	0800e28c 	.word	0x0800e28c
 8008d4c:	0800e294 	.word	0x0800e294
 8008d50:	0800e2a0 	.word	0x0800e2a0
 8008d54:	0800e164 	.word	0x0800e164
 8008d58:	0800e180 	.word	0x0800e180
 8008d5c:	0800e2a8 	.word	0x0800e2a8
 8008d60:	0800e2c4 	.word	0x0800e2c4
 8008d64:	0800e2e0 	.word	0x0800e2e0
 8008d68:	0800e2f4 	.word	0x0800e2f4

08008d6c <ES_WIFI_ReceiveData>:
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen,
                                     uint16_t *Receivedlen, uint32_t Timeout)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b088      	sub	sp, #32
 8008d70:	af02      	add	r7, sp, #8
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	607a      	str	r2, [r7, #4]
 8008d76:	461a      	mov	r2, r3
 8008d78:	460b      	mov	r3, r1
 8008d7a:	72fb      	strb	r3, [r7, #11]
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8008d80:	2302      	movs	r3, #2
 8008d82:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8008d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d102      	bne.n	8008d90 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	617b      	str	r3, [r7, #20]
 8008d8e:	e001      	b.n	8008d94 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE)
 8008d94:	893b      	ldrh	r3, [r7, #8]
 8008d96:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8008d9a:	f200 808b 	bhi.w	8008eb4 <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008da4:	7afa      	ldrb	r2, [r7, #11]
 8008da6:	4946      	ldr	r1, [pc, #280]	; (8008ec0 <ES_WIFI_ReceiveData+0x154>)
 8008da8:	4618      	mov	r0, r3
 8008daa:	f003 fc67 	bl	800c67c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008dba:	461a      	mov	r2, r3
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f7ff f985 	bl	80080cc <AT_ExecuteCommand>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8008dc6:	7cfb      	ldrb	r3, [r7, #19]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d165      	bne.n	8008e98 <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008dd2:	893a      	ldrh	r2, [r7, #8]
 8008dd4:	493b      	ldr	r1, [pc, #236]	; (8008ec4 <ES_WIFI_ReceiveData+0x158>)
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f003 fc50 	bl	800c67c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008de8:	461a      	mov	r2, r3
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f7ff f96e 	bl	80080cc <AT_ExecuteCommand>
 8008df0:	4603      	mov	r3, r0
 8008df2:	74fb      	strb	r3, [r7, #19]
      if (ret == ES_WIFI_STATUS_OK)
 8008df4:	7cfb      	ldrb	r3, [r7, #19]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d141      	bne.n	8008e7e <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008e00:	697a      	ldr	r2, [r7, #20]
 8008e02:	4931      	ldr	r1, [pc, #196]	; (8008ec8 <ES_WIFI_ReceiveData+0x15c>)
 8008e04:	4618      	mov	r0, r3
 8008e06:	f003 fc39 	bl	800c67c <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008e16:	461a      	mov	r2, r3
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f7ff f957 	bl	80080cc <AT_ExecuteCommand>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	74fb      	strb	r3, [r7, #19]
        if (ret == ES_WIFI_STATUS_OK)
 8008e22:	7cfb      	ldrb	r3, [r7, #19]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d120      	bne.n	8008e6a <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008e2e:	4927      	ldr	r1, [pc, #156]	; (8008ecc <ES_WIFI_ReceiveData+0x160>)
 8008e30:	4618      	mov	r0, r3
 8008e32:	f003 fc23 	bl	800c67c <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008e3c:	893a      	ldrh	r2, [r7, #8]
 8008e3e:	6a3b      	ldr	r3, [r7, #32]
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	4613      	mov	r3, r2
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f7ff fa30 	bl	80082ac <AT_RequestReceiveData>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 8008e50:	7cfb      	ldrb	r3, [r7, #19]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d02e      	beq.n	8008eb4 <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData failed\n");
 8008e56:	f640 12a9 	movw	r2, #2473	; 0x9a9
 8008e5a:	491d      	ldr	r1, [pc, #116]	; (8008ed0 <ES_WIFI_ReceiveData+0x164>)
 8008e5c:	481d      	ldr	r0, [pc, #116]	; (8008ed4 <ES_WIFI_ReceiveData+0x168>)
 8008e5e:	f003 fb9f 	bl	800c5a0 <iprintf>
 8008e62:	481d      	ldr	r0, [pc, #116]	; (8008ed8 <ES_WIFI_ReceiveData+0x16c>)
 8008e64:	f003 fc02 	bl	800c66c <puts>
 8008e68:	e024      	b.n	8008eb4 <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("Setting timeout failed\n");
 8008e6a:	f640 12ae 	movw	r2, #2478	; 0x9ae
 8008e6e:	4918      	ldr	r1, [pc, #96]	; (8008ed0 <ES_WIFI_ReceiveData+0x164>)
 8008e70:	4818      	ldr	r0, [pc, #96]	; (8008ed4 <ES_WIFI_ReceiveData+0x168>)
 8008e72:	f003 fb95 	bl	800c5a0 <iprintf>
 8008e76:	4819      	ldr	r0, [pc, #100]	; (8008edc <ES_WIFI_ReceiveData+0x170>)
 8008e78:	f003 fbf8 	bl	800c66c <puts>
 8008e7c:	e01a      	b.n	8008eb4 <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("Setting requested len failed\n");
 8008e7e:	f640 12b3 	movw	r2, #2483	; 0x9b3
 8008e82:	4913      	ldr	r1, [pc, #76]	; (8008ed0 <ES_WIFI_ReceiveData+0x164>)
 8008e84:	4813      	ldr	r0, [pc, #76]	; (8008ed4 <ES_WIFI_ReceiveData+0x168>)
 8008e86:	f003 fb8b 	bl	800c5a0 <iprintf>
 8008e8a:	4815      	ldr	r0, [pc, #84]	; (8008ee0 <ES_WIFI_ReceiveData+0x174>)
 8008e8c:	f003 fbee 	bl	800c66c <puts>
        *Receivedlen = 0;
 8008e90:	6a3b      	ldr	r3, [r7, #32]
 8008e92:	2200      	movs	r2, #0
 8008e94:	801a      	strh	r2, [r3, #0]
 8008e96:	e00d      	b.n	8008eb4 <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("Setting socket for read failed\n");
 8008e98:	f640 12b9 	movw	r2, #2489	; 0x9b9
 8008e9c:	490c      	ldr	r1, [pc, #48]	; (8008ed0 <ES_WIFI_ReceiveData+0x164>)
 8008e9e:	480d      	ldr	r0, [pc, #52]	; (8008ed4 <ES_WIFI_ReceiveData+0x168>)
 8008ea0:	f003 fb7e 	bl	800c5a0 <iprintf>
 8008ea4:	480f      	ldr	r0, [pc, #60]	; (8008ee4 <ES_WIFI_ReceiveData+0x178>)
 8008ea6:	f003 fbe1 	bl	800c66c <puts>
      issue15++;
 8008eaa:	4b0f      	ldr	r3, [pc, #60]	; (8008ee8 <ES_WIFI_ReceiveData+0x17c>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	4a0d      	ldr	r2, [pc, #52]	; (8008ee8 <ES_WIFI_ReceiveData+0x17c>)
 8008eb2:	6013      	str	r3, [r2, #0]
    }
  }

  UNLOCK_WIFI();

  return ret;
 8008eb4:	7cfb      	ldrb	r3, [r7, #19]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3718      	adds	r7, #24
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	0800e0d4 	.word	0x0800e0d4
 8008ec4:	0800e318 	.word	0x0800e318
 8008ec8:	0800e320 	.word	0x0800e320
 8008ecc:	0800e328 	.word	0x0800e328
 8008ed0:	0800e164 	.word	0x0800e164
 8008ed4:	0800e180 	.word	0x0800e180
 8008ed8:	0800e32c 	.word	0x0800e32c
 8008edc:	0800e34c 	.word	0x0800e34c
 8008ee0:	0800e364 	.word	0x0800e364
 8008ee4:	0800e384 	.word	0x0800e384
 8008ee8:	20001514 	.word	0x20001514

08008eec <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b08c      	sub	sp, #48	; 0x30
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_Init;

  __HAL_RCC_SPI3_CLK_ENABLE();
 8008ef4:	4b57      	ldr	r3, [pc, #348]	; (8009054 <SPI_WIFI_MspInit+0x168>)
 8008ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ef8:	4a56      	ldr	r2, [pc, #344]	; (8009054 <SPI_WIFI_MspInit+0x168>)
 8008efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008efe:	6593      	str	r3, [r2, #88]	; 0x58
 8008f00:	4b54      	ldr	r3, [pc, #336]	; (8009054 <SPI_WIFI_MspInit+0x168>)
 8008f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f08:	61bb      	str	r3, [r7, #24]
 8008f0a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f0c:	4b51      	ldr	r3, [pc, #324]	; (8009054 <SPI_WIFI_MspInit+0x168>)
 8008f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f10:	4a50      	ldr	r2, [pc, #320]	; (8009054 <SPI_WIFI_MspInit+0x168>)
 8008f12:	f043 0302 	orr.w	r3, r3, #2
 8008f16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f18:	4b4e      	ldr	r3, [pc, #312]	; (8009054 <SPI_WIFI_MspInit+0x168>)
 8008f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f1c:	f003 0302 	and.w	r3, r3, #2
 8008f20:	617b      	str	r3, [r7, #20]
 8008f22:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008f24:	4b4b      	ldr	r3, [pc, #300]	; (8009054 <SPI_WIFI_MspInit+0x168>)
 8008f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f28:	4a4a      	ldr	r2, [pc, #296]	; (8009054 <SPI_WIFI_MspInit+0x168>)
 8008f2a:	f043 0304 	orr.w	r3, r3, #4
 8008f2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f30:	4b48      	ldr	r3, [pc, #288]	; (8009054 <SPI_WIFI_MspInit+0x168>)
 8008f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f34:	f003 0304 	and.w	r3, r3, #4
 8008f38:	613b      	str	r3, [r7, #16]
 8008f3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008f3c:	4b45      	ldr	r3, [pc, #276]	; (8009054 <SPI_WIFI_MspInit+0x168>)
 8008f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f40:	4a44      	ldr	r2, [pc, #272]	; (8009054 <SPI_WIFI_MspInit+0x168>)
 8008f42:	f043 0310 	orr.w	r3, r3, #16
 8008f46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f48:	4b42      	ldr	r3, [pc, #264]	; (8009054 <SPI_WIFI_MspInit+0x168>)
 8008f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f4c:	f003 0310 	and.w	r3, r3, #16
 8008f50:	60fb      	str	r3, [r7, #12]
 8008f52:	68fb      	ldr	r3, [r7, #12]

  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8008f54:	2200      	movs	r2, #0
 8008f56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008f5a:	483f      	ldr	r0, [pc, #252]	; (8009058 <SPI_WIFI_MspInit+0x16c>)
 8008f5c:	f7f9 fcf6 	bl	800294c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8008f60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f64:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8008f66:	2301      	movs	r3, #1
 8008f68:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8008f72:	f107 031c 	add.w	r3, r7, #28
 8008f76:	4619      	mov	r1, r3
 8008f78:	4837      	ldr	r0, [pc, #220]	; (8009058 <SPI_WIFI_MspInit+0x16c>)
 8008f7a:	f7f9 fa31 	bl	80023e0 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8008f7e:	2302      	movs	r3, #2
 8008f80:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8008f82:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8008f86:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8008f90:	f107 031c 	add.w	r3, r7, #28
 8008f94:	4619      	mov	r1, r3
 8008f96:	4831      	ldr	r0, [pc, #196]	; (800905c <SPI_WIFI_MspInit+0x170>)
 8008f98:	f7f9 fa22 	bl	80023e0 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8008f9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fa0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8008faa:	2300      	movs	r3, #0
 8008fac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8008fb2:	f107 031c 	add.w	r3, r7, #28
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	4828      	ldr	r0, [pc, #160]	; (800905c <SPI_WIFI_MspInit+0x170>)
 8008fba:	f7f9 fa11 	bl	80023e0 <HAL_GPIO_Init>

  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	2101      	movs	r1, #1
 8008fc2:	4826      	ldr	r0, [pc, #152]	; (800905c <SPI_WIFI_MspInit+0x170>)
 8008fc4:	f7f9 fcc2 	bl	800294c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8008fd8:	f107 031c 	add.w	r3, r7, #28
 8008fdc:	4619      	mov	r1, r3
 8008fde:	481f      	ldr	r0, [pc, #124]	; (800905c <SPI_WIFI_MspInit+0x170>)
 8008fe0:	f7f9 f9fe 	bl	80023e0 <HAL_GPIO_Init>

  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8008fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fe8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8008fea:	2302      	movs	r3, #2
 8008fec:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8008ff6:	2306      	movs	r3, #6
 8008ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8008ffa:	f107 031c 	add.w	r3, r7, #28
 8008ffe:	4619      	mov	r1, r3
 8009000:	4817      	ldr	r0, [pc, #92]	; (8009060 <SPI_WIFI_MspInit+0x174>)
 8009002:	f7f9 f9ed 	bl	80023e0 <HAL_GPIO_Init>

  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8009006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800900a:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800900c:	2302      	movs	r3, #2
 800900e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8009010:	2300      	movs	r3, #0
 8009012:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8009014:	2301      	movs	r3, #1
 8009016:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8009018:	2306      	movs	r3, #6
 800901a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800901c:	f107 031c 	add.w	r3, r7, #28
 8009020:	4619      	mov	r1, r3
 8009022:	480f      	ldr	r0, [pc, #60]	; (8009060 <SPI_WIFI_MspInit+0x174>)
 8009024:	f7f9 f9dc 	bl	80023e0 <HAL_GPIO_Init>

  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8009028:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800902c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800902e:	2302      	movs	r3, #2
 8009030:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8009032:	2301      	movs	r3, #1
 8009034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8009036:	2301      	movs	r3, #1
 8009038:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800903a:	2306      	movs	r3, #6
 800903c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800903e:	f107 031c 	add.w	r3, r7, #28
 8009042:	4619      	mov	r1, r3
 8009044:	4806      	ldr	r0, [pc, #24]	; (8009060 <SPI_WIFI_MspInit+0x174>)
 8009046:	f7f9 f9cb 	bl	80023e0 <HAL_GPIO_Init>
}
 800904a:	bf00      	nop
 800904c:	3730      	adds	r7, #48	; 0x30
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	40021000 	.word	0x40021000
 8009058:	48000400 	.word	0x48000400
 800905c:	48001000 	.word	0x48001000
 8009060:	48000800 	.word	0x48000800

08009064 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	4603      	mov	r3, r0
 800906c:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 800906e:	2300      	movs	r3, #0
 8009070:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 8009072:	88fb      	ldrh	r3, [r7, #6]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d145      	bne.n	8009104 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8009078:	4b27      	ldr	r3, [pc, #156]	; (8009118 <SPI_WIFI_Init+0xb4>)
 800907a:	4a28      	ldr	r2, [pc, #160]	; (800911c <SPI_WIFI_Init+0xb8>)
 800907c:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 800907e:	4826      	ldr	r0, [pc, #152]	; (8009118 <SPI_WIFI_Init+0xb4>)
 8009080:	f7ff ff34 	bl	8008eec <SPI_WIFI_MspInit>

    hspi.Init.Mode              = SPI_MODE_MASTER;
 8009084:	4b24      	ldr	r3, [pc, #144]	; (8009118 <SPI_WIFI_Init+0xb4>)
 8009086:	f44f 7282 	mov.w	r2, #260	; 0x104
 800908a:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800908c:	4b22      	ldr	r3, [pc, #136]	; (8009118 <SPI_WIFI_Init+0xb4>)
 800908e:	2200      	movs	r2, #0
 8009090:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8009092:	4b21      	ldr	r3, [pc, #132]	; (8009118 <SPI_WIFI_Init+0xb4>)
 8009094:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8009098:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800909a:	4b1f      	ldr	r3, [pc, #124]	; (8009118 <SPI_WIFI_Init+0xb4>)
 800909c:	2200      	movs	r2, #0
 800909e:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80090a0:	4b1d      	ldr	r3, [pc, #116]	; (8009118 <SPI_WIFI_Init+0xb4>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 80090a6:	4b1c      	ldr	r3, [pc, #112]	; (8009118 <SPI_WIFI_Init+0xb4>)
 80090a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090ac:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 80090ae:	4b1a      	ldr	r3, [pc, #104]	; (8009118 <SPI_WIFI_Init+0xb4>)
 80090b0:	2210      	movs	r2, #16
 80090b2:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80090b4:	4b18      	ldr	r3, [pc, #96]	; (8009118 <SPI_WIFI_Init+0xb4>)
 80090b6:	2200      	movs	r2, #0
 80090b8:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 80090ba:	4b17      	ldr	r3, [pc, #92]	; (8009118 <SPI_WIFI_Init+0xb4>)
 80090bc:	2200      	movs	r2, #0
 80090be:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80090c0:	4b15      	ldr	r3, [pc, #84]	; (8009118 <SPI_WIFI_Init+0xb4>)
 80090c2:	2200      	movs	r2, #0
 80090c4:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 80090c6:	4b14      	ldr	r3, [pc, #80]	; (8009118 <SPI_WIFI_Init+0xb4>)
 80090c8:	2200      	movs	r2, #0
 80090ca:	62da      	str	r2, [r3, #44]	; 0x2c

    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 80090cc:	4812      	ldr	r0, [pc, #72]	; (8009118 <SPI_WIFI_Init+0xb4>)
 80090ce:	f7fc f809 	bl	80050e4 <HAL_SPI_Init>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d002      	beq.n	80090de <SPI_WIFI_Init+0x7a>
    {
      return -1;
 80090d8:	f04f 33ff 	mov.w	r3, #4294967295
 80090dc:	e018      	b.n	8009110 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 80090de:	2200      	movs	r2, #0
 80090e0:	2100      	movs	r1, #0
 80090e2:	2007      	movs	r0, #7
 80090e4:	f7f8 ffe9 	bl	80020ba <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 80090e8:	2007      	movs	r0, #7
 80090ea:	f7f9 f802 	bl	80020f2 <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 80090ee:	2200      	movs	r2, #0
 80090f0:	2100      	movs	r1, #0
 80090f2:	2033      	movs	r0, #51	; 0x33
 80090f4:	f7f8 ffe1 	bl	80020ba <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 80090f8:	2033      	movs	r0, #51	; 0x33
 80090fa:	f7f8 fffa 	bl	80020f2 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(cmddata_rdy_rising_sem, 1);
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);
#endif /* WIFI_USE_CMSIS_OS */
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 80090fe:	200a      	movs	r0, #10
 8009100:	f000 f9fe 	bl	8009500 <SPI_WIFI_DelayUs>
  }

  rc = SPI_WIFI_ResetModule();
 8009104:	f000 f80c 	bl	8009120 <SPI_WIFI_ResetModule>
 8009108:	4603      	mov	r3, r0
 800910a:	73fb      	strb	r3, [r7, #15]

  return rc;
 800910c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	20001518 	.word	0x20001518
 800911c:	40003c00 	.word	0x40003c00

08009120 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8009126:	f7f8 fe99 	bl	8001e5c <HAL_GetTick>
 800912a:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 800912c:	2300      	movs	r3, #0
 800912e:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;

  WIFI_RESET_MODULE();
 8009130:	2200      	movs	r2, #0
 8009132:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009136:	4830      	ldr	r0, [pc, #192]	; (80091f8 <SPI_WIFI_ResetModule+0xd8>)
 8009138:	f7f9 fc08 	bl	800294c <HAL_GPIO_WritePin>
 800913c:	200a      	movs	r0, #10
 800913e:	f7f8 fe99 	bl	8001e74 <HAL_Delay>
 8009142:	2201      	movs	r2, #1
 8009144:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009148:	482b      	ldr	r0, [pc, #172]	; (80091f8 <SPI_WIFI_ResetModule+0xd8>)
 800914a:	f7f9 fbff 	bl	800294c <HAL_GPIO_WritePin>
 800914e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009152:	f7f8 fe8f 	bl	8001e74 <HAL_Delay>
  WIFI_ENABLE_NSS();
 8009156:	2200      	movs	r2, #0
 8009158:	2101      	movs	r1, #1
 800915a:	4827      	ldr	r0, [pc, #156]	; (80091f8 <SPI_WIFI_ResetModule+0xd8>)
 800915c:	f7f9 fbf6 	bl	800294c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8009160:	200f      	movs	r0, #15
 8009162:	f000 f9cd 	bl	8009500 <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 8009166:	e020      	b.n	80091aa <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8009168:	7bfb      	ldrb	r3, [r7, #15]
 800916a:	463a      	mov	r2, r7
 800916c:	18d1      	adds	r1, r2, r3
 800916e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009172:	2201      	movs	r2, #1
 8009174:	4821      	ldr	r0, [pc, #132]	; (80091fc <SPI_WIFI_ResetModule+0xdc>)
 8009176:	f7fc f880 	bl	800527a <HAL_SPI_Receive>
 800917a:	4603      	mov	r3, r0
 800917c:	71fb      	strb	r3, [r7, #7]
    count += 2;
 800917e:	7bfb      	ldrb	r3, [r7, #15]
 8009180:	3302      	adds	r3, #2
 8009182:	73fb      	strb	r3, [r7, #15]
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 8009184:	f7f8 fe6a 	bl	8001e5c <HAL_GetTick>
 8009188:	4602      	mov	r2, r0
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009192:	d202      	bcs.n	800919a <SPI_WIFI_ResetModule+0x7a>
 8009194:	79fb      	ldrb	r3, [r7, #7]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d007      	beq.n	80091aa <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 800919a:	2201      	movs	r2, #1
 800919c:	2101      	movs	r1, #1
 800919e:	4816      	ldr	r0, [pc, #88]	; (80091f8 <SPI_WIFI_ResetModule+0xd8>)
 80091a0:	f7f9 fbd4 	bl	800294c <HAL_GPIO_WritePin>
      return -1;
 80091a4:	f04f 33ff 	mov.w	r3, #4294967295
 80091a8:	e021      	b.n	80091ee <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 80091aa:	2102      	movs	r1, #2
 80091ac:	4812      	ldr	r0, [pc, #72]	; (80091f8 <SPI_WIFI_ResetModule+0xd8>)
 80091ae:	f7f9 fbb5 	bl	800291c <HAL_GPIO_ReadPin>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d0d7      	beq.n	8009168 <SPI_WIFI_ResetModule+0x48>
    }
  }

  WIFI_DISABLE_NSS();
 80091b8:	2201      	movs	r2, #1
 80091ba:	2101      	movs	r1, #1
 80091bc:	480e      	ldr	r0, [pc, #56]	; (80091f8 <SPI_WIFI_ResetModule+0xd8>)
 80091be:	f7f9 fbc5 	bl	800294c <HAL_GPIO_WritePin>

  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 80091c2:	783b      	ldrb	r3, [r7, #0]
 80091c4:	2b15      	cmp	r3, #21
 80091c6:	d10e      	bne.n	80091e6 <SPI_WIFI_ResetModule+0xc6>
 80091c8:	787b      	ldrb	r3, [r7, #1]
 80091ca:	2b15      	cmp	r3, #21
 80091cc:	d10b      	bne.n	80091e6 <SPI_WIFI_ResetModule+0xc6>
 80091ce:	78bb      	ldrb	r3, [r7, #2]
 80091d0:	2b0d      	cmp	r3, #13
 80091d2:	d108      	bne.n	80091e6 <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 80091d4:	78fb      	ldrb	r3, [r7, #3]
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 80091d6:	2b0a      	cmp	r3, #10
 80091d8:	d105      	bne.n	80091e6 <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 80091da:	793b      	ldrb	r3, [r7, #4]
 80091dc:	2b3e      	cmp	r3, #62	; 0x3e
 80091de:	d102      	bne.n	80091e6 <SPI_WIFI_ResetModule+0xc6>
 80091e0:	797b      	ldrb	r3, [r7, #5]
 80091e2:	2b20      	cmp	r3, #32
 80091e4:	d002      	beq.n	80091ec <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 80091e6:	f04f 33ff 	mov.w	r3, #4294967295
 80091ea:	e000      	b.n	80091ee <SPI_WIFI_ResetModule+0xce>
  }
  return 0;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	48001000 	.word	0x48001000
 80091fc:	20001518 	.word	0x20001518

08009200 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval 0
  */
int8_t SPI_WIFI_DeInit(void)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8009204:	4802      	ldr	r0, [pc, #8]	; (8009210 <SPI_WIFI_DeInit+0x10>)
 8009206:	f7fc f810 	bl	800522a <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif /* WIFI_USE_CMSIS_OS */
  return 0;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	bd80      	pop	{r7, pc}
 8009210:	20001518 	.word	0x20001518

08009214 <wait_cmddata_rdy_high>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
static int wait_cmddata_rdy_high(int timeout)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 800921c:	f7f8 fe1e 	bl	8001e5c <HAL_GetTick>
 8009220:	4603      	mov	r3, r0
 8009222:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY() == 0)
 8009224:	e00a      	b.n	800923c <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8009226:	f7f8 fe19 	bl	8001e5c <HAL_GetTick>
 800922a:	4602      	mov	r2, r0
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	1ad2      	subs	r2, r2, r3
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	429a      	cmp	r2, r3
 8009234:	d902      	bls.n	800923c <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8009236:	f04f 33ff 	mov.w	r3, #4294967295
 800923a:	e007      	b.n	800924c <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY() == 0)
 800923c:	2102      	movs	r1, #2
 800923e:	4805      	ldr	r0, [pc, #20]	; (8009254 <wait_cmddata_rdy_high+0x40>)
 8009240:	f7f9 fb6c 	bl	800291c <HAL_GPIO_ReadPin>
 8009244:	4603      	mov	r3, r0
 8009246:	2b01      	cmp	r3, #1
 8009248:	d1ed      	bne.n	8009226 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	48001000 	.word	0x48001000

08009258 <wait_cmddata_rdy_rising_event>:


static int wait_cmddata_rdy_rising_event(int timeout)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8009260:	f7f8 fdfc 	bl	8001e5c <HAL_GetTick>
 8009264:	4603      	mov	r3, r0
 8009266:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event == 1)
 8009268:	e00a      	b.n	8009280 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800926a:	f7f8 fdf7 	bl	8001e5c <HAL_GetTick>
 800926e:	4602      	mov	r2, r0
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	1ad2      	subs	r2, r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	429a      	cmp	r2, r3
 8009278:	d902      	bls.n	8009280 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800927a:	f04f 33ff 	mov.w	r3, #4294967295
 800927e:	e004      	b.n	800928a <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event == 1)
 8009280:	4b04      	ldr	r3, [pc, #16]	; (8009294 <wait_cmddata_rdy_rising_event+0x3c>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2b01      	cmp	r3, #1
 8009286:	d0f0      	beq.n	800926a <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8009288:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	20001584 	.word	0x20001584

08009298 <wait_spi_rx_event>:


static int wait_spi_rx_event(int timeout)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80092a0:	f7f8 fddc 	bl	8001e5c <HAL_GetTick>
 80092a4:	4603      	mov	r3, r0
 80092a6:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event == 1)
 80092a8:	e00a      	b.n	80092c0 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80092aa:	f7f8 fdd7 	bl	8001e5c <HAL_GetTick>
 80092ae:	4602      	mov	r2, r0
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	1ad2      	subs	r2, r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d902      	bls.n	80092c0 <wait_spi_rx_event+0x28>
    {
      return -1;
 80092ba:	f04f 33ff 	mov.w	r3, #4294967295
 80092be:	e004      	b.n	80092ca <wait_spi_rx_event+0x32>
  while (spi_rx_event == 1)
 80092c0:	4b04      	ldr	r3, [pc, #16]	; (80092d4 <wait_spi_rx_event+0x3c>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d0f0      	beq.n	80092aa <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 80092c8:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	2000157c 	.word	0x2000157c

080092d8 <wait_spi_tx_event>:


static int wait_spi_tx_event(int timeout)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80092e0:	f7f8 fdbc 	bl	8001e5c <HAL_GetTick>
 80092e4:	4603      	mov	r3, r0
 80092e6:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event == 1)
 80092e8:	e00a      	b.n	8009300 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80092ea:	f7f8 fdb7 	bl	8001e5c <HAL_GetTick>
 80092ee:	4602      	mov	r2, r0
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	1ad2      	subs	r2, r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d902      	bls.n	8009300 <wait_spi_tx_event+0x28>
    {
      return -1;
 80092fa:	f04f 33ff 	mov.w	r3, #4294967295
 80092fe:	e004      	b.n	800930a <wait_spi_tx_event+0x32>
  while (spi_tx_event == 1)
 8009300:	4b04      	ldr	r3, [pc, #16]	; (8009314 <wait_spi_tx_event+0x3c>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2b01      	cmp	r3, #1
 8009306:	d0f0      	beq.n	80092ea <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8009308:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	20001580 	.word	0x20001580

08009318 <SPI_WIFI_ReceiveData>:


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	460b      	mov	r3, r1
 8009322:	607a      	str	r2, [r7, #4]
 8009324:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8009326:	2300      	movs	r3, #0
 8009328:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];

  WIFI_DISABLE_NSS();
 800932a:	2201      	movs	r2, #1
 800932c:	2101      	movs	r1, #1
 800932e:	4834      	ldr	r0, [pc, #208]	; (8009400 <SPI_WIFI_ReceiveData+0xe8>)
 8009330:	f7f9 fb0c 	bl	800294c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8009334:	2003      	movs	r0, #3
 8009336:	f000 f8e3 	bl	8009500 <SPI_WIFI_DelayUs>

  if (wait_cmddata_rdy_rising_event(timeout) < 0)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4618      	mov	r0, r3
 800933e:	f7ff ff8b 	bl	8009258 <wait_cmddata_rdy_rising_event>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	da02      	bge.n	800934e <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8009348:	f06f 0302 	mvn.w	r3, #2
 800934c:	e054      	b.n	80093f8 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800934e:	2200      	movs	r2, #0
 8009350:	2101      	movs	r1, #1
 8009352:	482b      	ldr	r0, [pc, #172]	; (8009400 <SPI_WIFI_ReceiveData+0xe8>)
 8009354:	f7f9 fafa 	bl	800294c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8009358:	200f      	movs	r0, #15
 800935a:	f000 f8d1 	bl	8009500 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 800935e:	e03d      	b.n	80093dc <SPI_WIFI_ReceiveData+0xc4>
  {
    if ((length < len) || (!len))
 8009360:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009364:	897b      	ldrh	r3, [r7, #10]
 8009366:	429a      	cmp	r2, r3
 8009368:	db02      	blt.n	8009370 <SPI_WIFI_ReceiveData+0x58>
 800936a:	897b      	ldrh	r3, [r7, #10]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d13c      	bne.n	80093ea <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event = 1;
 8009370:	4b24      	ldr	r3, [pc, #144]	; (8009404 <SPI_WIFI_ReceiveData+0xec>)
 8009372:	2201      	movs	r2, #1
 8009374:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8009376:	f107 0314 	add.w	r3, r7, #20
 800937a:	2201      	movs	r2, #1
 800937c:	4619      	mov	r1, r3
 800937e:	4822      	ldr	r0, [pc, #136]	; (8009408 <SPI_WIFI_ReceiveData+0xf0>)
 8009380:	f7fc fb60 	bl	8005a44 <HAL_SPI_Receive_IT>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d007      	beq.n	800939a <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800938a:	2201      	movs	r2, #1
 800938c:	2101      	movs	r1, #1
 800938e:	481c      	ldr	r0, [pc, #112]	; (8009400 <SPI_WIFI_ReceiveData+0xe8>)
 8009390:	f7f9 fadc 	bl	800294c <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8009394:	f04f 33ff 	mov.w	r3, #4294967295
 8009398:	e02e      	b.n	80093f8 <SPI_WIFI_ReceiveData+0xe0>
      }

      wait_spi_rx_event(timeout);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4618      	mov	r0, r3
 800939e:	f7ff ff7b 	bl	8009298 <wait_spi_rx_event>

      pData[0] = tmp[0];
 80093a2:	7d3a      	ldrb	r2, [r7, #20]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	3301      	adds	r3, #1
 80093ac:	7d7a      	ldrb	r2, [r7, #21]
 80093ae:	701a      	strb	r2, [r3, #0]
      length += 2;
 80093b0:	8afb      	ldrh	r3, [r7, #22]
 80093b2:	3302      	adds	r3, #2
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	3302      	adds	r3, #2
 80093bc:	60fb      	str	r3, [r7, #12]

      if (length >= ES_WIFI_DATA_SIZE) {
 80093be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80093c2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80093c6:	db09      	blt.n	80093dc <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 80093c8:	2201      	movs	r2, #1
 80093ca:	2101      	movs	r1, #1
 80093cc:	480c      	ldr	r0, [pc, #48]	; (8009400 <SPI_WIFI_ReceiveData+0xe8>)
 80093ce:	f7f9 fabd 	bl	800294c <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 80093d2:	f7ff fea5 	bl	8009120 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 80093d6:	f06f 0303 	mvn.w	r3, #3
 80093da:	e00d      	b.n	80093f8 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 80093dc:	2102      	movs	r1, #2
 80093de:	4808      	ldr	r0, [pc, #32]	; (8009400 <SPI_WIFI_ReceiveData+0xe8>)
 80093e0:	f7f9 fa9c 	bl	800291c <HAL_GPIO_ReadPin>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d0ba      	beq.n	8009360 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 80093ea:	2201      	movs	r2, #1
 80093ec:	2101      	movs	r1, #1
 80093ee:	4804      	ldr	r0, [pc, #16]	; (8009400 <SPI_WIFI_ReceiveData+0xe8>)
 80093f0:	f7f9 faac 	bl	800294c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 80093f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3718      	adds	r7, #24
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	48001000 	.word	0x48001000
 8009404:	2000157c 	.word	0x2000157c
 8009408:	20001518 	.word	0x20001518

0800940c <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata, uint16_t len, uint32_t timeout)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	460b      	mov	r3, r1
 8009416:	607a      	str	r2, [r7, #4]
 8009418:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout) < 0)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4618      	mov	r0, r3
 800941e:	f7ff fef9 	bl	8009214 <wait_cmddata_rdy_high>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	da02      	bge.n	800942e <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8009428:	f04f 33ff 	mov.w	r3, #4294967295
 800942c:	e04f      	b.n	80094ce <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event = 1;
 800942e:	4b2a      	ldr	r3, [pc, #168]	; (80094d8 <SPI_WIFI_SendData+0xcc>)
 8009430:	2201      	movs	r2, #1
 8009432:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8009434:	2200      	movs	r2, #0
 8009436:	2101      	movs	r1, #1
 8009438:	4828      	ldr	r0, [pc, #160]	; (80094dc <SPI_WIFI_SendData+0xd0>)
 800943a:	f7f9 fa87 	bl	800294c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800943e:	200f      	movs	r0, #15
 8009440:	f000 f85e 	bl	8009500 <SPI_WIFI_DelayUs>
  if (len > 1)
 8009444:	897b      	ldrh	r3, [r7, #10]
 8009446:	2b01      	cmp	r3, #1
 8009448:	d919      	bls.n	800947e <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event = 1;
 800944a:	4b25      	ldr	r3, [pc, #148]	; (80094e0 <SPI_WIFI_SendData+0xd4>)
 800944c:	2201      	movs	r2, #1
 800944e:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 8009450:	897b      	ldrh	r3, [r7, #10]
 8009452:	085b      	lsrs	r3, r3, #1
 8009454:	b29b      	uxth	r3, r3
 8009456:	461a      	mov	r2, r3
 8009458:	68f9      	ldr	r1, [r7, #12]
 800945a:	4822      	ldr	r0, [pc, #136]	; (80094e4 <SPI_WIFI_SendData+0xd8>)
 800945c:	f7fc fa66 	bl	800592c <HAL_SPI_Transmit_IT>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d007      	beq.n	8009476 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8009466:	2201      	movs	r2, #1
 8009468:	2101      	movs	r1, #1
 800946a:	481c      	ldr	r0, [pc, #112]	; (80094dc <SPI_WIFI_SendData+0xd0>)
 800946c:	f7f9 fa6e 	bl	800294c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8009470:	f04f 33ff 	mov.w	r3, #4294967295
 8009474:	e02b      	b.n	80094ce <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4618      	mov	r0, r3
 800947a:	f7ff ff2d 	bl	80092d8 <wait_spi_tx_event>
  }

  if (len & 1)
 800947e:	897b      	ldrh	r3, [r7, #10]
 8009480:	f003 0301 	and.w	r3, r3, #1
 8009484:	2b00      	cmp	r3, #0
 8009486:	d020      	beq.n	80094ca <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len - 1];
 8009488:	897b      	ldrh	r3, [r7, #10]
 800948a:	3b01      	subs	r3, #1
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	4413      	add	r3, r2
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8009494:	230a      	movs	r3, #10
 8009496:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8009498:	4b11      	ldr	r3, [pc, #68]	; (80094e0 <SPI_WIFI_SendData+0xd4>)
 800949a:	2201      	movs	r2, #1
 800949c:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800949e:	f107 0314 	add.w	r3, r7, #20
 80094a2:	2201      	movs	r2, #1
 80094a4:	4619      	mov	r1, r3
 80094a6:	480f      	ldr	r0, [pc, #60]	; (80094e4 <SPI_WIFI_SendData+0xd8>)
 80094a8:	f7fc fa40 	bl	800592c <HAL_SPI_Transmit_IT>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d007      	beq.n	80094c2 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 80094b2:	2201      	movs	r2, #1
 80094b4:	2101      	movs	r1, #1
 80094b6:	4809      	ldr	r0, [pc, #36]	; (80094dc <SPI_WIFI_SendData+0xd0>)
 80094b8:	f7f9 fa48 	bl	800294c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80094bc:	f04f 33ff 	mov.w	r3, #4294967295
 80094c0:	e005      	b.n	80094ce <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7ff ff07 	bl	80092d8 <wait_spi_tx_event>
  }
  return len;
 80094ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3718      	adds	r7, #24
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	20001584 	.word	0x20001584
 80094dc:	48001000 	.word	0x48001000
 80094e0:	20001580 	.word	0x20001580
 80094e4:	20001518 	.word	0x20001518

080094e8 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7f8 fcbf 	bl	8001e74 <HAL_Delay>
}
 80094f6:	bf00      	nop
 80094f8:	3708      	adds	r7, #8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
	...

08009500 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b086      	sub	sp, #24
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8009508:	2300      	movs	r3, #0
 800950a:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 800950c:	2300      	movs	r3, #0
 800950e:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 8009510:	4b20      	ldr	r3, [pc, #128]	; (8009594 <SPI_WIFI_DelayUs+0x94>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d122      	bne.n	800955e <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 8009518:	4b1f      	ldr	r3, [pc, #124]	; (8009598 <SPI_WIFI_DelayUs+0x98>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a1f      	ldr	r2, [pc, #124]	; (800959c <SPI_WIFI_DelayUs+0x9c>)
 800951e:	fba2 2303 	umull	r2, r3, r2, r3
 8009522:	099b      	lsrs	r3, r3, #6
 8009524:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8009526:	2300      	movs	r3, #0
 8009528:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 800952e:	f7f8 fc95 	bl	8001e5c <HAL_GetTick>
 8009532:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8009534:	e002      	b.n	800953c <SPI_WIFI_DelayUs+0x3c>
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	3b01      	subs	r3, #1
 800953a:	60bb      	str	r3, [r7, #8]
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1f9      	bne.n	8009536 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick() - t;
 8009542:	f7f8 fc8b 	bl	8001e5c <HAL_GetTick>
 8009546:	4602      	mov	r2, r0
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	1ad3      	subs	r3, r2, r3
 800954c:	4a11      	ldr	r2, [pc, #68]	; (8009594 <SPI_WIFI_DelayUs+0x94>)
 800954e:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8009550:	4b10      	ldr	r3, [pc, #64]	; (8009594 <SPI_WIFI_DelayUs+0x94>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d102      	bne.n	800955e <SPI_WIFI_DelayUs+0x5e>
 8009558:	4b0e      	ldr	r3, [pc, #56]	; (8009594 <SPI_WIFI_DelayUs+0x94>)
 800955a:	2201      	movs	r2, #1
 800955c:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 800955e:	4b0e      	ldr	r3, [pc, #56]	; (8009598 <SPI_WIFI_DelayUs+0x98>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a0f      	ldr	r2, [pc, #60]	; (80095a0 <SPI_WIFI_DelayUs+0xa0>)
 8009564:	fba2 2303 	umull	r2, r3, r2, r3
 8009568:	0c9a      	lsrs	r2, r3, #18
 800956a:	4b0a      	ldr	r3, [pc, #40]	; (8009594 <SPI_WIFI_DelayUs+0x94>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009572:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	fb02 f303 	mul.w	r3, r2, r3
 800957c:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 800957e:	e002      	b.n	8009586 <SPI_WIFI_DelayUs+0x86>
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	3b01      	subs	r3, #1
 8009584:	60bb      	str	r3, [r7, #8]
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1f9      	bne.n	8009580 <SPI_WIFI_DelayUs+0x80>
  return;
 800958c:	bf00      	nop
}
 800958e:	3718      	adds	r7, #24
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	20001588 	.word	0x20001588
 8009598:	20000000 	.word	0x20000000
 800959c:	10624dd3 	.word	0x10624dd3
 80095a0:	431bde83 	.word	0x431bde83

080095a4 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 80095ac:	4b06      	ldr	r3, [pc, #24]	; (80095c8 <HAL_SPI_RxCpltCallback+0x24>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d002      	beq.n	80095ba <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 80095b4:	4b04      	ldr	r3, [pc, #16]	; (80095c8 <HAL_SPI_RxCpltCallback+0x24>)
 80095b6:	2200      	movs	r2, #0
 80095b8:	601a      	str	r2, [r3, #0]
  }
}
 80095ba:	bf00      	nop
 80095bc:	370c      	adds	r7, #12
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	2000157c 	.word	0x2000157c

080095cc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 80095d4:	4b06      	ldr	r3, [pc, #24]	; (80095f0 <HAL_SPI_TxCpltCallback+0x24>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d002      	beq.n	80095e2 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 80095dc:	4b04      	ldr	r3, [pc, #16]	; (80095f0 <HAL_SPI_TxCpltCallback+0x24>)
 80095de:	2200      	movs	r2, #0
 80095e0:	601a      	str	r2, [r3, #0]
  }
}
 80095e2:	bf00      	nop
 80095e4:	370c      	adds	r7, #12
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	20001580 	.word	0x20001580

080095f4 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 80095f4:	b480      	push	{r7}
 80095f6:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 80095f8:	4b05      	ldr	r3, [pc, #20]	; (8009610 <SPI_WIFI_ISR+0x1c>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d102      	bne.n	8009606 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8009600:	4b03      	ldr	r3, [pc, #12]	; (8009610 <SPI_WIFI_ISR+0x1c>)
 8009602:	2200      	movs	r2, #0
 8009604:	601a      	str	r2, [r3, #0]
   }
}
 8009606:	bf00      	nop
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr
 8009610:	20001584 	.word	0x20001584

08009614 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800961e:	4b0d      	ldr	r3, [pc, #52]	; (8009654 <WIFI_Init+0x40>)
 8009620:	9301      	str	r3, [sp, #4]
 8009622:	4b0d      	ldr	r3, [pc, #52]	; (8009658 <WIFI_Init+0x44>)
 8009624:	9300      	str	r3, [sp, #0]
 8009626:	4b0d      	ldr	r3, [pc, #52]	; (800965c <WIFI_Init+0x48>)
 8009628:	4a0d      	ldr	r2, [pc, #52]	; (8009660 <WIFI_Init+0x4c>)
 800962a:	490e      	ldr	r1, [pc, #56]	; (8009664 <WIFI_Init+0x50>)
 800962c:	480e      	ldr	r0, [pc, #56]	; (8009668 <WIFI_Init+0x54>)
 800962e:	f7fe ff13 	bl	8008458 <ES_WIFI_RegisterBusIO>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d107      	bne.n	8009648 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8009638:	480b      	ldr	r0, [pc, #44]	; (8009668 <WIFI_Init+0x54>)
 800963a:	f7fe fed9 	bl	80083f0 <ES_WIFI_Init>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d101      	bne.n	8009648 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8009644:	2300      	movs	r3, #0
 8009646:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8009648:	79fb      	ldrb	r3, [r7, #7]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3708      	adds	r7, #8
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	08009319 	.word	0x08009319
 8009658:	0800940d 	.word	0x0800940d
 800965c:	080094e9 	.word	0x080094e9
 8009660:	08009201 	.word	0x08009201
 8009664:	08009065 	.word	0x08009065
 8009668:	2000158c 	.word	0x2000158c

0800966c <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b086      	sub	sp, #24
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	4613      	mov	r3, r2
 8009678:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800967e:	79fb      	ldrb	r3, [r7, #7]
 8009680:	68ba      	ldr	r2, [r7, #8]
 8009682:	68f9      	ldr	r1, [r7, #12]
 8009684:	4809      	ldr	r0, [pc, #36]	; (80096ac <WIFI_Connect+0x40>)
 8009686:	f7fe ff1b 	bl	80084c0 <ES_WIFI_Connect>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d107      	bne.n	80096a0 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8009690:	4806      	ldr	r0, [pc, #24]	; (80096ac <WIFI_Connect+0x40>)
 8009692:	f7fe ffbd 	bl	8008610 <ES_WIFI_GetNetworkSettings>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d101      	bne.n	80096a0 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800969c:	2300      	movs	r3, #0
 800969e:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 80096a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3718      	adds	r7, #24
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	2000158c 	.word	0x2000158c

080096b0 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	460b      	mov	r3, r1
 80096ba:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	73fb      	strb	r3, [r7, #15]

  if ((mac != NULL) && (0 < MacLength))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d00d      	beq.n	80096e2 <WIFI_GetMAC_Address+0x32>
 80096c6:	78fb      	ldrb	r3, [r7, #3]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00a      	beq.n	80096e2 <WIFI_GetMAC_Address+0x32>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 80096cc:	78fb      	ldrb	r3, [r7, #3]
 80096ce:	461a      	mov	r2, r3
 80096d0:	6879      	ldr	r1, [r7, #4]
 80096d2:	4806      	ldr	r0, [pc, #24]	; (80096ec <WIFI_GetMAC_Address+0x3c>)
 80096d4:	f7fe ffc6 	bl	8008664 <ES_WIFI_GetMACAddress>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d101      	bne.n	80096e2 <WIFI_GetMAC_Address+0x32>
    {
      ret = WIFI_STATUS_OK;
 80096de:	2300      	movs	r3, #0
 80096e0:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 80096e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3710      	adds	r7, #16
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	2000158c 	.word	0x2000158c

080096f0 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	460b      	mov	r3, r1
 80096fa:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	73fb      	strb	r3, [r7, #15]

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d010      	beq.n	8009728 <WIFI_GetIP_Address+0x38>
 8009706:	78fb      	ldrb	r3, [r7, #3]
 8009708:	2b03      	cmp	r3, #3
 800970a:	d90d      	bls.n	8009728 <WIFI_GetIP_Address+0x38>
  {
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 800970c:	4809      	ldr	r0, [pc, #36]	; (8009734 <WIFI_GetIP_Address+0x44>)
 800970e:	f7fe ff4f 	bl	80085b0 <ES_WIFI_IsConnected>
 8009712:	4603      	mov	r3, r0
 8009714:	2b01      	cmp	r3, #1
 8009716:	d107      	bne.n	8009728 <WIFI_GetIP_Address+0x38>
 8009718:	4b06      	ldr	r3, [pc, #24]	; (8009734 <WIFI_GetIP_Address+0x44>)
 800971a:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 800971e:	461a      	mov	r2, r3
    {
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	601a      	str	r2, [r3, #0]
      ret = WIFI_STATUS_OK;
 8009724:	2300      	movs	r3, #0
 8009726:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8009728:	7bfb      	ldrb	r3, [r7, #15]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	2000158c 	.word	0x2000158c

08009738 <WIFI_StartServer>:
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, uint16_t backlog ,const char *name,
                               uint16_t port)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b08a      	sub	sp, #40	; 0x28
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	607b      	str	r3, [r7, #4]
 8009742:	460b      	mov	r3, r1
 8009744:	72fb      	strb	r3, [r7, #11]
 8009746:	4613      	mov	r3, r2
 8009748:	813b      	strh	r3, [r7, #8]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	b2db      	uxtb	r3, r3
 8009754:	747b      	strb	r3, [r7, #17]
  conn.LocalPort = port;
 8009756:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009758:	82bb      	strh	r3, [r7, #20]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800975a:	7afb      	ldrb	r3, [r7, #11]
 800975c:	2b00      	cmp	r3, #0
 800975e:	bf14      	ite	ne
 8009760:	2301      	movne	r3, #1
 8009762:	2300      	moveq	r3, #0
 8009764:	b2db      	uxtb	r3, r3
 8009766:	743b      	strb	r3, [r7, #16]
  conn.Backlog = backlog;
 8009768:	893b      	ldrh	r3, [r7, #8]
 800976a:	b2db      	uxtb	r3, r3
 800976c:	f887 3020 	strb.w	r3, [r7, #32]

  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8009770:	f107 0310 	add.w	r3, r7, #16
 8009774:	4619      	mov	r1, r3
 8009776:	4807      	ldr	r0, [pc, #28]	; (8009794 <WIFI_StartServer+0x5c>)
 8009778:	f7fe ffaa 	bl	80086d0 <ES_WIFI_StartServerSingleConn>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d102      	bne.n	8009788 <WIFI_StartServer+0x50>
  {
    ret = WIFI_STATUS_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8009788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800978c:	4618      	mov	r0, r3
 800978e:	3728      	adds	r7, #40	; 0x28
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	2000158c 	.word	0x2000158c

08009798 <WIFI_WaitServerConnection>:
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_WaitServerConnection(uint32_t socket,uint32_t Timeout,
                                        uint8_t *RemoteIp, uint8_t RemoteIpAddrLength, uint16_t *RemotePort)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b08a      	sub	sp, #40	; 0x28
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
 80097a4:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Conn_t conn;
  ES_WIFI_Status_t ret;

  conn.Number = (uint8_t)socket;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	747b      	strb	r3, [r7, #17]

  ret = ES_WIFI_WaitServerConnection(&EsWifiObj,Timeout,&conn);
 80097ac:	f107 0310 	add.w	r3, r7, #16
 80097b0:	461a      	mov	r2, r3
 80097b2:	68b9      	ldr	r1, [r7, #8]
 80097b4:	481c      	ldr	r0, [pc, #112]	; (8009828 <WIFI_WaitServerConnection+0x90>)
 80097b6:	f7ff f837 	bl	8008828 <ES_WIFI_WaitServerConnection>
 80097ba:	4603      	mov	r3, r0
 80097bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ES_WIFI_STATUS_OK == ret)
 80097c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d112      	bne.n	80097ee <WIFI_WaitServerConnection+0x56>
  {
    if (RemotePort)
 80097c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d002      	beq.n	80097d4 <WIFI_WaitServerConnection+0x3c>
    {
      *RemotePort = conn.RemotePort;
 80097ce:	8a7a      	ldrh	r2, [r7, #18]
 80097d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d2:	801a      	strh	r2, [r3, #0]
    }
    if ((RemoteIp != NULL) && (4 <= RemoteIpAddrLength))
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d007      	beq.n	80097ea <WIFI_WaitServerConnection+0x52>
 80097da:	78fb      	ldrb	r3, [r7, #3]
 80097dc:	2b03      	cmp	r3, #3
 80097de:	d904      	bls.n	80097ea <WIFI_WaitServerConnection+0x52>
 80097e0:	f8d7 3016 	ldr.w	r3, [r7, #22]
 80097e4:	461a      	mov	r2, r3
    {
      memcpy(RemoteIp, conn.RemoteIP, 4);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	601a      	str	r2, [r3, #0]
    }
    return  WIFI_STATUS_OK;
 80097ea:	2300      	movs	r3, #0
 80097ec:	e017      	b.n	800981e <WIFI_WaitServerConnection+0x86>
  }

  if (ES_WIFI_STATUS_TIMEOUT == ret)
 80097ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097f2:	2b03      	cmp	r3, #3
 80097f4:	d112      	bne.n	800981c <WIFI_WaitServerConnection+0x84>
  {
    if (RemotePort)
 80097f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d002      	beq.n	8009802 <WIFI_WaitServerConnection+0x6a>
    {
      *RemotePort = 0;
 80097fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fe:	2200      	movs	r2, #0
 8009800:	801a      	strh	r2, [r3, #0]
    }
    if ((RemoteIp != NULL) && (4 <= RemoteIpAddrLength))
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d007      	beq.n	8009818 <WIFI_WaitServerConnection+0x80>
 8009808:	78fb      	ldrb	r3, [r7, #3]
 800980a:	2b03      	cmp	r3, #3
 800980c:	d904      	bls.n	8009818 <WIFI_WaitServerConnection+0x80>
    {
      memset(RemoteIp, 0, 4);
 800980e:	2204      	movs	r2, #4
 8009810:	2100      	movs	r1, #0
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f003 f83a 	bl	800c88c <memset>
    }
    return  WIFI_STATUS_TIMEOUT;
 8009818:	2305      	movs	r3, #5
 800981a:	e000      	b.n	800981e <WIFI_WaitServerConnection+0x86>
  }

  return WIFI_STATUS_ERROR;
 800981c:	2301      	movs	r3, #1
}
 800981e:	4618      	mov	r0, r3
 8009820:	3728      	adds	r7, #40	; 0x28
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	2000158c 	.word	0x2000158c

0800982c <WIFI_CloseServerConnection>:
  * @brief  Close current connection from a client  to the server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseServerConnection(uint32_t socket)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	73fb      	strb	r3, [r7, #15]

  if (ES_WIFI_STATUS_OK == ES_WIFI_CloseServerConnection(&EsWifiObj, (uint8_t)socket))
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	b2db      	uxtb	r3, r3
 800983c:	4619      	mov	r1, r3
 800983e:	4806      	ldr	r0, [pc, #24]	; (8009858 <WIFI_CloseServerConnection+0x2c>)
 8009840:	f7ff f916 	bl	8008a70 <ES_WIFI_CloseServerConnection>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d101      	bne.n	800984e <WIFI_CloseServerConnection+0x22>
  {
    ret = WIFI_STATUS_OK;
 800984a:	2300      	movs	r3, #0
 800984c:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800984e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	2000158c 	.word	0x2000158c

0800985c <WIFI_StopServer>:
  * @brief  Stop a server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_StopServer(uint32_t socket)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	73fb      	strb	r3, [r7, #15]

  if(ES_WIFI_StopServerSingleConn(&EsWifiObj, (uint8_t)socket)== ES_WIFI_STATUS_OK)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	b2db      	uxtb	r3, r3
 800986c:	4619      	mov	r1, r3
 800986e:	4806      	ldr	r0, [pc, #24]	; (8009888 <WIFI_StopServer+0x2c>)
 8009870:	f7ff f95e 	bl	8008b30 <ES_WIFI_StopServerSingleConn>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d101      	bne.n	800987e <WIFI_StopServer+0x22>
  {
    ret = WIFI_STATUS_OK;
 800987a:	2300      	movs	r3, #0
 800987c:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800987e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009880:	4618      	mov	r0, r3
 8009882:	3710      	adds	r7, #16
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	2000158c 	.word	0x2000158c

0800988c <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b088      	sub	sp, #32
 8009890:	af02      	add	r7, sp, #8
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	603b      	str	r3, [r7, #0]
 8009898:	4613      	mov	r3, r2
 800989a:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	75fb      	strb	r3, [r7, #23]

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	b2d9      	uxtb	r1, r3
 80098a4:	88fa      	ldrh	r2, [r7, #6]
 80098a6:	6a3b      	ldr	r3, [r7, #32]
 80098a8:	9301      	str	r3, [sp, #4]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	4613      	mov	r3, r2
 80098b0:	68ba      	ldr	r2, [r7, #8]
 80098b2:	4806      	ldr	r0, [pc, #24]	; (80098cc <WIFI_SendData+0x40>)
 80098b4:	f7ff f99e 	bl	8008bf4 <ES_WIFI_SendData>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d101      	bne.n	80098c2 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 80098c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3718      	adds	r7, #24
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	2000158c 	.word	0x2000158c

080098d0 <WIFI_ReceiveData>:
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint32_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen,
                               uint32_t Timeout)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b088      	sub	sp, #32
 80098d4:	af02      	add	r7, sp, #8
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	603b      	str	r3, [r7, #0]
 80098dc:	4613      	mov	r3, r2
 80098de:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	b2d9      	uxtb	r1, r3
 80098e8:	88fa      	ldrh	r2, [r7, #6]
 80098ea:	6a3b      	ldr	r3, [r7, #32]
 80098ec:	9301      	str	r3, [sp, #4]
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	9300      	str	r3, [sp, #0]
 80098f2:	4613      	mov	r3, r2
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	4806      	ldr	r0, [pc, #24]	; (8009910 <WIFI_ReceiveData+0x40>)
 80098f8:	f7ff fa38 	bl	8008d6c <ES_WIFI_ReceiveData>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d101      	bne.n	8009906 <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 8009902:	2300      	movs	r3, #0
 8009904:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8009906:	7dfb      	ldrb	r3, [r7, #23]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3718      	adds	r7, #24
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	2000158c 	.word	0x2000158c

08009914 <__NVIC_SetPriority>:
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	4603      	mov	r3, r0
 800991c:	6039      	str	r1, [r7, #0]
 800991e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009924:	2b00      	cmp	r3, #0
 8009926:	db0a      	blt.n	800993e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	b2da      	uxtb	r2, r3
 800992c:	490c      	ldr	r1, [pc, #48]	; (8009960 <__NVIC_SetPriority+0x4c>)
 800992e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009932:	0112      	lsls	r2, r2, #4
 8009934:	b2d2      	uxtb	r2, r2
 8009936:	440b      	add	r3, r1
 8009938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800993c:	e00a      	b.n	8009954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	b2da      	uxtb	r2, r3
 8009942:	4908      	ldr	r1, [pc, #32]	; (8009964 <__NVIC_SetPriority+0x50>)
 8009944:	79fb      	ldrb	r3, [r7, #7]
 8009946:	f003 030f 	and.w	r3, r3, #15
 800994a:	3b04      	subs	r3, #4
 800994c:	0112      	lsls	r2, r2, #4
 800994e:	b2d2      	uxtb	r2, r2
 8009950:	440b      	add	r3, r1
 8009952:	761a      	strb	r2, [r3, #24]
}
 8009954:	bf00      	nop
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr
 8009960:	e000e100 	.word	0xe000e100
 8009964:	e000ed00 	.word	0xe000ed00

08009968 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009968:	b580      	push	{r7, lr}
 800996a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800996c:	2100      	movs	r1, #0
 800996e:	f06f 0004 	mvn.w	r0, #4
 8009972:	f7ff ffcf 	bl	8009914 <__NVIC_SetPriority>
#endif
}
 8009976:	bf00      	nop
 8009978:	bd80      	pop	{r7, pc}
	...

0800997c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009982:	f3ef 8305 	mrs	r3, IPSR
 8009986:	603b      	str	r3, [r7, #0]
  return(result);
 8009988:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800998a:	2b00      	cmp	r3, #0
 800998c:	d003      	beq.n	8009996 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800998e:	f06f 0305 	mvn.w	r3, #5
 8009992:	607b      	str	r3, [r7, #4]
 8009994:	e00c      	b.n	80099b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009996:	4b0a      	ldr	r3, [pc, #40]	; (80099c0 <osKernelInitialize+0x44>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d105      	bne.n	80099aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800999e:	4b08      	ldr	r3, [pc, #32]	; (80099c0 <osKernelInitialize+0x44>)
 80099a0:	2201      	movs	r2, #1
 80099a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80099a4:	2300      	movs	r3, #0
 80099a6:	607b      	str	r3, [r7, #4]
 80099a8:	e002      	b.n	80099b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80099aa:	f04f 33ff 	mov.w	r3, #4294967295
 80099ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80099b0:	687b      	ldr	r3, [r7, #4]
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	370c      	adds	r7, #12
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop
 80099c0:	20001e8c 	.word	0x20001e8c

080099c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099ca:	f3ef 8305 	mrs	r3, IPSR
 80099ce:	603b      	str	r3, [r7, #0]
  return(result);
 80099d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d003      	beq.n	80099de <osKernelStart+0x1a>
    stat = osErrorISR;
 80099d6:	f06f 0305 	mvn.w	r3, #5
 80099da:	607b      	str	r3, [r7, #4]
 80099dc:	e010      	b.n	8009a00 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80099de:	4b0b      	ldr	r3, [pc, #44]	; (8009a0c <osKernelStart+0x48>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d109      	bne.n	80099fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80099e6:	f7ff ffbf 	bl	8009968 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80099ea:	4b08      	ldr	r3, [pc, #32]	; (8009a0c <osKernelStart+0x48>)
 80099ec:	2202      	movs	r2, #2
 80099ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80099f0:	f001 f866 	bl	800aac0 <vTaskStartScheduler>
      stat = osOK;
 80099f4:	2300      	movs	r3, #0
 80099f6:	607b      	str	r3, [r7, #4]
 80099f8:	e002      	b.n	8009a00 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80099fa:	f04f 33ff 	mov.w	r3, #4294967295
 80099fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009a00:	687b      	ldr	r3, [r7, #4]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	20001e8c 	.word	0x20001e8c

08009a10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b08e      	sub	sp, #56	; 0x38
 8009a14:	af04      	add	r7, sp, #16
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a20:	f3ef 8305 	mrs	r3, IPSR
 8009a24:	617b      	str	r3, [r7, #20]
  return(result);
 8009a26:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d17e      	bne.n	8009b2a <osThreadNew+0x11a>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d07b      	beq.n	8009b2a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009a32:	2380      	movs	r3, #128	; 0x80
 8009a34:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009a36:	2318      	movs	r3, #24
 8009a38:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8009a42:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d045      	beq.n	8009ad6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d002      	beq.n	8009a58 <osThreadNew+0x48>
        name = attr->name;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d002      	beq.n	8009a66 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	699b      	ldr	r3, [r3, #24]
 8009a64:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d008      	beq.n	8009a7e <osThreadNew+0x6e>
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	2b38      	cmp	r3, #56	; 0x38
 8009a70:	d805      	bhi.n	8009a7e <osThreadNew+0x6e>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	f003 0301 	and.w	r3, r3, #1
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d001      	beq.n	8009a82 <osThreadNew+0x72>
        return (NULL);
 8009a7e:	2300      	movs	r3, #0
 8009a80:	e054      	b.n	8009b2c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	695b      	ldr	r3, [r3, #20]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d003      	beq.n	8009a92 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	695b      	ldr	r3, [r3, #20]
 8009a8e:	089b      	lsrs	r3, r3, #2
 8009a90:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00e      	beq.n	8009ab8 <osThreadNew+0xa8>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	2b5b      	cmp	r3, #91	; 0x5b
 8009aa0:	d90a      	bls.n	8009ab8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d006      	beq.n	8009ab8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	695b      	ldr	r3, [r3, #20]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d002      	beq.n	8009ab8 <osThreadNew+0xa8>
        mem = 1;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	61bb      	str	r3, [r7, #24]
 8009ab6:	e010      	b.n	8009ada <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d10c      	bne.n	8009ada <osThreadNew+0xca>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d108      	bne.n	8009ada <osThreadNew+0xca>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d104      	bne.n	8009ada <osThreadNew+0xca>
          mem = 0;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	61bb      	str	r3, [r7, #24]
 8009ad4:	e001      	b.n	8009ada <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d110      	bne.n	8009b02 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ae8:	9202      	str	r2, [sp, #8]
 8009aea:	9301      	str	r3, [sp, #4]
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	9300      	str	r3, [sp, #0]
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	6a3a      	ldr	r2, [r7, #32]
 8009af4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	f000 fe0c 	bl	800a714 <xTaskCreateStatic>
 8009afc:	4603      	mov	r3, r0
 8009afe:	613b      	str	r3, [r7, #16]
 8009b00:	e013      	b.n	8009b2a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009b02:	69bb      	ldr	r3, [r7, #24]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d110      	bne.n	8009b2a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009b08:	6a3b      	ldr	r3, [r7, #32]
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	f107 0310 	add.w	r3, r7, #16
 8009b10:	9301      	str	r3, [sp, #4]
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	9300      	str	r3, [sp, #0]
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b1a:	68f8      	ldr	r0, [r7, #12]
 8009b1c:	f000 fe57 	bl	800a7ce <xTaskCreate>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d001      	beq.n	8009b2a <osThreadNew+0x11a>
            hTask = NULL;
 8009b26:	2300      	movs	r3, #0
 8009b28:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009b2a:	693b      	ldr	r3, [r7, #16]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3728      	adds	r7, #40	; 0x28
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b3c:	f3ef 8305 	mrs	r3, IPSR
 8009b40:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b42:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d003      	beq.n	8009b50 <osDelay+0x1c>
    stat = osErrorISR;
 8009b48:	f06f 0305 	mvn.w	r3, #5
 8009b4c:	60fb      	str	r3, [r7, #12]
 8009b4e:	e007      	b.n	8009b60 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d002      	beq.n	8009b60 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 ff7c 	bl	800aa58 <vTaskDelay>
    }
  }

  return (stat);
 8009b60:	68fb      	ldr	r3, [r7, #12]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
	...

08009b6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009b6c:	b480      	push	{r7}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	4a07      	ldr	r2, [pc, #28]	; (8009b98 <vApplicationGetIdleTaskMemory+0x2c>)
 8009b7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	4a06      	ldr	r2, [pc, #24]	; (8009b9c <vApplicationGetIdleTaskMemory+0x30>)
 8009b82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2280      	movs	r2, #128	; 0x80
 8009b88:	601a      	str	r2, [r3, #0]
}
 8009b8a:	bf00      	nop
 8009b8c:	3714      	adds	r7, #20
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	20001e90 	.word	0x20001e90
 8009b9c:	20001eec 	.word	0x20001eec

08009ba0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	4a07      	ldr	r2, [pc, #28]	; (8009bcc <vApplicationGetTimerTaskMemory+0x2c>)
 8009bb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	4a06      	ldr	r2, [pc, #24]	; (8009bd0 <vApplicationGetTimerTaskMemory+0x30>)
 8009bb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009bbe:	601a      	str	r2, [r3, #0]
}
 8009bc0:	bf00      	nop
 8009bc2:	3714      	adds	r7, #20
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr
 8009bcc:	200020ec 	.word	0x200020ec
 8009bd0:	20002148 	.word	0x20002148

08009bd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f103 0208 	add.w	r2, r3, #8
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f103 0208 	add.w	r2, r3, #8
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f103 0208 	add.w	r2, r3, #8
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009c08:	bf00      	nop
 8009c0a:	370c      	adds	r7, #12
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009c22:	bf00      	nop
 8009c24:	370c      	adds	r7, #12
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr

08009c2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c2e:	b480      	push	{r7}
 8009c30:	b085      	sub	sp, #20
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
 8009c36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	689a      	ldr	r2, [r3, #8]
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	683a      	ldr	r2, [r7, #0]
 8009c52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	683a      	ldr	r2, [r7, #0]
 8009c58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	1c5a      	adds	r2, r3, #1
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	601a      	str	r2, [r3, #0]
}
 8009c6a:	bf00      	nop
 8009c6c:	3714      	adds	r7, #20
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr

08009c76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c76:	b480      	push	{r7}
 8009c78:	b085      	sub	sp, #20
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c8c:	d103      	bne.n	8009c96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	691b      	ldr	r3, [r3, #16]
 8009c92:	60fb      	str	r3, [r7, #12]
 8009c94:	e00c      	b.n	8009cb0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	3308      	adds	r3, #8
 8009c9a:	60fb      	str	r3, [r7, #12]
 8009c9c:	e002      	b.n	8009ca4 <vListInsert+0x2e>
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	60fb      	str	r3, [r7, #12]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d2f6      	bcs.n	8009c9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	685a      	ldr	r2, [r3, #4]
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	683a      	ldr	r2, [r7, #0]
 8009cbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	683a      	ldr	r2, [r7, #0]
 8009cca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	1c5a      	adds	r2, r3, #1
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	601a      	str	r2, [r3, #0]
}
 8009cdc:	bf00      	nop
 8009cde:	3714      	adds	r7, #20
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	6892      	ldr	r2, [r2, #8]
 8009cfe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	6852      	ldr	r2, [r2, #4]
 8009d08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d103      	bne.n	8009d1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	689a      	ldr	r2, [r3, #8]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	1e5a      	subs	r2, r3, #1
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3714      	adds	r7, #20
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d10a      	bne.n	8009d66 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009d62:	bf00      	nop
 8009d64:	e7fe      	b.n	8009d64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009d66:	f002 f84d 	bl	800be04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d72:	68f9      	ldr	r1, [r7, #12]
 8009d74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d76:	fb01 f303 	mul.w	r3, r1, r3
 8009d7a:	441a      	add	r2, r3
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2200      	movs	r2, #0
 8009d84:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d96:	3b01      	subs	r3, #1
 8009d98:	68f9      	ldr	r1, [r7, #12]
 8009d9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d9c:	fb01 f303 	mul.w	r3, r1, r3
 8009da0:	441a      	add	r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	22ff      	movs	r2, #255	; 0xff
 8009daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	22ff      	movs	r2, #255	; 0xff
 8009db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d114      	bne.n	8009de6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d01a      	beq.n	8009dfa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	3310      	adds	r3, #16
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f001 f903 	bl	800afd4 <xTaskRemoveFromEventList>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d012      	beq.n	8009dfa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009dd4:	4b0c      	ldr	r3, [pc, #48]	; (8009e08 <xQueueGenericReset+0xcc>)
 8009dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dda:	601a      	str	r2, [r3, #0]
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	f3bf 8f6f 	isb	sy
 8009de4:	e009      	b.n	8009dfa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	3310      	adds	r3, #16
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7ff fef2 	bl	8009bd4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	3324      	adds	r3, #36	; 0x24
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7ff feed 	bl	8009bd4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009dfa:	f002 f833 	bl	800be64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009dfe:	2301      	movs	r3, #1
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3710      	adds	r7, #16
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	e000ed04 	.word	0xe000ed04

08009e0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b08e      	sub	sp, #56	; 0x38
 8009e10:	af02      	add	r7, sp, #8
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]
 8009e18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d10a      	bne.n	8009e36 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e24:	f383 8811 	msr	BASEPRI, r3
 8009e28:	f3bf 8f6f 	isb	sy
 8009e2c:	f3bf 8f4f 	dsb	sy
 8009e30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e32:	bf00      	nop
 8009e34:	e7fe      	b.n	8009e34 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10a      	bne.n	8009e52 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e4e:	bf00      	nop
 8009e50:	e7fe      	b.n	8009e50 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d002      	beq.n	8009e5e <xQueueGenericCreateStatic+0x52>
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d001      	beq.n	8009e62 <xQueueGenericCreateStatic+0x56>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e000      	b.n	8009e64 <xQueueGenericCreateStatic+0x58>
 8009e62:	2300      	movs	r3, #0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10a      	bne.n	8009e7e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6c:	f383 8811 	msr	BASEPRI, r3
 8009e70:	f3bf 8f6f 	isb	sy
 8009e74:	f3bf 8f4f 	dsb	sy
 8009e78:	623b      	str	r3, [r7, #32]
}
 8009e7a:	bf00      	nop
 8009e7c:	e7fe      	b.n	8009e7c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d102      	bne.n	8009e8a <xQueueGenericCreateStatic+0x7e>
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d101      	bne.n	8009e8e <xQueueGenericCreateStatic+0x82>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e000      	b.n	8009e90 <xQueueGenericCreateStatic+0x84>
 8009e8e:	2300      	movs	r3, #0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d10a      	bne.n	8009eaa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e98:	f383 8811 	msr	BASEPRI, r3
 8009e9c:	f3bf 8f6f 	isb	sy
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	61fb      	str	r3, [r7, #28]
}
 8009ea6:	bf00      	nop
 8009ea8:	e7fe      	b.n	8009ea8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009eaa:	2350      	movs	r3, #80	; 0x50
 8009eac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	2b50      	cmp	r3, #80	; 0x50
 8009eb2:	d00a      	beq.n	8009eca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb8:	f383 8811 	msr	BASEPRI, r3
 8009ebc:	f3bf 8f6f 	isb	sy
 8009ec0:	f3bf 8f4f 	dsb	sy
 8009ec4:	61bb      	str	r3, [r7, #24]
}
 8009ec6:	bf00      	nop
 8009ec8:	e7fe      	b.n	8009ec8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009eca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00d      	beq.n	8009ef2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed8:	2201      	movs	r2, #1
 8009eda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ede:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee4:	9300      	str	r3, [sp, #0]
 8009ee6:	4613      	mov	r3, r2
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	68b9      	ldr	r1, [r7, #8]
 8009eec:	68f8      	ldr	r0, [r7, #12]
 8009eee:	f000 f805 	bl	8009efc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3730      	adds	r7, #48	; 0x30
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
 8009f08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d103      	bne.n	8009f18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	69ba      	ldr	r2, [r7, #24]
 8009f14:	601a      	str	r2, [r3, #0]
 8009f16:	e002      	b.n	8009f1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	68ba      	ldr	r2, [r7, #8]
 8009f28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f2a:	2101      	movs	r1, #1
 8009f2c:	69b8      	ldr	r0, [r7, #24]
 8009f2e:	f7ff ff05 	bl	8009d3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	78fa      	ldrb	r2, [r7, #3]
 8009f36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f3a:	bf00      	nop
 8009f3c:	3710      	adds	r7, #16
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
	...

08009f44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b08e      	sub	sp, #56	; 0x38
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	607a      	str	r2, [r7, #4]
 8009f50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009f52:	2300      	movs	r3, #0
 8009f54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d10a      	bne.n	8009f76 <xQueueGenericSend+0x32>
	__asm volatile
 8009f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f64:	f383 8811 	msr	BASEPRI, r3
 8009f68:	f3bf 8f6f 	isb	sy
 8009f6c:	f3bf 8f4f 	dsb	sy
 8009f70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f72:	bf00      	nop
 8009f74:	e7fe      	b.n	8009f74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d103      	bne.n	8009f84 <xQueueGenericSend+0x40>
 8009f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d101      	bne.n	8009f88 <xQueueGenericSend+0x44>
 8009f84:	2301      	movs	r3, #1
 8009f86:	e000      	b.n	8009f8a <xQueueGenericSend+0x46>
 8009f88:	2300      	movs	r3, #0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d10a      	bne.n	8009fa4 <xQueueGenericSend+0x60>
	__asm volatile
 8009f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009fa0:	bf00      	nop
 8009fa2:	e7fe      	b.n	8009fa2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	d103      	bne.n	8009fb2 <xQueueGenericSend+0x6e>
 8009faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d101      	bne.n	8009fb6 <xQueueGenericSend+0x72>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e000      	b.n	8009fb8 <xQueueGenericSend+0x74>
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d10a      	bne.n	8009fd2 <xQueueGenericSend+0x8e>
	__asm volatile
 8009fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc0:	f383 8811 	msr	BASEPRI, r3
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	f3bf 8f4f 	dsb	sy
 8009fcc:	623b      	str	r3, [r7, #32]
}
 8009fce:	bf00      	nop
 8009fd0:	e7fe      	b.n	8009fd0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009fd2:	f001 f9bd 	bl	800b350 <xTaskGetSchedulerState>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d102      	bne.n	8009fe2 <xQueueGenericSend+0x9e>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d101      	bne.n	8009fe6 <xQueueGenericSend+0xa2>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e000      	b.n	8009fe8 <xQueueGenericSend+0xa4>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10a      	bne.n	800a002 <xQueueGenericSend+0xbe>
	__asm volatile
 8009fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff0:	f383 8811 	msr	BASEPRI, r3
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	61fb      	str	r3, [r7, #28]
}
 8009ffe:	bf00      	nop
 800a000:	e7fe      	b.n	800a000 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a002:	f001 feff 	bl	800be04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a00e:	429a      	cmp	r2, r3
 800a010:	d302      	bcc.n	800a018 <xQueueGenericSend+0xd4>
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	2b02      	cmp	r3, #2
 800a016:	d129      	bne.n	800a06c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a018:	683a      	ldr	r2, [r7, #0]
 800a01a:	68b9      	ldr	r1, [r7, #8]
 800a01c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a01e:	f000 fa0b 	bl	800a438 <prvCopyDataToQueue>
 800a022:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d010      	beq.n	800a04e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02e:	3324      	adds	r3, #36	; 0x24
 800a030:	4618      	mov	r0, r3
 800a032:	f000 ffcf 	bl	800afd4 <xTaskRemoveFromEventList>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d013      	beq.n	800a064 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a03c:	4b3f      	ldr	r3, [pc, #252]	; (800a13c <xQueueGenericSend+0x1f8>)
 800a03e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a042:	601a      	str	r2, [r3, #0]
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	e00a      	b.n	800a064 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a050:	2b00      	cmp	r3, #0
 800a052:	d007      	beq.n	800a064 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a054:	4b39      	ldr	r3, [pc, #228]	; (800a13c <xQueueGenericSend+0x1f8>)
 800a056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a05a:	601a      	str	r2, [r3, #0]
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a064:	f001 fefe 	bl	800be64 <vPortExitCritical>
				return pdPASS;
 800a068:	2301      	movs	r3, #1
 800a06a:	e063      	b.n	800a134 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d103      	bne.n	800a07a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a072:	f001 fef7 	bl	800be64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a076:	2300      	movs	r3, #0
 800a078:	e05c      	b.n	800a134 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d106      	bne.n	800a08e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a080:	f107 0314 	add.w	r3, r7, #20
 800a084:	4618      	mov	r0, r3
 800a086:	f001 f809 	bl	800b09c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a08a:	2301      	movs	r3, #1
 800a08c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a08e:	f001 fee9 	bl	800be64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a092:	f000 fd7b 	bl	800ab8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a096:	f001 feb5 	bl	800be04 <vPortEnterCritical>
 800a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0a0:	b25b      	sxtb	r3, r3
 800a0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a6:	d103      	bne.n	800a0b0 <xQueueGenericSend+0x16c>
 800a0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0b6:	b25b      	sxtb	r3, r3
 800a0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0bc:	d103      	bne.n	800a0c6 <xQueueGenericSend+0x182>
 800a0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0c6:	f001 fecd 	bl	800be64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a0ca:	1d3a      	adds	r2, r7, #4
 800a0cc:	f107 0314 	add.w	r3, r7, #20
 800a0d0:	4611      	mov	r1, r2
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f000 fff8 	bl	800b0c8 <xTaskCheckForTimeOut>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d124      	bne.n	800a128 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a0de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0e0:	f000 faa2 	bl	800a628 <prvIsQueueFull>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d018      	beq.n	800a11c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ec:	3310      	adds	r3, #16
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	4611      	mov	r1, r2
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f000 ff1e 	bl	800af34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a0f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0fa:	f000 fa2d 	bl	800a558 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a0fe:	f000 fd53 	bl	800aba8 <xTaskResumeAll>
 800a102:	4603      	mov	r3, r0
 800a104:	2b00      	cmp	r3, #0
 800a106:	f47f af7c 	bne.w	800a002 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a10a:	4b0c      	ldr	r3, [pc, #48]	; (800a13c <xQueueGenericSend+0x1f8>)
 800a10c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a110:	601a      	str	r2, [r3, #0]
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	e772      	b.n	800a002 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a11c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a11e:	f000 fa1b 	bl	800a558 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a122:	f000 fd41 	bl	800aba8 <xTaskResumeAll>
 800a126:	e76c      	b.n	800a002 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a128:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a12a:	f000 fa15 	bl	800a558 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a12e:	f000 fd3b 	bl	800aba8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a132:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a134:	4618      	mov	r0, r3
 800a136:	3738      	adds	r7, #56	; 0x38
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	e000ed04 	.word	0xe000ed04

0800a140 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b090      	sub	sp, #64	; 0x40
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	607a      	str	r2, [r7, #4]
 800a14c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10a      	bne.n	800a16e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15c:	f383 8811 	msr	BASEPRI, r3
 800a160:	f3bf 8f6f 	isb	sy
 800a164:	f3bf 8f4f 	dsb	sy
 800a168:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a16a:	bf00      	nop
 800a16c:	e7fe      	b.n	800a16c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d103      	bne.n	800a17c <xQueueGenericSendFromISR+0x3c>
 800a174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d101      	bne.n	800a180 <xQueueGenericSendFromISR+0x40>
 800a17c:	2301      	movs	r3, #1
 800a17e:	e000      	b.n	800a182 <xQueueGenericSendFromISR+0x42>
 800a180:	2300      	movs	r3, #0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d10a      	bne.n	800a19c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18a:	f383 8811 	msr	BASEPRI, r3
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	f3bf 8f4f 	dsb	sy
 800a196:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a198:	bf00      	nop
 800a19a:	e7fe      	b.n	800a19a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	d103      	bne.n	800a1aa <xQueueGenericSendFromISR+0x6a>
 800a1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d101      	bne.n	800a1ae <xQueueGenericSendFromISR+0x6e>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e000      	b.n	800a1b0 <xQueueGenericSendFromISR+0x70>
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d10a      	bne.n	800a1ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b8:	f383 8811 	msr	BASEPRI, r3
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	623b      	str	r3, [r7, #32]
}
 800a1c6:	bf00      	nop
 800a1c8:	e7fe      	b.n	800a1c8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1ca:	f001 fefd 	bl	800bfc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a1ce:	f3ef 8211 	mrs	r2, BASEPRI
 800a1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d6:	f383 8811 	msr	BASEPRI, r3
 800a1da:	f3bf 8f6f 	isb	sy
 800a1de:	f3bf 8f4f 	dsb	sy
 800a1e2:	61fa      	str	r2, [r7, #28]
 800a1e4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a1e6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1e8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d302      	bcc.n	800a1fc <xQueueGenericSendFromISR+0xbc>
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	2b02      	cmp	r3, #2
 800a1fa:	d12f      	bne.n	800a25c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a20a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a20c:	683a      	ldr	r2, [r7, #0]
 800a20e:	68b9      	ldr	r1, [r7, #8]
 800a210:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a212:	f000 f911 	bl	800a438 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a216:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a21e:	d112      	bne.n	800a246 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a224:	2b00      	cmp	r3, #0
 800a226:	d016      	beq.n	800a256 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22a:	3324      	adds	r3, #36	; 0x24
 800a22c:	4618      	mov	r0, r3
 800a22e:	f000 fed1 	bl	800afd4 <xTaskRemoveFromEventList>
 800a232:	4603      	mov	r3, r0
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00e      	beq.n	800a256 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d00b      	beq.n	800a256 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2201      	movs	r2, #1
 800a242:	601a      	str	r2, [r3, #0]
 800a244:	e007      	b.n	800a256 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a246:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a24a:	3301      	adds	r3, #1
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	b25a      	sxtb	r2, r3
 800a250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a256:	2301      	movs	r3, #1
 800a258:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a25a:	e001      	b.n	800a260 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a25c:	2300      	movs	r3, #0
 800a25e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a262:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a26a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3740      	adds	r7, #64	; 0x40
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
	...

0800a278 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b08c      	sub	sp, #48	; 0x30
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a284:	2300      	movs	r3, #0
 800a286:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d10a      	bne.n	800a2a8 <xQueueReceive+0x30>
	__asm volatile
 800a292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a296:	f383 8811 	msr	BASEPRI, r3
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	623b      	str	r3, [r7, #32]
}
 800a2a4:	bf00      	nop
 800a2a6:	e7fe      	b.n	800a2a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d103      	bne.n	800a2b6 <xQueueReceive+0x3e>
 800a2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d101      	bne.n	800a2ba <xQueueReceive+0x42>
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e000      	b.n	800a2bc <xQueueReceive+0x44>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d10a      	bne.n	800a2d6 <xQueueReceive+0x5e>
	__asm volatile
 800a2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c4:	f383 8811 	msr	BASEPRI, r3
 800a2c8:	f3bf 8f6f 	isb	sy
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	61fb      	str	r3, [r7, #28]
}
 800a2d2:	bf00      	nop
 800a2d4:	e7fe      	b.n	800a2d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2d6:	f001 f83b 	bl	800b350 <xTaskGetSchedulerState>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d102      	bne.n	800a2e6 <xQueueReceive+0x6e>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d101      	bne.n	800a2ea <xQueueReceive+0x72>
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e000      	b.n	800a2ec <xQueueReceive+0x74>
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d10a      	bne.n	800a306 <xQueueReceive+0x8e>
	__asm volatile
 800a2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f4:	f383 8811 	msr	BASEPRI, r3
 800a2f8:	f3bf 8f6f 	isb	sy
 800a2fc:	f3bf 8f4f 	dsb	sy
 800a300:	61bb      	str	r3, [r7, #24]
}
 800a302:	bf00      	nop
 800a304:	e7fe      	b.n	800a304 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a306:	f001 fd7d 	bl	800be04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a30e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a312:	2b00      	cmp	r3, #0
 800a314:	d01f      	beq.n	800a356 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a316:	68b9      	ldr	r1, [r7, #8]
 800a318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a31a:	f000 f8f7 	bl	800a50c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a320:	1e5a      	subs	r2, r3, #1
 800a322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a324:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00f      	beq.n	800a34e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a330:	3310      	adds	r3, #16
 800a332:	4618      	mov	r0, r3
 800a334:	f000 fe4e 	bl	800afd4 <xTaskRemoveFromEventList>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d007      	beq.n	800a34e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a33e:	4b3d      	ldr	r3, [pc, #244]	; (800a434 <xQueueReceive+0x1bc>)
 800a340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a344:	601a      	str	r2, [r3, #0]
 800a346:	f3bf 8f4f 	dsb	sy
 800a34a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a34e:	f001 fd89 	bl	800be64 <vPortExitCritical>
				return pdPASS;
 800a352:	2301      	movs	r3, #1
 800a354:	e069      	b.n	800a42a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d103      	bne.n	800a364 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a35c:	f001 fd82 	bl	800be64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a360:	2300      	movs	r3, #0
 800a362:	e062      	b.n	800a42a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a366:	2b00      	cmp	r3, #0
 800a368:	d106      	bne.n	800a378 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a36a:	f107 0310 	add.w	r3, r7, #16
 800a36e:	4618      	mov	r0, r3
 800a370:	f000 fe94 	bl	800b09c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a374:	2301      	movs	r3, #1
 800a376:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a378:	f001 fd74 	bl	800be64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a37c:	f000 fc06 	bl	800ab8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a380:	f001 fd40 	bl	800be04 <vPortEnterCritical>
 800a384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a386:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a38a:	b25b      	sxtb	r3, r3
 800a38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a390:	d103      	bne.n	800a39a <xQueueReceive+0x122>
 800a392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a394:	2200      	movs	r2, #0
 800a396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3a0:	b25b      	sxtb	r3, r3
 800a3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a6:	d103      	bne.n	800a3b0 <xQueueReceive+0x138>
 800a3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3b0:	f001 fd58 	bl	800be64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3b4:	1d3a      	adds	r2, r7, #4
 800a3b6:	f107 0310 	add.w	r3, r7, #16
 800a3ba:	4611      	mov	r1, r2
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f000 fe83 	bl	800b0c8 <xTaskCheckForTimeOut>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d123      	bne.n	800a410 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3ca:	f000 f917 	bl	800a5fc <prvIsQueueEmpty>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d017      	beq.n	800a404 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d6:	3324      	adds	r3, #36	; 0x24
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	4611      	mov	r1, r2
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f000 fda9 	bl	800af34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a3e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3e4:	f000 f8b8 	bl	800a558 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a3e8:	f000 fbde 	bl	800aba8 <xTaskResumeAll>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d189      	bne.n	800a306 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a3f2:	4b10      	ldr	r3, [pc, #64]	; (800a434 <xQueueReceive+0x1bc>)
 800a3f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3f8:	601a      	str	r2, [r3, #0]
 800a3fa:	f3bf 8f4f 	dsb	sy
 800a3fe:	f3bf 8f6f 	isb	sy
 800a402:	e780      	b.n	800a306 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a406:	f000 f8a7 	bl	800a558 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a40a:	f000 fbcd 	bl	800aba8 <xTaskResumeAll>
 800a40e:	e77a      	b.n	800a306 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a412:	f000 f8a1 	bl	800a558 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a416:	f000 fbc7 	bl	800aba8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a41a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a41c:	f000 f8ee 	bl	800a5fc <prvIsQueueEmpty>
 800a420:	4603      	mov	r3, r0
 800a422:	2b00      	cmp	r3, #0
 800a424:	f43f af6f 	beq.w	800a306 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a428:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3730      	adds	r7, #48	; 0x30
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	e000ed04 	.word	0xe000ed04

0800a438 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b086      	sub	sp, #24
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a444:	2300      	movs	r3, #0
 800a446:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a44c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a452:	2b00      	cmp	r3, #0
 800a454:	d10d      	bne.n	800a472 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d14d      	bne.n	800a4fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	4618      	mov	r0, r3
 800a464:	f000 ff92 	bl	800b38c <xTaskPriorityDisinherit>
 800a468:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2200      	movs	r2, #0
 800a46e:	609a      	str	r2, [r3, #8]
 800a470:	e043      	b.n	800a4fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d119      	bne.n	800a4ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6858      	ldr	r0, [r3, #4]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a480:	461a      	mov	r2, r3
 800a482:	68b9      	ldr	r1, [r7, #8]
 800a484:	f002 fb23 	bl	800cace <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a490:	441a      	add	r2, r3
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	685a      	ldr	r2, [r3, #4]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d32b      	bcc.n	800a4fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	605a      	str	r2, [r3, #4]
 800a4aa:	e026      	b.n	800a4fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	68d8      	ldr	r0, [r3, #12]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	68b9      	ldr	r1, [r7, #8]
 800a4b8:	f002 fb09 	bl	800cace <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	68da      	ldr	r2, [r3, #12]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c4:	425b      	negs	r3, r3
 800a4c6:	441a      	add	r2, r3
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	68da      	ldr	r2, [r3, #12]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d207      	bcs.n	800a4e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	689a      	ldr	r2, [r3, #8]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e0:	425b      	negs	r3, r3
 800a4e2:	441a      	add	r2, r3
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2b02      	cmp	r3, #2
 800a4ec:	d105      	bne.n	800a4fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d002      	beq.n	800a4fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	1c5a      	adds	r2, r3, #1
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a502:	697b      	ldr	r3, [r7, #20]
}
 800a504:	4618      	mov	r0, r3
 800a506:	3718      	adds	r7, #24
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d018      	beq.n	800a550 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	68da      	ldr	r2, [r3, #12]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a526:	441a      	add	r2, r3
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	68da      	ldr	r2, [r3, #12]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	429a      	cmp	r2, r3
 800a536:	d303      	bcc.n	800a540 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	68d9      	ldr	r1, [r3, #12]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a548:	461a      	mov	r2, r3
 800a54a:	6838      	ldr	r0, [r7, #0]
 800a54c:	f002 fabf 	bl	800cace <memcpy>
	}
}
 800a550:	bf00      	nop
 800a552:	3708      	adds	r7, #8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a560:	f001 fc50 	bl	800be04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a56a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a56c:	e011      	b.n	800a592 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a572:	2b00      	cmp	r3, #0
 800a574:	d012      	beq.n	800a59c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	3324      	adds	r3, #36	; 0x24
 800a57a:	4618      	mov	r0, r3
 800a57c:	f000 fd2a 	bl	800afd4 <xTaskRemoveFromEventList>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d001      	beq.n	800a58a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a586:	f000 fe01 	bl	800b18c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a58a:	7bfb      	ldrb	r3, [r7, #15]
 800a58c:	3b01      	subs	r3, #1
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a596:	2b00      	cmp	r3, #0
 800a598:	dce9      	bgt.n	800a56e <prvUnlockQueue+0x16>
 800a59a:	e000      	b.n	800a59e <prvUnlockQueue+0x46>
					break;
 800a59c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	22ff      	movs	r2, #255	; 0xff
 800a5a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a5a6:	f001 fc5d 	bl	800be64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a5aa:	f001 fc2b 	bl	800be04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a5b6:	e011      	b.n	800a5dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	691b      	ldr	r3, [r3, #16]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d012      	beq.n	800a5e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	3310      	adds	r3, #16
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f000 fd05 	bl	800afd4 <xTaskRemoveFromEventList>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d001      	beq.n	800a5d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a5d0:	f000 fddc 	bl	800b18c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a5d4:	7bbb      	ldrb	r3, [r7, #14]
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a5dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	dce9      	bgt.n	800a5b8 <prvUnlockQueue+0x60>
 800a5e4:	e000      	b.n	800a5e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a5e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	22ff      	movs	r2, #255	; 0xff
 800a5ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a5f0:	f001 fc38 	bl	800be64 <vPortExitCritical>
}
 800a5f4:	bf00      	nop
 800a5f6:	3710      	adds	r7, #16
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a604:	f001 fbfe 	bl	800be04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d102      	bne.n	800a616 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a610:	2301      	movs	r3, #1
 800a612:	60fb      	str	r3, [r7, #12]
 800a614:	e001      	b.n	800a61a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a616:	2300      	movs	r3, #0
 800a618:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a61a:	f001 fc23 	bl	800be64 <vPortExitCritical>

	return xReturn;
 800a61e:	68fb      	ldr	r3, [r7, #12]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a630:	f001 fbe8 	bl	800be04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d102      	bne.n	800a646 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a640:	2301      	movs	r3, #1
 800a642:	60fb      	str	r3, [r7, #12]
 800a644:	e001      	b.n	800a64a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a646:	2300      	movs	r3, #0
 800a648:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a64a:	f001 fc0b 	bl	800be64 <vPortExitCritical>

	return xReturn;
 800a64e:	68fb      	ldr	r3, [r7, #12]
}
 800a650:	4618      	mov	r0, r3
 800a652:	3710      	adds	r7, #16
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a662:	2300      	movs	r3, #0
 800a664:	60fb      	str	r3, [r7, #12]
 800a666:	e014      	b.n	800a692 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a668:	4a0f      	ldr	r2, [pc, #60]	; (800a6a8 <vQueueAddToRegistry+0x50>)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d10b      	bne.n	800a68c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a674:	490c      	ldr	r1, [pc, #48]	; (800a6a8 <vQueueAddToRegistry+0x50>)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	683a      	ldr	r2, [r7, #0]
 800a67a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a67e:	4a0a      	ldr	r2, [pc, #40]	; (800a6a8 <vQueueAddToRegistry+0x50>)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	00db      	lsls	r3, r3, #3
 800a684:	4413      	add	r3, r2
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a68a:	e006      	b.n	800a69a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	3301      	adds	r3, #1
 800a690:	60fb      	str	r3, [r7, #12]
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2b07      	cmp	r3, #7
 800a696:	d9e7      	bls.n	800a668 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a698:	bf00      	nop
 800a69a:	bf00      	nop
 800a69c:	3714      	adds	r7, #20
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr
 800a6a6:	bf00      	nop
 800a6a8:	20002548 	.word	0x20002548

0800a6ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b086      	sub	sp, #24
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a6bc:	f001 fba2 	bl	800be04 <vPortEnterCritical>
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6c6:	b25b      	sxtb	r3, r3
 800a6c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6cc:	d103      	bne.n	800a6d6 <vQueueWaitForMessageRestricted+0x2a>
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6dc:	b25b      	sxtb	r3, r3
 800a6de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e2:	d103      	bne.n	800a6ec <vQueueWaitForMessageRestricted+0x40>
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6ec:	f001 fbba 	bl	800be64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d106      	bne.n	800a706 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	3324      	adds	r3, #36	; 0x24
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	68b9      	ldr	r1, [r7, #8]
 800a700:	4618      	mov	r0, r3
 800a702:	f000 fc3b 	bl	800af7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a706:	6978      	ldr	r0, [r7, #20]
 800a708:	f7ff ff26 	bl	800a558 <prvUnlockQueue>
	}
 800a70c:	bf00      	nop
 800a70e:	3718      	adds	r7, #24
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a714:	b580      	push	{r7, lr}
 800a716:	b08e      	sub	sp, #56	; 0x38
 800a718:	af04      	add	r7, sp, #16
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	607a      	str	r2, [r7, #4]
 800a720:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10a      	bne.n	800a73e <xTaskCreateStatic+0x2a>
	__asm volatile
 800a728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	623b      	str	r3, [r7, #32]
}
 800a73a:	bf00      	nop
 800a73c:	e7fe      	b.n	800a73c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a740:	2b00      	cmp	r3, #0
 800a742:	d10a      	bne.n	800a75a <xTaskCreateStatic+0x46>
	__asm volatile
 800a744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a748:	f383 8811 	msr	BASEPRI, r3
 800a74c:	f3bf 8f6f 	isb	sy
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	61fb      	str	r3, [r7, #28]
}
 800a756:	bf00      	nop
 800a758:	e7fe      	b.n	800a758 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a75a:	235c      	movs	r3, #92	; 0x5c
 800a75c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	2b5c      	cmp	r3, #92	; 0x5c
 800a762:	d00a      	beq.n	800a77a <xTaskCreateStatic+0x66>
	__asm volatile
 800a764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a768:	f383 8811 	msr	BASEPRI, r3
 800a76c:	f3bf 8f6f 	isb	sy
 800a770:	f3bf 8f4f 	dsb	sy
 800a774:	61bb      	str	r3, [r7, #24]
}
 800a776:	bf00      	nop
 800a778:	e7fe      	b.n	800a778 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a77a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d01e      	beq.n	800a7c0 <xTaskCreateStatic+0xac>
 800a782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a784:	2b00      	cmp	r3, #0
 800a786:	d01b      	beq.n	800a7c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a790:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a794:	2202      	movs	r2, #2
 800a796:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a79a:	2300      	movs	r3, #0
 800a79c:	9303      	str	r3, [sp, #12]
 800a79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a0:	9302      	str	r3, [sp, #8]
 800a7a2:	f107 0314 	add.w	r3, r7, #20
 800a7a6:	9301      	str	r3, [sp, #4]
 800a7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7aa:	9300      	str	r3, [sp, #0]
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	68b9      	ldr	r1, [r7, #8]
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	f000 f850 	bl	800a858 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a7b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a7ba:	f000 f8dd 	bl	800a978 <prvAddNewTaskToReadyList>
 800a7be:	e001      	b.n	800a7c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a7c4:	697b      	ldr	r3, [r7, #20]
	}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3728      	adds	r7, #40	; 0x28
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b08c      	sub	sp, #48	; 0x30
 800a7d2:	af04      	add	r7, sp, #16
 800a7d4:	60f8      	str	r0, [r7, #12]
 800a7d6:	60b9      	str	r1, [r7, #8]
 800a7d8:	603b      	str	r3, [r7, #0]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a7de:	88fb      	ldrh	r3, [r7, #6]
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f001 fc30 	bl	800c048 <pvPortMalloc>
 800a7e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d00e      	beq.n	800a80e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a7f0:	205c      	movs	r0, #92	; 0x5c
 800a7f2:	f001 fc29 	bl	800c048 <pvPortMalloc>
 800a7f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d003      	beq.n	800a806 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	697a      	ldr	r2, [r7, #20]
 800a802:	631a      	str	r2, [r3, #48]	; 0x30
 800a804:	e005      	b.n	800a812 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a806:	6978      	ldr	r0, [r7, #20]
 800a808:	f001 fcea 	bl	800c1e0 <vPortFree>
 800a80c:	e001      	b.n	800a812 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a80e:	2300      	movs	r3, #0
 800a810:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a812:	69fb      	ldr	r3, [r7, #28]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d017      	beq.n	800a848 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	2200      	movs	r2, #0
 800a81c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a820:	88fa      	ldrh	r2, [r7, #6]
 800a822:	2300      	movs	r3, #0
 800a824:	9303      	str	r3, [sp, #12]
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	9302      	str	r3, [sp, #8]
 800a82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82c:	9301      	str	r3, [sp, #4]
 800a82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a830:	9300      	str	r3, [sp, #0]
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	68b9      	ldr	r1, [r7, #8]
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	f000 f80e 	bl	800a858 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a83c:	69f8      	ldr	r0, [r7, #28]
 800a83e:	f000 f89b 	bl	800a978 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a842:	2301      	movs	r3, #1
 800a844:	61bb      	str	r3, [r7, #24]
 800a846:	e002      	b.n	800a84e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a848:	f04f 33ff 	mov.w	r3, #4294967295
 800a84c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a84e:	69bb      	ldr	r3, [r7, #24]
	}
 800a850:	4618      	mov	r0, r3
 800a852:	3720      	adds	r7, #32
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b088      	sub	sp, #32
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
 800a864:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a868:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	461a      	mov	r2, r3
 800a870:	21a5      	movs	r1, #165	; 0xa5
 800a872:	f002 f80b 	bl	800c88c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a880:	3b01      	subs	r3, #1
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	4413      	add	r3, r2
 800a886:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	f023 0307 	bic.w	r3, r3, #7
 800a88e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a890:	69bb      	ldr	r3, [r7, #24]
 800a892:	f003 0307 	and.w	r3, r3, #7
 800a896:	2b00      	cmp	r3, #0
 800a898:	d00a      	beq.n	800a8b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89e:	f383 8811 	msr	BASEPRI, r3
 800a8a2:	f3bf 8f6f 	isb	sy
 800a8a6:	f3bf 8f4f 	dsb	sy
 800a8aa:	617b      	str	r3, [r7, #20]
}
 800a8ac:	bf00      	nop
 800a8ae:	e7fe      	b.n	800a8ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d01f      	beq.n	800a8f6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	61fb      	str	r3, [r7, #28]
 800a8ba:	e012      	b.n	800a8e2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	69fb      	ldr	r3, [r7, #28]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	7819      	ldrb	r1, [r3, #0]
 800a8c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	3334      	adds	r3, #52	; 0x34
 800a8cc:	460a      	mov	r2, r1
 800a8ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a8d0:	68ba      	ldr	r2, [r7, #8]
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d006      	beq.n	800a8ea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	61fb      	str	r3, [r7, #28]
 800a8e2:	69fb      	ldr	r3, [r7, #28]
 800a8e4:	2b0f      	cmp	r3, #15
 800a8e6:	d9e9      	bls.n	800a8bc <prvInitialiseNewTask+0x64>
 800a8e8:	e000      	b.n	800a8ec <prvInitialiseNewTask+0x94>
			{
				break;
 800a8ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a8f4:	e003      	b.n	800a8fe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a900:	2b37      	cmp	r3, #55	; 0x37
 800a902:	d901      	bls.n	800a908 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a904:	2337      	movs	r3, #55	; 0x37
 800a906:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a90c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a912:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a916:	2200      	movs	r2, #0
 800a918:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91c:	3304      	adds	r3, #4
 800a91e:	4618      	mov	r0, r3
 800a920:	f7ff f978 	bl	8009c14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a926:	3318      	adds	r3, #24
 800a928:	4618      	mov	r0, r3
 800a92a:	f7ff f973 	bl	8009c14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a932:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a936:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a942:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a946:	2200      	movs	r2, #0
 800a948:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a952:	683a      	ldr	r2, [r7, #0]
 800a954:	68f9      	ldr	r1, [r7, #12]
 800a956:	69b8      	ldr	r0, [r7, #24]
 800a958:	f001 f928 	bl	800bbac <pxPortInitialiseStack>
 800a95c:	4602      	mov	r2, r0
 800a95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a960:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a964:	2b00      	cmp	r3, #0
 800a966:	d002      	beq.n	800a96e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a96c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a96e:	bf00      	nop
 800a970:	3720      	adds	r7, #32
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
	...

0800a978 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a980:	f001 fa40 	bl	800be04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a984:	4b2d      	ldr	r3, [pc, #180]	; (800aa3c <prvAddNewTaskToReadyList+0xc4>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	3301      	adds	r3, #1
 800a98a:	4a2c      	ldr	r2, [pc, #176]	; (800aa3c <prvAddNewTaskToReadyList+0xc4>)
 800a98c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a98e:	4b2c      	ldr	r3, [pc, #176]	; (800aa40 <prvAddNewTaskToReadyList+0xc8>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d109      	bne.n	800a9aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a996:	4a2a      	ldr	r2, [pc, #168]	; (800aa40 <prvAddNewTaskToReadyList+0xc8>)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a99c:	4b27      	ldr	r3, [pc, #156]	; (800aa3c <prvAddNewTaskToReadyList+0xc4>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d110      	bne.n	800a9c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a9a4:	f000 fc16 	bl	800b1d4 <prvInitialiseTaskLists>
 800a9a8:	e00d      	b.n	800a9c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a9aa:	4b26      	ldr	r3, [pc, #152]	; (800aa44 <prvAddNewTaskToReadyList+0xcc>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d109      	bne.n	800a9c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a9b2:	4b23      	ldr	r3, [pc, #140]	; (800aa40 <prvAddNewTaskToReadyList+0xc8>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d802      	bhi.n	800a9c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a9c0:	4a1f      	ldr	r2, [pc, #124]	; (800aa40 <prvAddNewTaskToReadyList+0xc8>)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a9c6:	4b20      	ldr	r3, [pc, #128]	; (800aa48 <prvAddNewTaskToReadyList+0xd0>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	4a1e      	ldr	r2, [pc, #120]	; (800aa48 <prvAddNewTaskToReadyList+0xd0>)
 800a9ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a9d0:	4b1d      	ldr	r3, [pc, #116]	; (800aa48 <prvAddNewTaskToReadyList+0xd0>)
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9dc:	4b1b      	ldr	r3, [pc, #108]	; (800aa4c <prvAddNewTaskToReadyList+0xd4>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d903      	bls.n	800a9ec <prvAddNewTaskToReadyList+0x74>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e8:	4a18      	ldr	r2, [pc, #96]	; (800aa4c <prvAddNewTaskToReadyList+0xd4>)
 800a9ea:	6013      	str	r3, [r2, #0]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f0:	4613      	mov	r3, r2
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	4413      	add	r3, r2
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	4a15      	ldr	r2, [pc, #84]	; (800aa50 <prvAddNewTaskToReadyList+0xd8>)
 800a9fa:	441a      	add	r2, r3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	3304      	adds	r3, #4
 800aa00:	4619      	mov	r1, r3
 800aa02:	4610      	mov	r0, r2
 800aa04:	f7ff f913 	bl	8009c2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aa08:	f001 fa2c 	bl	800be64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aa0c:	4b0d      	ldr	r3, [pc, #52]	; (800aa44 <prvAddNewTaskToReadyList+0xcc>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d00e      	beq.n	800aa32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aa14:	4b0a      	ldr	r3, [pc, #40]	; (800aa40 <prvAddNewTaskToReadyList+0xc8>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d207      	bcs.n	800aa32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aa22:	4b0c      	ldr	r3, [pc, #48]	; (800aa54 <prvAddNewTaskToReadyList+0xdc>)
 800aa24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa28:	601a      	str	r2, [r3, #0]
 800aa2a:	f3bf 8f4f 	dsb	sy
 800aa2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa32:	bf00      	nop
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	20002a5c 	.word	0x20002a5c
 800aa40:	20002588 	.word	0x20002588
 800aa44:	20002a68 	.word	0x20002a68
 800aa48:	20002a78 	.word	0x20002a78
 800aa4c:	20002a64 	.word	0x20002a64
 800aa50:	2000258c 	.word	0x2000258c
 800aa54:	e000ed04 	.word	0xe000ed04

0800aa58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aa60:	2300      	movs	r3, #0
 800aa62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d017      	beq.n	800aa9a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aa6a:	4b13      	ldr	r3, [pc, #76]	; (800aab8 <vTaskDelay+0x60>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d00a      	beq.n	800aa88 <vTaskDelay+0x30>
	__asm volatile
 800aa72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa76:	f383 8811 	msr	BASEPRI, r3
 800aa7a:	f3bf 8f6f 	isb	sy
 800aa7e:	f3bf 8f4f 	dsb	sy
 800aa82:	60bb      	str	r3, [r7, #8]
}
 800aa84:	bf00      	nop
 800aa86:	e7fe      	b.n	800aa86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aa88:	f000 f880 	bl	800ab8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 fcea 	bl	800b468 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aa94:	f000 f888 	bl	800aba8 <xTaskResumeAll>
 800aa98:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d107      	bne.n	800aab0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800aaa0:	4b06      	ldr	r3, [pc, #24]	; (800aabc <vTaskDelay+0x64>)
 800aaa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaa6:	601a      	str	r2, [r3, #0]
 800aaa8:	f3bf 8f4f 	dsb	sy
 800aaac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aab0:	bf00      	nop
 800aab2:	3710      	adds	r7, #16
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}
 800aab8:	20002a84 	.word	0x20002a84
 800aabc:	e000ed04 	.word	0xe000ed04

0800aac0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b08a      	sub	sp, #40	; 0x28
 800aac4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aac6:	2300      	movs	r3, #0
 800aac8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aaca:	2300      	movs	r3, #0
 800aacc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aace:	463a      	mov	r2, r7
 800aad0:	1d39      	adds	r1, r7, #4
 800aad2:	f107 0308 	add.w	r3, r7, #8
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7ff f848 	bl	8009b6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aadc:	6839      	ldr	r1, [r7, #0]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	9202      	str	r2, [sp, #8]
 800aae4:	9301      	str	r3, [sp, #4]
 800aae6:	2300      	movs	r3, #0
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	2300      	movs	r3, #0
 800aaec:	460a      	mov	r2, r1
 800aaee:	4921      	ldr	r1, [pc, #132]	; (800ab74 <vTaskStartScheduler+0xb4>)
 800aaf0:	4821      	ldr	r0, [pc, #132]	; (800ab78 <vTaskStartScheduler+0xb8>)
 800aaf2:	f7ff fe0f 	bl	800a714 <xTaskCreateStatic>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	4a20      	ldr	r2, [pc, #128]	; (800ab7c <vTaskStartScheduler+0xbc>)
 800aafa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aafc:	4b1f      	ldr	r3, [pc, #124]	; (800ab7c <vTaskStartScheduler+0xbc>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d002      	beq.n	800ab0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ab04:	2301      	movs	r3, #1
 800ab06:	617b      	str	r3, [r7, #20]
 800ab08:	e001      	b.n	800ab0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d102      	bne.n	800ab1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ab14:	f000 fcfc 	bl	800b510 <xTimerCreateTimerTask>
 800ab18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d116      	bne.n	800ab4e <vTaskStartScheduler+0x8e>
	__asm volatile
 800ab20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab24:	f383 8811 	msr	BASEPRI, r3
 800ab28:	f3bf 8f6f 	isb	sy
 800ab2c:	f3bf 8f4f 	dsb	sy
 800ab30:	613b      	str	r3, [r7, #16]
}
 800ab32:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ab34:	4b12      	ldr	r3, [pc, #72]	; (800ab80 <vTaskStartScheduler+0xc0>)
 800ab36:	f04f 32ff 	mov.w	r2, #4294967295
 800ab3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ab3c:	4b11      	ldr	r3, [pc, #68]	; (800ab84 <vTaskStartScheduler+0xc4>)
 800ab3e:	2201      	movs	r2, #1
 800ab40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ab42:	4b11      	ldr	r3, [pc, #68]	; (800ab88 <vTaskStartScheduler+0xc8>)
 800ab44:	2200      	movs	r2, #0
 800ab46:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ab48:	f001 f8ba 	bl	800bcc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ab4c:	e00e      	b.n	800ab6c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab54:	d10a      	bne.n	800ab6c <vTaskStartScheduler+0xac>
	__asm volatile
 800ab56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5a:	f383 8811 	msr	BASEPRI, r3
 800ab5e:	f3bf 8f6f 	isb	sy
 800ab62:	f3bf 8f4f 	dsb	sy
 800ab66:	60fb      	str	r3, [r7, #12]
}
 800ab68:	bf00      	nop
 800ab6a:	e7fe      	b.n	800ab6a <vTaskStartScheduler+0xaa>
}
 800ab6c:	bf00      	nop
 800ab6e:	3718      	adds	r7, #24
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	0800e438 	.word	0x0800e438
 800ab78:	0800b1a5 	.word	0x0800b1a5
 800ab7c:	20002a80 	.word	0x20002a80
 800ab80:	20002a7c 	.word	0x20002a7c
 800ab84:	20002a68 	.word	0x20002a68
 800ab88:	20002a60 	.word	0x20002a60

0800ab8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ab90:	4b04      	ldr	r3, [pc, #16]	; (800aba4 <vTaskSuspendAll+0x18>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	3301      	adds	r3, #1
 800ab96:	4a03      	ldr	r2, [pc, #12]	; (800aba4 <vTaskSuspendAll+0x18>)
 800ab98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ab9a:	bf00      	nop
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr
 800aba4:	20002a84 	.word	0x20002a84

0800aba8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800abae:	2300      	movs	r3, #0
 800abb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800abb2:	2300      	movs	r3, #0
 800abb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800abb6:	4b42      	ldr	r3, [pc, #264]	; (800acc0 <xTaskResumeAll+0x118>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d10a      	bne.n	800abd4 <xTaskResumeAll+0x2c>
	__asm volatile
 800abbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	603b      	str	r3, [r7, #0]
}
 800abd0:	bf00      	nop
 800abd2:	e7fe      	b.n	800abd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800abd4:	f001 f916 	bl	800be04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800abd8:	4b39      	ldr	r3, [pc, #228]	; (800acc0 <xTaskResumeAll+0x118>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	3b01      	subs	r3, #1
 800abde:	4a38      	ldr	r2, [pc, #224]	; (800acc0 <xTaskResumeAll+0x118>)
 800abe0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abe2:	4b37      	ldr	r3, [pc, #220]	; (800acc0 <xTaskResumeAll+0x118>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d162      	bne.n	800acb0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800abea:	4b36      	ldr	r3, [pc, #216]	; (800acc4 <xTaskResumeAll+0x11c>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d05e      	beq.n	800acb0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800abf2:	e02f      	b.n	800ac54 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abf4:	4b34      	ldr	r3, [pc, #208]	; (800acc8 <xTaskResumeAll+0x120>)
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	3318      	adds	r3, #24
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7ff f871 	bl	8009ce8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	3304      	adds	r3, #4
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7ff f86c 	bl	8009ce8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac14:	4b2d      	ldr	r3, [pc, #180]	; (800accc <xTaskResumeAll+0x124>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d903      	bls.n	800ac24 <xTaskResumeAll+0x7c>
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac20:	4a2a      	ldr	r2, [pc, #168]	; (800accc <xTaskResumeAll+0x124>)
 800ac22:	6013      	str	r3, [r2, #0]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac28:	4613      	mov	r3, r2
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	4413      	add	r3, r2
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	4a27      	ldr	r2, [pc, #156]	; (800acd0 <xTaskResumeAll+0x128>)
 800ac32:	441a      	add	r2, r3
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	3304      	adds	r3, #4
 800ac38:	4619      	mov	r1, r3
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	f7fe fff7 	bl	8009c2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac44:	4b23      	ldr	r3, [pc, #140]	; (800acd4 <xTaskResumeAll+0x12c>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d302      	bcc.n	800ac54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ac4e:	4b22      	ldr	r3, [pc, #136]	; (800acd8 <xTaskResumeAll+0x130>)
 800ac50:	2201      	movs	r2, #1
 800ac52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac54:	4b1c      	ldr	r3, [pc, #112]	; (800acc8 <xTaskResumeAll+0x120>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d1cb      	bne.n	800abf4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d001      	beq.n	800ac66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ac62:	f000 fb55 	bl	800b310 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ac66:	4b1d      	ldr	r3, [pc, #116]	; (800acdc <xTaskResumeAll+0x134>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d010      	beq.n	800ac94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ac72:	f000 f847 	bl	800ad04 <xTaskIncrementTick>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d002      	beq.n	800ac82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ac7c:	4b16      	ldr	r3, [pc, #88]	; (800acd8 <xTaskResumeAll+0x130>)
 800ac7e:	2201      	movs	r2, #1
 800ac80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	3b01      	subs	r3, #1
 800ac86:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d1f1      	bne.n	800ac72 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ac8e:	4b13      	ldr	r3, [pc, #76]	; (800acdc <xTaskResumeAll+0x134>)
 800ac90:	2200      	movs	r2, #0
 800ac92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ac94:	4b10      	ldr	r3, [pc, #64]	; (800acd8 <xTaskResumeAll+0x130>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d009      	beq.n	800acb0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aca0:	4b0f      	ldr	r3, [pc, #60]	; (800ace0 <xTaskResumeAll+0x138>)
 800aca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aca6:	601a      	str	r2, [r3, #0]
 800aca8:	f3bf 8f4f 	dsb	sy
 800acac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800acb0:	f001 f8d8 	bl	800be64 <vPortExitCritical>

	return xAlreadyYielded;
 800acb4:	68bb      	ldr	r3, [r7, #8]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3710      	adds	r7, #16
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	20002a84 	.word	0x20002a84
 800acc4:	20002a5c 	.word	0x20002a5c
 800acc8:	20002a1c 	.word	0x20002a1c
 800accc:	20002a64 	.word	0x20002a64
 800acd0:	2000258c 	.word	0x2000258c
 800acd4:	20002588 	.word	0x20002588
 800acd8:	20002a70 	.word	0x20002a70
 800acdc:	20002a6c 	.word	0x20002a6c
 800ace0:	e000ed04 	.word	0xe000ed04

0800ace4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ace4:	b480      	push	{r7}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800acea:	4b05      	ldr	r3, [pc, #20]	; (800ad00 <xTaskGetTickCount+0x1c>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800acf0:	687b      	ldr	r3, [r7, #4]
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	370c      	adds	r7, #12
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	20002a60 	.word	0x20002a60

0800ad04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b086      	sub	sp, #24
 800ad08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad0e:	4b4f      	ldr	r3, [pc, #316]	; (800ae4c <xTaskIncrementTick+0x148>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	f040 808f 	bne.w	800ae36 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ad18:	4b4d      	ldr	r3, [pc, #308]	; (800ae50 <xTaskIncrementTick+0x14c>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ad20:	4a4b      	ldr	r2, [pc, #300]	; (800ae50 <xTaskIncrementTick+0x14c>)
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d120      	bne.n	800ad6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ad2c:	4b49      	ldr	r3, [pc, #292]	; (800ae54 <xTaskIncrementTick+0x150>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00a      	beq.n	800ad4c <xTaskIncrementTick+0x48>
	__asm volatile
 800ad36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3a:	f383 8811 	msr	BASEPRI, r3
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	603b      	str	r3, [r7, #0]
}
 800ad48:	bf00      	nop
 800ad4a:	e7fe      	b.n	800ad4a <xTaskIncrementTick+0x46>
 800ad4c:	4b41      	ldr	r3, [pc, #260]	; (800ae54 <xTaskIncrementTick+0x150>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	60fb      	str	r3, [r7, #12]
 800ad52:	4b41      	ldr	r3, [pc, #260]	; (800ae58 <xTaskIncrementTick+0x154>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a3f      	ldr	r2, [pc, #252]	; (800ae54 <xTaskIncrementTick+0x150>)
 800ad58:	6013      	str	r3, [r2, #0]
 800ad5a:	4a3f      	ldr	r2, [pc, #252]	; (800ae58 <xTaskIncrementTick+0x154>)
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6013      	str	r3, [r2, #0]
 800ad60:	4b3e      	ldr	r3, [pc, #248]	; (800ae5c <xTaskIncrementTick+0x158>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	3301      	adds	r3, #1
 800ad66:	4a3d      	ldr	r2, [pc, #244]	; (800ae5c <xTaskIncrementTick+0x158>)
 800ad68:	6013      	str	r3, [r2, #0]
 800ad6a:	f000 fad1 	bl	800b310 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ad6e:	4b3c      	ldr	r3, [pc, #240]	; (800ae60 <xTaskIncrementTick+0x15c>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	693a      	ldr	r2, [r7, #16]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d349      	bcc.n	800ae0c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad78:	4b36      	ldr	r3, [pc, #216]	; (800ae54 <xTaskIncrementTick+0x150>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d104      	bne.n	800ad8c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad82:	4b37      	ldr	r3, [pc, #220]	; (800ae60 <xTaskIncrementTick+0x15c>)
 800ad84:	f04f 32ff 	mov.w	r2, #4294967295
 800ad88:	601a      	str	r2, [r3, #0]
					break;
 800ad8a:	e03f      	b.n	800ae0c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad8c:	4b31      	ldr	r3, [pc, #196]	; (800ae54 <xTaskIncrementTick+0x150>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	68db      	ldr	r3, [r3, #12]
 800ad94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ad9c:	693a      	ldr	r2, [r7, #16]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d203      	bcs.n	800adac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ada4:	4a2e      	ldr	r2, [pc, #184]	; (800ae60 <xTaskIncrementTick+0x15c>)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800adaa:	e02f      	b.n	800ae0c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	3304      	adds	r3, #4
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7fe ff99 	bl	8009ce8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d004      	beq.n	800adc8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	3318      	adds	r3, #24
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fe ff90 	bl	8009ce8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adcc:	4b25      	ldr	r3, [pc, #148]	; (800ae64 <xTaskIncrementTick+0x160>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	429a      	cmp	r2, r3
 800add2:	d903      	bls.n	800addc <xTaskIncrementTick+0xd8>
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add8:	4a22      	ldr	r2, [pc, #136]	; (800ae64 <xTaskIncrementTick+0x160>)
 800adda:	6013      	str	r3, [r2, #0]
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade0:	4613      	mov	r3, r2
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	4413      	add	r3, r2
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	4a1f      	ldr	r2, [pc, #124]	; (800ae68 <xTaskIncrementTick+0x164>)
 800adea:	441a      	add	r2, r3
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	3304      	adds	r3, #4
 800adf0:	4619      	mov	r1, r3
 800adf2:	4610      	mov	r0, r2
 800adf4:	f7fe ff1b 	bl	8009c2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adfc:	4b1b      	ldr	r3, [pc, #108]	; (800ae6c <xTaskIncrementTick+0x168>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d3b8      	bcc.n	800ad78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ae06:	2301      	movs	r3, #1
 800ae08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae0a:	e7b5      	b.n	800ad78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ae0c:	4b17      	ldr	r3, [pc, #92]	; (800ae6c <xTaskIncrementTick+0x168>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae12:	4915      	ldr	r1, [pc, #84]	; (800ae68 <xTaskIncrementTick+0x164>)
 800ae14:	4613      	mov	r3, r2
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	4413      	add	r3, r2
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	440b      	add	r3, r1
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d901      	bls.n	800ae28 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ae24:	2301      	movs	r3, #1
 800ae26:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ae28:	4b11      	ldr	r3, [pc, #68]	; (800ae70 <xTaskIncrementTick+0x16c>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d007      	beq.n	800ae40 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ae30:	2301      	movs	r3, #1
 800ae32:	617b      	str	r3, [r7, #20]
 800ae34:	e004      	b.n	800ae40 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ae36:	4b0f      	ldr	r3, [pc, #60]	; (800ae74 <xTaskIncrementTick+0x170>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	4a0d      	ldr	r2, [pc, #52]	; (800ae74 <xTaskIncrementTick+0x170>)
 800ae3e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ae40:	697b      	ldr	r3, [r7, #20]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3718      	adds	r7, #24
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	20002a84 	.word	0x20002a84
 800ae50:	20002a60 	.word	0x20002a60
 800ae54:	20002a14 	.word	0x20002a14
 800ae58:	20002a18 	.word	0x20002a18
 800ae5c:	20002a74 	.word	0x20002a74
 800ae60:	20002a7c 	.word	0x20002a7c
 800ae64:	20002a64 	.word	0x20002a64
 800ae68:	2000258c 	.word	0x2000258c
 800ae6c:	20002588 	.word	0x20002588
 800ae70:	20002a70 	.word	0x20002a70
 800ae74:	20002a6c 	.word	0x20002a6c

0800ae78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b085      	sub	sp, #20
 800ae7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ae7e:	4b28      	ldr	r3, [pc, #160]	; (800af20 <vTaskSwitchContext+0xa8>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d003      	beq.n	800ae8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ae86:	4b27      	ldr	r3, [pc, #156]	; (800af24 <vTaskSwitchContext+0xac>)
 800ae88:	2201      	movs	r2, #1
 800ae8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ae8c:	e041      	b.n	800af12 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ae8e:	4b25      	ldr	r3, [pc, #148]	; (800af24 <vTaskSwitchContext+0xac>)
 800ae90:	2200      	movs	r2, #0
 800ae92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae94:	4b24      	ldr	r3, [pc, #144]	; (800af28 <vTaskSwitchContext+0xb0>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	60fb      	str	r3, [r7, #12]
 800ae9a:	e010      	b.n	800aebe <vTaskSwitchContext+0x46>
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d10a      	bne.n	800aeb8 <vTaskSwitchContext+0x40>
	__asm volatile
 800aea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea6:	f383 8811 	msr	BASEPRI, r3
 800aeaa:	f3bf 8f6f 	isb	sy
 800aeae:	f3bf 8f4f 	dsb	sy
 800aeb2:	607b      	str	r3, [r7, #4]
}
 800aeb4:	bf00      	nop
 800aeb6:	e7fe      	b.n	800aeb6 <vTaskSwitchContext+0x3e>
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	3b01      	subs	r3, #1
 800aebc:	60fb      	str	r3, [r7, #12]
 800aebe:	491b      	ldr	r1, [pc, #108]	; (800af2c <vTaskSwitchContext+0xb4>)
 800aec0:	68fa      	ldr	r2, [r7, #12]
 800aec2:	4613      	mov	r3, r2
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	4413      	add	r3, r2
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	440b      	add	r3, r1
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d0e4      	beq.n	800ae9c <vTaskSwitchContext+0x24>
 800aed2:	68fa      	ldr	r2, [r7, #12]
 800aed4:	4613      	mov	r3, r2
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	4413      	add	r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	4a13      	ldr	r2, [pc, #76]	; (800af2c <vTaskSwitchContext+0xb4>)
 800aede:	4413      	add	r3, r2
 800aee0:	60bb      	str	r3, [r7, #8]
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	685a      	ldr	r2, [r3, #4]
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	605a      	str	r2, [r3, #4]
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	685a      	ldr	r2, [r3, #4]
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	3308      	adds	r3, #8
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d104      	bne.n	800af02 <vTaskSwitchContext+0x8a>
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	685a      	ldr	r2, [r3, #4]
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	605a      	str	r2, [r3, #4]
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	4a09      	ldr	r2, [pc, #36]	; (800af30 <vTaskSwitchContext+0xb8>)
 800af0a:	6013      	str	r3, [r2, #0]
 800af0c:	4a06      	ldr	r2, [pc, #24]	; (800af28 <vTaskSwitchContext+0xb0>)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	6013      	str	r3, [r2, #0]
}
 800af12:	bf00      	nop
 800af14:	3714      	adds	r7, #20
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr
 800af1e:	bf00      	nop
 800af20:	20002a84 	.word	0x20002a84
 800af24:	20002a70 	.word	0x20002a70
 800af28:	20002a64 	.word	0x20002a64
 800af2c:	2000258c 	.word	0x2000258c
 800af30:	20002588 	.word	0x20002588

0800af34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10a      	bne.n	800af5a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800af44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af48:	f383 8811 	msr	BASEPRI, r3
 800af4c:	f3bf 8f6f 	isb	sy
 800af50:	f3bf 8f4f 	dsb	sy
 800af54:	60fb      	str	r3, [r7, #12]
}
 800af56:	bf00      	nop
 800af58:	e7fe      	b.n	800af58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800af5a:	4b07      	ldr	r3, [pc, #28]	; (800af78 <vTaskPlaceOnEventList+0x44>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	3318      	adds	r3, #24
 800af60:	4619      	mov	r1, r3
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f7fe fe87 	bl	8009c76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800af68:	2101      	movs	r1, #1
 800af6a:	6838      	ldr	r0, [r7, #0]
 800af6c:	f000 fa7c 	bl	800b468 <prvAddCurrentTaskToDelayedList>
}
 800af70:	bf00      	nop
 800af72:	3710      	adds	r7, #16
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	20002588 	.word	0x20002588

0800af7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b086      	sub	sp, #24
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d10a      	bne.n	800afa4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800af8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af92:	f383 8811 	msr	BASEPRI, r3
 800af96:	f3bf 8f6f 	isb	sy
 800af9a:	f3bf 8f4f 	dsb	sy
 800af9e:	617b      	str	r3, [r7, #20]
}
 800afa0:	bf00      	nop
 800afa2:	e7fe      	b.n	800afa2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800afa4:	4b0a      	ldr	r3, [pc, #40]	; (800afd0 <vTaskPlaceOnEventListRestricted+0x54>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	3318      	adds	r3, #24
 800afaa:	4619      	mov	r1, r3
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	f7fe fe3e 	bl	8009c2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d002      	beq.n	800afbe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800afb8:	f04f 33ff 	mov.w	r3, #4294967295
 800afbc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800afbe:	6879      	ldr	r1, [r7, #4]
 800afc0:	68b8      	ldr	r0, [r7, #8]
 800afc2:	f000 fa51 	bl	800b468 <prvAddCurrentTaskToDelayedList>
	}
 800afc6:	bf00      	nop
 800afc8:	3718      	adds	r7, #24
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	20002588 	.word	0x20002588

0800afd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b086      	sub	sp, #24
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d10a      	bne.n	800b000 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800afea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afee:	f383 8811 	msr	BASEPRI, r3
 800aff2:	f3bf 8f6f 	isb	sy
 800aff6:	f3bf 8f4f 	dsb	sy
 800affa:	60fb      	str	r3, [r7, #12]
}
 800affc:	bf00      	nop
 800affe:	e7fe      	b.n	800affe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	3318      	adds	r3, #24
 800b004:	4618      	mov	r0, r3
 800b006:	f7fe fe6f 	bl	8009ce8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b00a:	4b1e      	ldr	r3, [pc, #120]	; (800b084 <xTaskRemoveFromEventList+0xb0>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d11d      	bne.n	800b04e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	3304      	adds	r3, #4
 800b016:	4618      	mov	r0, r3
 800b018:	f7fe fe66 	bl	8009ce8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b020:	4b19      	ldr	r3, [pc, #100]	; (800b088 <xTaskRemoveFromEventList+0xb4>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	429a      	cmp	r2, r3
 800b026:	d903      	bls.n	800b030 <xTaskRemoveFromEventList+0x5c>
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b02c:	4a16      	ldr	r2, [pc, #88]	; (800b088 <xTaskRemoveFromEventList+0xb4>)
 800b02e:	6013      	str	r3, [r2, #0]
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b034:	4613      	mov	r3, r2
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	4413      	add	r3, r2
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	4a13      	ldr	r2, [pc, #76]	; (800b08c <xTaskRemoveFromEventList+0xb8>)
 800b03e:	441a      	add	r2, r3
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	3304      	adds	r3, #4
 800b044:	4619      	mov	r1, r3
 800b046:	4610      	mov	r0, r2
 800b048:	f7fe fdf1 	bl	8009c2e <vListInsertEnd>
 800b04c:	e005      	b.n	800b05a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	3318      	adds	r3, #24
 800b052:	4619      	mov	r1, r3
 800b054:	480e      	ldr	r0, [pc, #56]	; (800b090 <xTaskRemoveFromEventList+0xbc>)
 800b056:	f7fe fdea 	bl	8009c2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b05e:	4b0d      	ldr	r3, [pc, #52]	; (800b094 <xTaskRemoveFromEventList+0xc0>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b064:	429a      	cmp	r2, r3
 800b066:	d905      	bls.n	800b074 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b068:	2301      	movs	r3, #1
 800b06a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b06c:	4b0a      	ldr	r3, [pc, #40]	; (800b098 <xTaskRemoveFromEventList+0xc4>)
 800b06e:	2201      	movs	r2, #1
 800b070:	601a      	str	r2, [r3, #0]
 800b072:	e001      	b.n	800b078 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b074:	2300      	movs	r3, #0
 800b076:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b078:	697b      	ldr	r3, [r7, #20]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3718      	adds	r7, #24
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	20002a84 	.word	0x20002a84
 800b088:	20002a64 	.word	0x20002a64
 800b08c:	2000258c 	.word	0x2000258c
 800b090:	20002a1c 	.word	0x20002a1c
 800b094:	20002588 	.word	0x20002588
 800b098:	20002a70 	.word	0x20002a70

0800b09c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b09c:	b480      	push	{r7}
 800b09e:	b083      	sub	sp, #12
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b0a4:	4b06      	ldr	r3, [pc, #24]	; (800b0c0 <vTaskInternalSetTimeOutState+0x24>)
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b0ac:	4b05      	ldr	r3, [pc, #20]	; (800b0c4 <vTaskInternalSetTimeOutState+0x28>)
 800b0ae:	681a      	ldr	r2, [r3, #0]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	605a      	str	r2, [r3, #4]
}
 800b0b4:	bf00      	nop
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr
 800b0c0:	20002a74 	.word	0x20002a74
 800b0c4:	20002a60 	.word	0x20002a60

0800b0c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b088      	sub	sp, #32
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d10a      	bne.n	800b0ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0dc:	f383 8811 	msr	BASEPRI, r3
 800b0e0:	f3bf 8f6f 	isb	sy
 800b0e4:	f3bf 8f4f 	dsb	sy
 800b0e8:	613b      	str	r3, [r7, #16]
}
 800b0ea:	bf00      	nop
 800b0ec:	e7fe      	b.n	800b0ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d10a      	bne.n	800b10a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f8:	f383 8811 	msr	BASEPRI, r3
 800b0fc:	f3bf 8f6f 	isb	sy
 800b100:	f3bf 8f4f 	dsb	sy
 800b104:	60fb      	str	r3, [r7, #12]
}
 800b106:	bf00      	nop
 800b108:	e7fe      	b.n	800b108 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b10a:	f000 fe7b 	bl	800be04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b10e:	4b1d      	ldr	r3, [pc, #116]	; (800b184 <xTaskCheckForTimeOut+0xbc>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	69ba      	ldr	r2, [r7, #24]
 800b11a:	1ad3      	subs	r3, r2, r3
 800b11c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b126:	d102      	bne.n	800b12e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b128:	2300      	movs	r3, #0
 800b12a:	61fb      	str	r3, [r7, #28]
 800b12c:	e023      	b.n	800b176 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	4b15      	ldr	r3, [pc, #84]	; (800b188 <xTaskCheckForTimeOut+0xc0>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	429a      	cmp	r2, r3
 800b138:	d007      	beq.n	800b14a <xTaskCheckForTimeOut+0x82>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	69ba      	ldr	r2, [r7, #24]
 800b140:	429a      	cmp	r2, r3
 800b142:	d302      	bcc.n	800b14a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b144:	2301      	movs	r3, #1
 800b146:	61fb      	str	r3, [r7, #28]
 800b148:	e015      	b.n	800b176 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	697a      	ldr	r2, [r7, #20]
 800b150:	429a      	cmp	r2, r3
 800b152:	d20b      	bcs.n	800b16c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	1ad2      	subs	r2, r2, r3
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f7ff ff9b 	bl	800b09c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b166:	2300      	movs	r3, #0
 800b168:	61fb      	str	r3, [r7, #28]
 800b16a:	e004      	b.n	800b176 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	2200      	movs	r2, #0
 800b170:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b172:	2301      	movs	r3, #1
 800b174:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b176:	f000 fe75 	bl	800be64 <vPortExitCritical>

	return xReturn;
 800b17a:	69fb      	ldr	r3, [r7, #28]
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3720      	adds	r7, #32
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}
 800b184:	20002a60 	.word	0x20002a60
 800b188:	20002a74 	.word	0x20002a74

0800b18c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b18c:	b480      	push	{r7}
 800b18e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b190:	4b03      	ldr	r3, [pc, #12]	; (800b1a0 <vTaskMissedYield+0x14>)
 800b192:	2201      	movs	r2, #1
 800b194:	601a      	str	r2, [r3, #0]
}
 800b196:	bf00      	nop
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr
 800b1a0:	20002a70 	.word	0x20002a70

0800b1a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b1ac:	f000 f852 	bl	800b254 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b1b0:	4b06      	ldr	r3, [pc, #24]	; (800b1cc <prvIdleTask+0x28>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d9f9      	bls.n	800b1ac <prvIdleTask+0x8>
			{
				taskYIELD();
 800b1b8:	4b05      	ldr	r3, [pc, #20]	; (800b1d0 <prvIdleTask+0x2c>)
 800b1ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1be:	601a      	str	r2, [r3, #0]
 800b1c0:	f3bf 8f4f 	dsb	sy
 800b1c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b1c8:	e7f0      	b.n	800b1ac <prvIdleTask+0x8>
 800b1ca:	bf00      	nop
 800b1cc:	2000258c 	.word	0x2000258c
 800b1d0:	e000ed04 	.word	0xe000ed04

0800b1d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b1da:	2300      	movs	r3, #0
 800b1dc:	607b      	str	r3, [r7, #4]
 800b1de:	e00c      	b.n	800b1fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	4613      	mov	r3, r2
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	4413      	add	r3, r2
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	4a12      	ldr	r2, [pc, #72]	; (800b234 <prvInitialiseTaskLists+0x60>)
 800b1ec:	4413      	add	r3, r2
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7fe fcf0 	bl	8009bd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	607b      	str	r3, [r7, #4]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2b37      	cmp	r3, #55	; 0x37
 800b1fe:	d9ef      	bls.n	800b1e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b200:	480d      	ldr	r0, [pc, #52]	; (800b238 <prvInitialiseTaskLists+0x64>)
 800b202:	f7fe fce7 	bl	8009bd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b206:	480d      	ldr	r0, [pc, #52]	; (800b23c <prvInitialiseTaskLists+0x68>)
 800b208:	f7fe fce4 	bl	8009bd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b20c:	480c      	ldr	r0, [pc, #48]	; (800b240 <prvInitialiseTaskLists+0x6c>)
 800b20e:	f7fe fce1 	bl	8009bd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b212:	480c      	ldr	r0, [pc, #48]	; (800b244 <prvInitialiseTaskLists+0x70>)
 800b214:	f7fe fcde 	bl	8009bd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b218:	480b      	ldr	r0, [pc, #44]	; (800b248 <prvInitialiseTaskLists+0x74>)
 800b21a:	f7fe fcdb 	bl	8009bd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b21e:	4b0b      	ldr	r3, [pc, #44]	; (800b24c <prvInitialiseTaskLists+0x78>)
 800b220:	4a05      	ldr	r2, [pc, #20]	; (800b238 <prvInitialiseTaskLists+0x64>)
 800b222:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b224:	4b0a      	ldr	r3, [pc, #40]	; (800b250 <prvInitialiseTaskLists+0x7c>)
 800b226:	4a05      	ldr	r2, [pc, #20]	; (800b23c <prvInitialiseTaskLists+0x68>)
 800b228:	601a      	str	r2, [r3, #0]
}
 800b22a:	bf00      	nop
 800b22c:	3708      	adds	r7, #8
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	2000258c 	.word	0x2000258c
 800b238:	200029ec 	.word	0x200029ec
 800b23c:	20002a00 	.word	0x20002a00
 800b240:	20002a1c 	.word	0x20002a1c
 800b244:	20002a30 	.word	0x20002a30
 800b248:	20002a48 	.word	0x20002a48
 800b24c:	20002a14 	.word	0x20002a14
 800b250:	20002a18 	.word	0x20002a18

0800b254 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b25a:	e019      	b.n	800b290 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b25c:	f000 fdd2 	bl	800be04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b260:	4b10      	ldr	r3, [pc, #64]	; (800b2a4 <prvCheckTasksWaitingTermination+0x50>)
 800b262:	68db      	ldr	r3, [r3, #12]
 800b264:	68db      	ldr	r3, [r3, #12]
 800b266:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	3304      	adds	r3, #4
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7fe fd3b 	bl	8009ce8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b272:	4b0d      	ldr	r3, [pc, #52]	; (800b2a8 <prvCheckTasksWaitingTermination+0x54>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	3b01      	subs	r3, #1
 800b278:	4a0b      	ldr	r2, [pc, #44]	; (800b2a8 <prvCheckTasksWaitingTermination+0x54>)
 800b27a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b27c:	4b0b      	ldr	r3, [pc, #44]	; (800b2ac <prvCheckTasksWaitingTermination+0x58>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	3b01      	subs	r3, #1
 800b282:	4a0a      	ldr	r2, [pc, #40]	; (800b2ac <prvCheckTasksWaitingTermination+0x58>)
 800b284:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b286:	f000 fded 	bl	800be64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 f810 	bl	800b2b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b290:	4b06      	ldr	r3, [pc, #24]	; (800b2ac <prvCheckTasksWaitingTermination+0x58>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d1e1      	bne.n	800b25c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b298:	bf00      	nop
 800b29a:	bf00      	nop
 800b29c:	3708      	adds	r7, #8
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20002a30 	.word	0x20002a30
 800b2a8:	20002a5c 	.word	0x20002a5c
 800b2ac:	20002a44 	.word	0x20002a44

0800b2b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d108      	bne.n	800b2d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f000 ff8a 	bl	800c1e0 <vPortFree>
				vPortFree( pxTCB );
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 ff87 	bl	800c1e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b2d2:	e018      	b.n	800b306 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d103      	bne.n	800b2e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 ff7e 	bl	800c1e0 <vPortFree>
	}
 800b2e4:	e00f      	b.n	800b306 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b2ec:	2b02      	cmp	r3, #2
 800b2ee:	d00a      	beq.n	800b306 <prvDeleteTCB+0x56>
	__asm volatile
 800b2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f4:	f383 8811 	msr	BASEPRI, r3
 800b2f8:	f3bf 8f6f 	isb	sy
 800b2fc:	f3bf 8f4f 	dsb	sy
 800b300:	60fb      	str	r3, [r7, #12]
}
 800b302:	bf00      	nop
 800b304:	e7fe      	b.n	800b304 <prvDeleteTCB+0x54>
	}
 800b306:	bf00      	nop
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
	...

0800b310 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b316:	4b0c      	ldr	r3, [pc, #48]	; (800b348 <prvResetNextTaskUnblockTime+0x38>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d104      	bne.n	800b32a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b320:	4b0a      	ldr	r3, [pc, #40]	; (800b34c <prvResetNextTaskUnblockTime+0x3c>)
 800b322:	f04f 32ff 	mov.w	r2, #4294967295
 800b326:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b328:	e008      	b.n	800b33c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b32a:	4b07      	ldr	r3, [pc, #28]	; (800b348 <prvResetNextTaskUnblockTime+0x38>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	4a04      	ldr	r2, [pc, #16]	; (800b34c <prvResetNextTaskUnblockTime+0x3c>)
 800b33a:	6013      	str	r3, [r2, #0]
}
 800b33c:	bf00      	nop
 800b33e:	370c      	adds	r7, #12
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr
 800b348:	20002a14 	.word	0x20002a14
 800b34c:	20002a7c 	.word	0x20002a7c

0800b350 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b356:	4b0b      	ldr	r3, [pc, #44]	; (800b384 <xTaskGetSchedulerState+0x34>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d102      	bne.n	800b364 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b35e:	2301      	movs	r3, #1
 800b360:	607b      	str	r3, [r7, #4]
 800b362:	e008      	b.n	800b376 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b364:	4b08      	ldr	r3, [pc, #32]	; (800b388 <xTaskGetSchedulerState+0x38>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d102      	bne.n	800b372 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b36c:	2302      	movs	r3, #2
 800b36e:	607b      	str	r3, [r7, #4]
 800b370:	e001      	b.n	800b376 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b372:	2300      	movs	r3, #0
 800b374:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b376:	687b      	ldr	r3, [r7, #4]
	}
 800b378:	4618      	mov	r0, r3
 800b37a:	370c      	adds	r7, #12
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr
 800b384:	20002a68 	.word	0x20002a68
 800b388:	20002a84 	.word	0x20002a84

0800b38c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b086      	sub	sp, #24
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b398:	2300      	movs	r3, #0
 800b39a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d056      	beq.n	800b450 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b3a2:	4b2e      	ldr	r3, [pc, #184]	; (800b45c <xTaskPriorityDisinherit+0xd0>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	693a      	ldr	r2, [r7, #16]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d00a      	beq.n	800b3c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b0:	f383 8811 	msr	BASEPRI, r3
 800b3b4:	f3bf 8f6f 	isb	sy
 800b3b8:	f3bf 8f4f 	dsb	sy
 800b3bc:	60fb      	str	r3, [r7, #12]
}
 800b3be:	bf00      	nop
 800b3c0:	e7fe      	b.n	800b3c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d10a      	bne.n	800b3e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ce:	f383 8811 	msr	BASEPRI, r3
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	f3bf 8f4f 	dsb	sy
 800b3da:	60bb      	str	r3, [r7, #8]
}
 800b3dc:	bf00      	nop
 800b3de:	e7fe      	b.n	800b3de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3e4:	1e5a      	subs	r2, r3, #1
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d02c      	beq.n	800b450 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d128      	bne.n	800b450 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	3304      	adds	r3, #4
 800b402:	4618      	mov	r0, r3
 800b404:	f7fe fc70 	bl	8009ce8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b414:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b420:	4b0f      	ldr	r3, [pc, #60]	; (800b460 <xTaskPriorityDisinherit+0xd4>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	429a      	cmp	r2, r3
 800b426:	d903      	bls.n	800b430 <xTaskPriorityDisinherit+0xa4>
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b42c:	4a0c      	ldr	r2, [pc, #48]	; (800b460 <xTaskPriorityDisinherit+0xd4>)
 800b42e:	6013      	str	r3, [r2, #0]
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b434:	4613      	mov	r3, r2
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	4413      	add	r3, r2
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	4a09      	ldr	r2, [pc, #36]	; (800b464 <xTaskPriorityDisinherit+0xd8>)
 800b43e:	441a      	add	r2, r3
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	3304      	adds	r3, #4
 800b444:	4619      	mov	r1, r3
 800b446:	4610      	mov	r0, r2
 800b448:	f7fe fbf1 	bl	8009c2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b44c:	2301      	movs	r3, #1
 800b44e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b450:	697b      	ldr	r3, [r7, #20]
	}
 800b452:	4618      	mov	r0, r3
 800b454:	3718      	adds	r7, #24
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	20002588 	.word	0x20002588
 800b460:	20002a64 	.word	0x20002a64
 800b464:	2000258c 	.word	0x2000258c

0800b468 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b472:	4b21      	ldr	r3, [pc, #132]	; (800b4f8 <prvAddCurrentTaskToDelayedList+0x90>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b478:	4b20      	ldr	r3, [pc, #128]	; (800b4fc <prvAddCurrentTaskToDelayedList+0x94>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	3304      	adds	r3, #4
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fe fc32 	bl	8009ce8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b48a:	d10a      	bne.n	800b4a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d007      	beq.n	800b4a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b492:	4b1a      	ldr	r3, [pc, #104]	; (800b4fc <prvAddCurrentTaskToDelayedList+0x94>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	3304      	adds	r3, #4
 800b498:	4619      	mov	r1, r3
 800b49a:	4819      	ldr	r0, [pc, #100]	; (800b500 <prvAddCurrentTaskToDelayedList+0x98>)
 800b49c:	f7fe fbc7 	bl	8009c2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b4a0:	e026      	b.n	800b4f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b4a2:	68fa      	ldr	r2, [r7, #12]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b4aa:	4b14      	ldr	r3, [pc, #80]	; (800b4fc <prvAddCurrentTaskToDelayedList+0x94>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	68ba      	ldr	r2, [r7, #8]
 800b4b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b4b2:	68ba      	ldr	r2, [r7, #8]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d209      	bcs.n	800b4ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4ba:	4b12      	ldr	r3, [pc, #72]	; (800b504 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	4b0f      	ldr	r3, [pc, #60]	; (800b4fc <prvAddCurrentTaskToDelayedList+0x94>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	3304      	adds	r3, #4
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	4610      	mov	r0, r2
 800b4c8:	f7fe fbd5 	bl	8009c76 <vListInsert>
}
 800b4cc:	e010      	b.n	800b4f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4ce:	4b0e      	ldr	r3, [pc, #56]	; (800b508 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	4b0a      	ldr	r3, [pc, #40]	; (800b4fc <prvAddCurrentTaskToDelayedList+0x94>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	3304      	adds	r3, #4
 800b4d8:	4619      	mov	r1, r3
 800b4da:	4610      	mov	r0, r2
 800b4dc:	f7fe fbcb 	bl	8009c76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b4e0:	4b0a      	ldr	r3, [pc, #40]	; (800b50c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	68ba      	ldr	r2, [r7, #8]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d202      	bcs.n	800b4f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b4ea:	4a08      	ldr	r2, [pc, #32]	; (800b50c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	6013      	str	r3, [r2, #0]
}
 800b4f0:	bf00      	nop
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	20002a60 	.word	0x20002a60
 800b4fc:	20002588 	.word	0x20002588
 800b500:	20002a48 	.word	0x20002a48
 800b504:	20002a18 	.word	0x20002a18
 800b508:	20002a14 	.word	0x20002a14
 800b50c:	20002a7c 	.word	0x20002a7c

0800b510 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b08a      	sub	sp, #40	; 0x28
 800b514:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b516:	2300      	movs	r3, #0
 800b518:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b51a:	f000 fb07 	bl	800bb2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b51e:	4b1c      	ldr	r3, [pc, #112]	; (800b590 <xTimerCreateTimerTask+0x80>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d021      	beq.n	800b56a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b526:	2300      	movs	r3, #0
 800b528:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b52a:	2300      	movs	r3, #0
 800b52c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b52e:	1d3a      	adds	r2, r7, #4
 800b530:	f107 0108 	add.w	r1, r7, #8
 800b534:	f107 030c 	add.w	r3, r7, #12
 800b538:	4618      	mov	r0, r3
 800b53a:	f7fe fb31 	bl	8009ba0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b53e:	6879      	ldr	r1, [r7, #4]
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	9202      	str	r2, [sp, #8]
 800b546:	9301      	str	r3, [sp, #4]
 800b548:	2302      	movs	r3, #2
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	2300      	movs	r3, #0
 800b54e:	460a      	mov	r2, r1
 800b550:	4910      	ldr	r1, [pc, #64]	; (800b594 <xTimerCreateTimerTask+0x84>)
 800b552:	4811      	ldr	r0, [pc, #68]	; (800b598 <xTimerCreateTimerTask+0x88>)
 800b554:	f7ff f8de 	bl	800a714 <xTaskCreateStatic>
 800b558:	4603      	mov	r3, r0
 800b55a:	4a10      	ldr	r2, [pc, #64]	; (800b59c <xTimerCreateTimerTask+0x8c>)
 800b55c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b55e:	4b0f      	ldr	r3, [pc, #60]	; (800b59c <xTimerCreateTimerTask+0x8c>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d001      	beq.n	800b56a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b566:	2301      	movs	r3, #1
 800b568:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10a      	bne.n	800b586 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b574:	f383 8811 	msr	BASEPRI, r3
 800b578:	f3bf 8f6f 	isb	sy
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	613b      	str	r3, [r7, #16]
}
 800b582:	bf00      	nop
 800b584:	e7fe      	b.n	800b584 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b586:	697b      	ldr	r3, [r7, #20]
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3718      	adds	r7, #24
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	20002ab8 	.word	0x20002ab8
 800b594:	0800e440 	.word	0x0800e440
 800b598:	0800b6d5 	.word	0x0800b6d5
 800b59c:	20002abc 	.word	0x20002abc

0800b5a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b08a      	sub	sp, #40	; 0x28
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	607a      	str	r2, [r7, #4]
 800b5ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10a      	bne.n	800b5ce <xTimerGenericCommand+0x2e>
	__asm volatile
 800b5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5bc:	f383 8811 	msr	BASEPRI, r3
 800b5c0:	f3bf 8f6f 	isb	sy
 800b5c4:	f3bf 8f4f 	dsb	sy
 800b5c8:	623b      	str	r3, [r7, #32]
}
 800b5ca:	bf00      	nop
 800b5cc:	e7fe      	b.n	800b5cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b5ce:	4b1a      	ldr	r3, [pc, #104]	; (800b638 <xTimerGenericCommand+0x98>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d02a      	beq.n	800b62c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	2b05      	cmp	r3, #5
 800b5e6:	dc18      	bgt.n	800b61a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b5e8:	f7ff feb2 	bl	800b350 <xTaskGetSchedulerState>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2b02      	cmp	r3, #2
 800b5f0:	d109      	bne.n	800b606 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b5f2:	4b11      	ldr	r3, [pc, #68]	; (800b638 <xTimerGenericCommand+0x98>)
 800b5f4:	6818      	ldr	r0, [r3, #0]
 800b5f6:	f107 0110 	add.w	r1, r7, #16
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5fe:	f7fe fca1 	bl	8009f44 <xQueueGenericSend>
 800b602:	6278      	str	r0, [r7, #36]	; 0x24
 800b604:	e012      	b.n	800b62c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b606:	4b0c      	ldr	r3, [pc, #48]	; (800b638 <xTimerGenericCommand+0x98>)
 800b608:	6818      	ldr	r0, [r3, #0]
 800b60a:	f107 0110 	add.w	r1, r7, #16
 800b60e:	2300      	movs	r3, #0
 800b610:	2200      	movs	r2, #0
 800b612:	f7fe fc97 	bl	8009f44 <xQueueGenericSend>
 800b616:	6278      	str	r0, [r7, #36]	; 0x24
 800b618:	e008      	b.n	800b62c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b61a:	4b07      	ldr	r3, [pc, #28]	; (800b638 <xTimerGenericCommand+0x98>)
 800b61c:	6818      	ldr	r0, [r3, #0]
 800b61e:	f107 0110 	add.w	r1, r7, #16
 800b622:	2300      	movs	r3, #0
 800b624:	683a      	ldr	r2, [r7, #0]
 800b626:	f7fe fd8b 	bl	800a140 <xQueueGenericSendFromISR>
 800b62a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3728      	adds	r7, #40	; 0x28
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	20002ab8 	.word	0x20002ab8

0800b63c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b088      	sub	sp, #32
 800b640:	af02      	add	r7, sp, #8
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b646:	4b22      	ldr	r3, [pc, #136]	; (800b6d0 <prvProcessExpiredTimer+0x94>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	68db      	ldr	r3, [r3, #12]
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	3304      	adds	r3, #4
 800b654:	4618      	mov	r0, r3
 800b656:	f7fe fb47 	bl	8009ce8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b660:	f003 0304 	and.w	r3, r3, #4
 800b664:	2b00      	cmp	r3, #0
 800b666:	d022      	beq.n	800b6ae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	699a      	ldr	r2, [r3, #24]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	18d1      	adds	r1, r2, r3
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	683a      	ldr	r2, [r7, #0]
 800b674:	6978      	ldr	r0, [r7, #20]
 800b676:	f000 f8d1 	bl	800b81c <prvInsertTimerInActiveList>
 800b67a:	4603      	mov	r3, r0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d01f      	beq.n	800b6c0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b680:	2300      	movs	r3, #0
 800b682:	9300      	str	r3, [sp, #0]
 800b684:	2300      	movs	r3, #0
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	2100      	movs	r1, #0
 800b68a:	6978      	ldr	r0, [r7, #20]
 800b68c:	f7ff ff88 	bl	800b5a0 <xTimerGenericCommand>
 800b690:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d113      	bne.n	800b6c0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69c:	f383 8811 	msr	BASEPRI, r3
 800b6a0:	f3bf 8f6f 	isb	sy
 800b6a4:	f3bf 8f4f 	dsb	sy
 800b6a8:	60fb      	str	r3, [r7, #12]
}
 800b6aa:	bf00      	nop
 800b6ac:	e7fe      	b.n	800b6ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6b4:	f023 0301 	bic.w	r3, r3, #1
 800b6b8:	b2da      	uxtb	r2, r3
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	6a1b      	ldr	r3, [r3, #32]
 800b6c4:	6978      	ldr	r0, [r7, #20]
 800b6c6:	4798      	blx	r3
}
 800b6c8:	bf00      	nop
 800b6ca:	3718      	adds	r7, #24
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	20002ab0 	.word	0x20002ab0

0800b6d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b6dc:	f107 0308 	add.w	r3, r7, #8
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f000 f857 	bl	800b794 <prvGetNextExpireTime>
 800b6e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	68f8      	ldr	r0, [r7, #12]
 800b6ee:	f000 f803 	bl	800b6f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b6f2:	f000 f8d5 	bl	800b8a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b6f6:	e7f1      	b.n	800b6dc <prvTimerTask+0x8>

0800b6f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b702:	f7ff fa43 	bl	800ab8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b706:	f107 0308 	add.w	r3, r7, #8
 800b70a:	4618      	mov	r0, r3
 800b70c:	f000 f866 	bl	800b7dc <prvSampleTimeNow>
 800b710:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d130      	bne.n	800b77a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d10a      	bne.n	800b734 <prvProcessTimerOrBlockTask+0x3c>
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	429a      	cmp	r2, r3
 800b724:	d806      	bhi.n	800b734 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b726:	f7ff fa3f 	bl	800aba8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b72a:	68f9      	ldr	r1, [r7, #12]
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f7ff ff85 	bl	800b63c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b732:	e024      	b.n	800b77e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d008      	beq.n	800b74c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b73a:	4b13      	ldr	r3, [pc, #76]	; (800b788 <prvProcessTimerOrBlockTask+0x90>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d101      	bne.n	800b748 <prvProcessTimerOrBlockTask+0x50>
 800b744:	2301      	movs	r3, #1
 800b746:	e000      	b.n	800b74a <prvProcessTimerOrBlockTask+0x52>
 800b748:	2300      	movs	r3, #0
 800b74a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b74c:	4b0f      	ldr	r3, [pc, #60]	; (800b78c <prvProcessTimerOrBlockTask+0x94>)
 800b74e:	6818      	ldr	r0, [r3, #0]
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	1ad3      	subs	r3, r2, r3
 800b756:	683a      	ldr	r2, [r7, #0]
 800b758:	4619      	mov	r1, r3
 800b75a:	f7fe ffa7 	bl	800a6ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b75e:	f7ff fa23 	bl	800aba8 <xTaskResumeAll>
 800b762:	4603      	mov	r3, r0
 800b764:	2b00      	cmp	r3, #0
 800b766:	d10a      	bne.n	800b77e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b768:	4b09      	ldr	r3, [pc, #36]	; (800b790 <prvProcessTimerOrBlockTask+0x98>)
 800b76a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b76e:	601a      	str	r2, [r3, #0]
 800b770:	f3bf 8f4f 	dsb	sy
 800b774:	f3bf 8f6f 	isb	sy
}
 800b778:	e001      	b.n	800b77e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b77a:	f7ff fa15 	bl	800aba8 <xTaskResumeAll>
}
 800b77e:	bf00      	nop
 800b780:	3710      	adds	r7, #16
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	20002ab4 	.word	0x20002ab4
 800b78c:	20002ab8 	.word	0x20002ab8
 800b790:	e000ed04 	.word	0xe000ed04

0800b794 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b794:	b480      	push	{r7}
 800b796:	b085      	sub	sp, #20
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b79c:	4b0e      	ldr	r3, [pc, #56]	; (800b7d8 <prvGetNextExpireTime+0x44>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d101      	bne.n	800b7aa <prvGetNextExpireTime+0x16>
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	e000      	b.n	800b7ac <prvGetNextExpireTime+0x18>
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d105      	bne.n	800b7c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7b8:	4b07      	ldr	r3, [pc, #28]	; (800b7d8 <prvGetNextExpireTime+0x44>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	60fb      	str	r3, [r7, #12]
 800b7c2:	e001      	b.n	800b7c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3714      	adds	r7, #20
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr
 800b7d6:	bf00      	nop
 800b7d8:	20002ab0 	.word	0x20002ab0

0800b7dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b7e4:	f7ff fa7e 	bl	800ace4 <xTaskGetTickCount>
 800b7e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b7ea:	4b0b      	ldr	r3, [pc, #44]	; (800b818 <prvSampleTimeNow+0x3c>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	68fa      	ldr	r2, [r7, #12]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d205      	bcs.n	800b800 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b7f4:	f000 f936 	bl	800ba64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	601a      	str	r2, [r3, #0]
 800b7fe:	e002      	b.n	800b806 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b806:	4a04      	ldr	r2, [pc, #16]	; (800b818 <prvSampleTimeNow+0x3c>)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b80c:	68fb      	ldr	r3, [r7, #12]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	20002ac0 	.word	0x20002ac0

0800b81c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b086      	sub	sp, #24
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
 800b828:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b82a:	2300      	movs	r3, #0
 800b82c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	68ba      	ldr	r2, [r7, #8]
 800b832:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b83a:	68ba      	ldr	r2, [r7, #8]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	429a      	cmp	r2, r3
 800b840:	d812      	bhi.n	800b868 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	1ad2      	subs	r2, r2, r3
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	699b      	ldr	r3, [r3, #24]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d302      	bcc.n	800b856 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b850:	2301      	movs	r3, #1
 800b852:	617b      	str	r3, [r7, #20]
 800b854:	e01b      	b.n	800b88e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b856:	4b10      	ldr	r3, [pc, #64]	; (800b898 <prvInsertTimerInActiveList+0x7c>)
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	3304      	adds	r3, #4
 800b85e:	4619      	mov	r1, r3
 800b860:	4610      	mov	r0, r2
 800b862:	f7fe fa08 	bl	8009c76 <vListInsert>
 800b866:	e012      	b.n	800b88e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d206      	bcs.n	800b87e <prvInsertTimerInActiveList+0x62>
 800b870:	68ba      	ldr	r2, [r7, #8]
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	429a      	cmp	r2, r3
 800b876:	d302      	bcc.n	800b87e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b878:	2301      	movs	r3, #1
 800b87a:	617b      	str	r3, [r7, #20]
 800b87c:	e007      	b.n	800b88e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b87e:	4b07      	ldr	r3, [pc, #28]	; (800b89c <prvInsertTimerInActiveList+0x80>)
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	3304      	adds	r3, #4
 800b886:	4619      	mov	r1, r3
 800b888:	4610      	mov	r0, r2
 800b88a:	f7fe f9f4 	bl	8009c76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b88e:	697b      	ldr	r3, [r7, #20]
}
 800b890:	4618      	mov	r0, r3
 800b892:	3718      	adds	r7, #24
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}
 800b898:	20002ab4 	.word	0x20002ab4
 800b89c:	20002ab0 	.word	0x20002ab0

0800b8a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b08e      	sub	sp, #56	; 0x38
 800b8a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8a6:	e0ca      	b.n	800ba3e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	da18      	bge.n	800b8e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b8ae:	1d3b      	adds	r3, r7, #4
 800b8b0:	3304      	adds	r3, #4
 800b8b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10a      	bne.n	800b8d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8be:	f383 8811 	msr	BASEPRI, r3
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	61fb      	str	r3, [r7, #28]
}
 800b8cc:	bf00      	nop
 800b8ce:	e7fe      	b.n	800b8ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8d6:	6850      	ldr	r0, [r2, #4]
 800b8d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8da:	6892      	ldr	r2, [r2, #8]
 800b8dc:	4611      	mov	r1, r2
 800b8de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	f2c0 80ab 	blt.w	800ba3e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ee:	695b      	ldr	r3, [r3, #20]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d004      	beq.n	800b8fe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7fe f9f5 	bl	8009ce8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b8fe:	463b      	mov	r3, r7
 800b900:	4618      	mov	r0, r3
 800b902:	f7ff ff6b 	bl	800b7dc <prvSampleTimeNow>
 800b906:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2b09      	cmp	r3, #9
 800b90c:	f200 8096 	bhi.w	800ba3c <prvProcessReceivedCommands+0x19c>
 800b910:	a201      	add	r2, pc, #4	; (adr r2, 800b918 <prvProcessReceivedCommands+0x78>)
 800b912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b916:	bf00      	nop
 800b918:	0800b941 	.word	0x0800b941
 800b91c:	0800b941 	.word	0x0800b941
 800b920:	0800b941 	.word	0x0800b941
 800b924:	0800b9b5 	.word	0x0800b9b5
 800b928:	0800b9c9 	.word	0x0800b9c9
 800b92c:	0800ba13 	.word	0x0800ba13
 800b930:	0800b941 	.word	0x0800b941
 800b934:	0800b941 	.word	0x0800b941
 800b938:	0800b9b5 	.word	0x0800b9b5
 800b93c:	0800b9c9 	.word	0x0800b9c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b946:	f043 0301 	orr.w	r3, r3, #1
 800b94a:	b2da      	uxtb	r2, r3
 800b94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b952:	68ba      	ldr	r2, [r7, #8]
 800b954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b956:	699b      	ldr	r3, [r3, #24]
 800b958:	18d1      	adds	r1, r2, r3
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b95e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b960:	f7ff ff5c 	bl	800b81c <prvInsertTimerInActiveList>
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d069      	beq.n	800ba3e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96c:	6a1b      	ldr	r3, [r3, #32]
 800b96e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b970:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b974:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b978:	f003 0304 	and.w	r3, r3, #4
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d05e      	beq.n	800ba3e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b980:	68ba      	ldr	r2, [r7, #8]
 800b982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b984:	699b      	ldr	r3, [r3, #24]
 800b986:	441a      	add	r2, r3
 800b988:	2300      	movs	r3, #0
 800b98a:	9300      	str	r3, [sp, #0]
 800b98c:	2300      	movs	r3, #0
 800b98e:	2100      	movs	r1, #0
 800b990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b992:	f7ff fe05 	bl	800b5a0 <xTimerGenericCommand>
 800b996:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b998:	6a3b      	ldr	r3, [r7, #32]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d14f      	bne.n	800ba3e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a2:	f383 8811 	msr	BASEPRI, r3
 800b9a6:	f3bf 8f6f 	isb	sy
 800b9aa:	f3bf 8f4f 	dsb	sy
 800b9ae:	61bb      	str	r3, [r7, #24]
}
 800b9b0:	bf00      	nop
 800b9b2:	e7fe      	b.n	800b9b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9ba:	f023 0301 	bic.w	r3, r3, #1
 800b9be:	b2da      	uxtb	r2, r3
 800b9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b9c6:	e03a      	b.n	800ba3e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9ce:	f043 0301 	orr.w	r3, r3, #1
 800b9d2:	b2da      	uxtb	r2, r3
 800b9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b9da:	68ba      	ldr	r2, [r7, #8]
 800b9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e2:	699b      	ldr	r3, [r3, #24]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d10a      	bne.n	800b9fe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ec:	f383 8811 	msr	BASEPRI, r3
 800b9f0:	f3bf 8f6f 	isb	sy
 800b9f4:	f3bf 8f4f 	dsb	sy
 800b9f8:	617b      	str	r3, [r7, #20]
}
 800b9fa:	bf00      	nop
 800b9fc:	e7fe      	b.n	800b9fc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba00:	699a      	ldr	r2, [r3, #24]
 800ba02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba04:	18d1      	adds	r1, r2, r3
 800ba06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba0c:	f7ff ff06 	bl	800b81c <prvInsertTimerInActiveList>
					break;
 800ba10:	e015      	b.n	800ba3e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ba12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba18:	f003 0302 	and.w	r3, r3, #2
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d103      	bne.n	800ba28 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ba20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba22:	f000 fbdd 	bl	800c1e0 <vPortFree>
 800ba26:	e00a      	b.n	800ba3e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba2e:	f023 0301 	bic.w	r3, r3, #1
 800ba32:	b2da      	uxtb	r2, r3
 800ba34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ba3a:	e000      	b.n	800ba3e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800ba3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba3e:	4b08      	ldr	r3, [pc, #32]	; (800ba60 <prvProcessReceivedCommands+0x1c0>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	1d39      	adds	r1, r7, #4
 800ba44:	2200      	movs	r2, #0
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7fe fc16 	bl	800a278 <xQueueReceive>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	f47f af2a 	bne.w	800b8a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ba54:	bf00      	nop
 800ba56:	bf00      	nop
 800ba58:	3730      	adds	r7, #48	; 0x30
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	20002ab8 	.word	0x20002ab8

0800ba64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b088      	sub	sp, #32
 800ba68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba6a:	e048      	b.n	800bafe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba6c:	4b2d      	ldr	r3, [pc, #180]	; (800bb24 <prvSwitchTimerLists+0xc0>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba76:	4b2b      	ldr	r3, [pc, #172]	; (800bb24 <prvSwitchTimerLists+0xc0>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	68db      	ldr	r3, [r3, #12]
 800ba7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	3304      	adds	r3, #4
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7fe f92f 	bl	8009ce8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	6a1b      	ldr	r3, [r3, #32]
 800ba8e:	68f8      	ldr	r0, [r7, #12]
 800ba90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba98:	f003 0304 	and.w	r3, r3, #4
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d02e      	beq.n	800bafe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	699b      	ldr	r3, [r3, #24]
 800baa4:	693a      	ldr	r2, [r7, #16]
 800baa6:	4413      	add	r3, r2
 800baa8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800baaa:	68ba      	ldr	r2, [r7, #8]
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d90e      	bls.n	800bad0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	68ba      	ldr	r2, [r7, #8]
 800bab6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	68fa      	ldr	r2, [r7, #12]
 800babc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800babe:	4b19      	ldr	r3, [pc, #100]	; (800bb24 <prvSwitchTimerLists+0xc0>)
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	3304      	adds	r3, #4
 800bac6:	4619      	mov	r1, r3
 800bac8:	4610      	mov	r0, r2
 800baca:	f7fe f8d4 	bl	8009c76 <vListInsert>
 800bace:	e016      	b.n	800bafe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bad0:	2300      	movs	r3, #0
 800bad2:	9300      	str	r3, [sp, #0]
 800bad4:	2300      	movs	r3, #0
 800bad6:	693a      	ldr	r2, [r7, #16]
 800bad8:	2100      	movs	r1, #0
 800bada:	68f8      	ldr	r0, [r7, #12]
 800badc:	f7ff fd60 	bl	800b5a0 <xTimerGenericCommand>
 800bae0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d10a      	bne.n	800bafe <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baec:	f383 8811 	msr	BASEPRI, r3
 800baf0:	f3bf 8f6f 	isb	sy
 800baf4:	f3bf 8f4f 	dsb	sy
 800baf8:	603b      	str	r3, [r7, #0]
}
 800bafa:	bf00      	nop
 800bafc:	e7fe      	b.n	800bafc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bafe:	4b09      	ldr	r3, [pc, #36]	; (800bb24 <prvSwitchTimerLists+0xc0>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d1b1      	bne.n	800ba6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bb08:	4b06      	ldr	r3, [pc, #24]	; (800bb24 <prvSwitchTimerLists+0xc0>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bb0e:	4b06      	ldr	r3, [pc, #24]	; (800bb28 <prvSwitchTimerLists+0xc4>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4a04      	ldr	r2, [pc, #16]	; (800bb24 <prvSwitchTimerLists+0xc0>)
 800bb14:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bb16:	4a04      	ldr	r2, [pc, #16]	; (800bb28 <prvSwitchTimerLists+0xc4>)
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	6013      	str	r3, [r2, #0]
}
 800bb1c:	bf00      	nop
 800bb1e:	3718      	adds	r7, #24
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	20002ab0 	.word	0x20002ab0
 800bb28:	20002ab4 	.word	0x20002ab4

0800bb2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b082      	sub	sp, #8
 800bb30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bb32:	f000 f967 	bl	800be04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bb36:	4b15      	ldr	r3, [pc, #84]	; (800bb8c <prvCheckForValidListAndQueue+0x60>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d120      	bne.n	800bb80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bb3e:	4814      	ldr	r0, [pc, #80]	; (800bb90 <prvCheckForValidListAndQueue+0x64>)
 800bb40:	f7fe f848 	bl	8009bd4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bb44:	4813      	ldr	r0, [pc, #76]	; (800bb94 <prvCheckForValidListAndQueue+0x68>)
 800bb46:	f7fe f845 	bl	8009bd4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bb4a:	4b13      	ldr	r3, [pc, #76]	; (800bb98 <prvCheckForValidListAndQueue+0x6c>)
 800bb4c:	4a10      	ldr	r2, [pc, #64]	; (800bb90 <prvCheckForValidListAndQueue+0x64>)
 800bb4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bb50:	4b12      	ldr	r3, [pc, #72]	; (800bb9c <prvCheckForValidListAndQueue+0x70>)
 800bb52:	4a10      	ldr	r2, [pc, #64]	; (800bb94 <prvCheckForValidListAndQueue+0x68>)
 800bb54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bb56:	2300      	movs	r3, #0
 800bb58:	9300      	str	r3, [sp, #0]
 800bb5a:	4b11      	ldr	r3, [pc, #68]	; (800bba0 <prvCheckForValidListAndQueue+0x74>)
 800bb5c:	4a11      	ldr	r2, [pc, #68]	; (800bba4 <prvCheckForValidListAndQueue+0x78>)
 800bb5e:	2110      	movs	r1, #16
 800bb60:	200a      	movs	r0, #10
 800bb62:	f7fe f953 	bl	8009e0c <xQueueGenericCreateStatic>
 800bb66:	4603      	mov	r3, r0
 800bb68:	4a08      	ldr	r2, [pc, #32]	; (800bb8c <prvCheckForValidListAndQueue+0x60>)
 800bb6a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bb6c:	4b07      	ldr	r3, [pc, #28]	; (800bb8c <prvCheckForValidListAndQueue+0x60>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d005      	beq.n	800bb80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bb74:	4b05      	ldr	r3, [pc, #20]	; (800bb8c <prvCheckForValidListAndQueue+0x60>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	490b      	ldr	r1, [pc, #44]	; (800bba8 <prvCheckForValidListAndQueue+0x7c>)
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7fe fd6c 	bl	800a658 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb80:	f000 f970 	bl	800be64 <vPortExitCritical>
}
 800bb84:	bf00      	nop
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	20002ab8 	.word	0x20002ab8
 800bb90:	20002a88 	.word	0x20002a88
 800bb94:	20002a9c 	.word	0x20002a9c
 800bb98:	20002ab0 	.word	0x20002ab0
 800bb9c:	20002ab4 	.word	0x20002ab4
 800bba0:	20002b64 	.word	0x20002b64
 800bba4:	20002ac4 	.word	0x20002ac4
 800bba8:	0800e448 	.word	0x0800e448

0800bbac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bbac:	b480      	push	{r7}
 800bbae:	b085      	sub	sp, #20
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	3b04      	subs	r3, #4
 800bbbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bbc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	3b04      	subs	r3, #4
 800bbca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	f023 0201 	bic.w	r2, r3, #1
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	3b04      	subs	r3, #4
 800bbda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bbdc:	4a0c      	ldr	r2, [pc, #48]	; (800bc10 <pxPortInitialiseStack+0x64>)
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	3b14      	subs	r3, #20
 800bbe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	3b04      	subs	r3, #4
 800bbf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f06f 0202 	mvn.w	r2, #2
 800bbfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	3b20      	subs	r3, #32
 800bc00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bc02:	68fb      	ldr	r3, [r7, #12]
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3714      	adds	r7, #20
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr
 800bc10:	0800bc15 	.word	0x0800bc15

0800bc14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bc14:	b480      	push	{r7}
 800bc16:	b085      	sub	sp, #20
 800bc18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bc1e:	4b12      	ldr	r3, [pc, #72]	; (800bc68 <prvTaskExitError+0x54>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc26:	d00a      	beq.n	800bc3e <prvTaskExitError+0x2a>
	__asm volatile
 800bc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2c:	f383 8811 	msr	BASEPRI, r3
 800bc30:	f3bf 8f6f 	isb	sy
 800bc34:	f3bf 8f4f 	dsb	sy
 800bc38:	60fb      	str	r3, [r7, #12]
}
 800bc3a:	bf00      	nop
 800bc3c:	e7fe      	b.n	800bc3c <prvTaskExitError+0x28>
	__asm volatile
 800bc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc42:	f383 8811 	msr	BASEPRI, r3
 800bc46:	f3bf 8f6f 	isb	sy
 800bc4a:	f3bf 8f4f 	dsb	sy
 800bc4e:	60bb      	str	r3, [r7, #8]
}
 800bc50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bc52:	bf00      	nop
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d0fc      	beq.n	800bc54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bc5a:	bf00      	nop
 800bc5c:	bf00      	nop
 800bc5e:	3714      	adds	r7, #20
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr
 800bc68:	20000028 	.word	0x20000028
 800bc6c:	00000000 	.word	0x00000000

0800bc70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bc70:	4b07      	ldr	r3, [pc, #28]	; (800bc90 <pxCurrentTCBConst2>)
 800bc72:	6819      	ldr	r1, [r3, #0]
 800bc74:	6808      	ldr	r0, [r1, #0]
 800bc76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc7a:	f380 8809 	msr	PSP, r0
 800bc7e:	f3bf 8f6f 	isb	sy
 800bc82:	f04f 0000 	mov.w	r0, #0
 800bc86:	f380 8811 	msr	BASEPRI, r0
 800bc8a:	4770      	bx	lr
 800bc8c:	f3af 8000 	nop.w

0800bc90 <pxCurrentTCBConst2>:
 800bc90:	20002588 	.word	0x20002588
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bc94:	bf00      	nop
 800bc96:	bf00      	nop

0800bc98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bc98:	4808      	ldr	r0, [pc, #32]	; (800bcbc <prvPortStartFirstTask+0x24>)
 800bc9a:	6800      	ldr	r0, [r0, #0]
 800bc9c:	6800      	ldr	r0, [r0, #0]
 800bc9e:	f380 8808 	msr	MSP, r0
 800bca2:	f04f 0000 	mov.w	r0, #0
 800bca6:	f380 8814 	msr	CONTROL, r0
 800bcaa:	b662      	cpsie	i
 800bcac:	b661      	cpsie	f
 800bcae:	f3bf 8f4f 	dsb	sy
 800bcb2:	f3bf 8f6f 	isb	sy
 800bcb6:	df00      	svc	0
 800bcb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bcba:	bf00      	nop
 800bcbc:	e000ed08 	.word	0xe000ed08

0800bcc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b086      	sub	sp, #24
 800bcc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bcc6:	4b46      	ldr	r3, [pc, #280]	; (800bde0 <xPortStartScheduler+0x120>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4a46      	ldr	r2, [pc, #280]	; (800bde4 <xPortStartScheduler+0x124>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d10a      	bne.n	800bce6 <xPortStartScheduler+0x26>
	__asm volatile
 800bcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd4:	f383 8811 	msr	BASEPRI, r3
 800bcd8:	f3bf 8f6f 	isb	sy
 800bcdc:	f3bf 8f4f 	dsb	sy
 800bce0:	613b      	str	r3, [r7, #16]
}
 800bce2:	bf00      	nop
 800bce4:	e7fe      	b.n	800bce4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bce6:	4b3e      	ldr	r3, [pc, #248]	; (800bde0 <xPortStartScheduler+0x120>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a3f      	ldr	r2, [pc, #252]	; (800bde8 <xPortStartScheduler+0x128>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d10a      	bne.n	800bd06 <xPortStartScheduler+0x46>
	__asm volatile
 800bcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf4:	f383 8811 	msr	BASEPRI, r3
 800bcf8:	f3bf 8f6f 	isb	sy
 800bcfc:	f3bf 8f4f 	dsb	sy
 800bd00:	60fb      	str	r3, [r7, #12]
}
 800bd02:	bf00      	nop
 800bd04:	e7fe      	b.n	800bd04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bd06:	4b39      	ldr	r3, [pc, #228]	; (800bdec <xPortStartScheduler+0x12c>)
 800bd08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	22ff      	movs	r2, #255	; 0xff
 800bd16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bd20:	78fb      	ldrb	r3, [r7, #3]
 800bd22:	b2db      	uxtb	r3, r3
 800bd24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bd28:	b2da      	uxtb	r2, r3
 800bd2a:	4b31      	ldr	r3, [pc, #196]	; (800bdf0 <xPortStartScheduler+0x130>)
 800bd2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bd2e:	4b31      	ldr	r3, [pc, #196]	; (800bdf4 <xPortStartScheduler+0x134>)
 800bd30:	2207      	movs	r2, #7
 800bd32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd34:	e009      	b.n	800bd4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bd36:	4b2f      	ldr	r3, [pc, #188]	; (800bdf4 <xPortStartScheduler+0x134>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	3b01      	subs	r3, #1
 800bd3c:	4a2d      	ldr	r2, [pc, #180]	; (800bdf4 <xPortStartScheduler+0x134>)
 800bd3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd40:	78fb      	ldrb	r3, [r7, #3]
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	005b      	lsls	r3, r3, #1
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd4a:	78fb      	ldrb	r3, [r7, #3]
 800bd4c:	b2db      	uxtb	r3, r3
 800bd4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd52:	2b80      	cmp	r3, #128	; 0x80
 800bd54:	d0ef      	beq.n	800bd36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bd56:	4b27      	ldr	r3, [pc, #156]	; (800bdf4 <xPortStartScheduler+0x134>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f1c3 0307 	rsb	r3, r3, #7
 800bd5e:	2b04      	cmp	r3, #4
 800bd60:	d00a      	beq.n	800bd78 <xPortStartScheduler+0xb8>
	__asm volatile
 800bd62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd66:	f383 8811 	msr	BASEPRI, r3
 800bd6a:	f3bf 8f6f 	isb	sy
 800bd6e:	f3bf 8f4f 	dsb	sy
 800bd72:	60bb      	str	r3, [r7, #8]
}
 800bd74:	bf00      	nop
 800bd76:	e7fe      	b.n	800bd76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bd78:	4b1e      	ldr	r3, [pc, #120]	; (800bdf4 <xPortStartScheduler+0x134>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	021b      	lsls	r3, r3, #8
 800bd7e:	4a1d      	ldr	r2, [pc, #116]	; (800bdf4 <xPortStartScheduler+0x134>)
 800bd80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd82:	4b1c      	ldr	r3, [pc, #112]	; (800bdf4 <xPortStartScheduler+0x134>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd8a:	4a1a      	ldr	r2, [pc, #104]	; (800bdf4 <xPortStartScheduler+0x134>)
 800bd8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	b2da      	uxtb	r2, r3
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bd96:	4b18      	ldr	r3, [pc, #96]	; (800bdf8 <xPortStartScheduler+0x138>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4a17      	ldr	r2, [pc, #92]	; (800bdf8 <xPortStartScheduler+0x138>)
 800bd9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bda0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bda2:	4b15      	ldr	r3, [pc, #84]	; (800bdf8 <xPortStartScheduler+0x138>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4a14      	ldr	r2, [pc, #80]	; (800bdf8 <xPortStartScheduler+0x138>)
 800bda8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bdac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bdae:	f000 f8dd 	bl	800bf6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bdb2:	4b12      	ldr	r3, [pc, #72]	; (800bdfc <xPortStartScheduler+0x13c>)
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bdb8:	f000 f8fc 	bl	800bfb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bdbc:	4b10      	ldr	r3, [pc, #64]	; (800be00 <xPortStartScheduler+0x140>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a0f      	ldr	r2, [pc, #60]	; (800be00 <xPortStartScheduler+0x140>)
 800bdc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bdc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bdc8:	f7ff ff66 	bl	800bc98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bdcc:	f7ff f854 	bl	800ae78 <vTaskSwitchContext>
	prvTaskExitError();
 800bdd0:	f7ff ff20 	bl	800bc14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bdd4:	2300      	movs	r3, #0
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3718      	adds	r7, #24
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	e000ed00 	.word	0xe000ed00
 800bde4:	410fc271 	.word	0x410fc271
 800bde8:	410fc270 	.word	0x410fc270
 800bdec:	e000e400 	.word	0xe000e400
 800bdf0:	20002bb4 	.word	0x20002bb4
 800bdf4:	20002bb8 	.word	0x20002bb8
 800bdf8:	e000ed20 	.word	0xe000ed20
 800bdfc:	20000028 	.word	0x20000028
 800be00:	e000ef34 	.word	0xe000ef34

0800be04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
	__asm volatile
 800be0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0e:	f383 8811 	msr	BASEPRI, r3
 800be12:	f3bf 8f6f 	isb	sy
 800be16:	f3bf 8f4f 	dsb	sy
 800be1a:	607b      	str	r3, [r7, #4]
}
 800be1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800be1e:	4b0f      	ldr	r3, [pc, #60]	; (800be5c <vPortEnterCritical+0x58>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	3301      	adds	r3, #1
 800be24:	4a0d      	ldr	r2, [pc, #52]	; (800be5c <vPortEnterCritical+0x58>)
 800be26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800be28:	4b0c      	ldr	r3, [pc, #48]	; (800be5c <vPortEnterCritical+0x58>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d10f      	bne.n	800be50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800be30:	4b0b      	ldr	r3, [pc, #44]	; (800be60 <vPortEnterCritical+0x5c>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	b2db      	uxtb	r3, r3
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00a      	beq.n	800be50 <vPortEnterCritical+0x4c>
	__asm volatile
 800be3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3e:	f383 8811 	msr	BASEPRI, r3
 800be42:	f3bf 8f6f 	isb	sy
 800be46:	f3bf 8f4f 	dsb	sy
 800be4a:	603b      	str	r3, [r7, #0]
}
 800be4c:	bf00      	nop
 800be4e:	e7fe      	b.n	800be4e <vPortEnterCritical+0x4a>
	}
}
 800be50:	bf00      	nop
 800be52:	370c      	adds	r7, #12
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr
 800be5c:	20000028 	.word	0x20000028
 800be60:	e000ed04 	.word	0xe000ed04

0800be64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be64:	b480      	push	{r7}
 800be66:	b083      	sub	sp, #12
 800be68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be6a:	4b12      	ldr	r3, [pc, #72]	; (800beb4 <vPortExitCritical+0x50>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d10a      	bne.n	800be88 <vPortExitCritical+0x24>
	__asm volatile
 800be72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be76:	f383 8811 	msr	BASEPRI, r3
 800be7a:	f3bf 8f6f 	isb	sy
 800be7e:	f3bf 8f4f 	dsb	sy
 800be82:	607b      	str	r3, [r7, #4]
}
 800be84:	bf00      	nop
 800be86:	e7fe      	b.n	800be86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800be88:	4b0a      	ldr	r3, [pc, #40]	; (800beb4 <vPortExitCritical+0x50>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	3b01      	subs	r3, #1
 800be8e:	4a09      	ldr	r2, [pc, #36]	; (800beb4 <vPortExitCritical+0x50>)
 800be90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800be92:	4b08      	ldr	r3, [pc, #32]	; (800beb4 <vPortExitCritical+0x50>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d105      	bne.n	800bea6 <vPortExitCritical+0x42>
 800be9a:	2300      	movs	r3, #0
 800be9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	f383 8811 	msr	BASEPRI, r3
}
 800bea4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bea6:	bf00      	nop
 800bea8:	370c      	adds	r7, #12
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr
 800beb2:	bf00      	nop
 800beb4:	20000028 	.word	0x20000028
	...

0800bec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bec0:	f3ef 8009 	mrs	r0, PSP
 800bec4:	f3bf 8f6f 	isb	sy
 800bec8:	4b15      	ldr	r3, [pc, #84]	; (800bf20 <pxCurrentTCBConst>)
 800beca:	681a      	ldr	r2, [r3, #0]
 800becc:	f01e 0f10 	tst.w	lr, #16
 800bed0:	bf08      	it	eq
 800bed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beda:	6010      	str	r0, [r2, #0]
 800bedc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bee4:	f380 8811 	msr	BASEPRI, r0
 800bee8:	f3bf 8f4f 	dsb	sy
 800beec:	f3bf 8f6f 	isb	sy
 800bef0:	f7fe ffc2 	bl	800ae78 <vTaskSwitchContext>
 800bef4:	f04f 0000 	mov.w	r0, #0
 800bef8:	f380 8811 	msr	BASEPRI, r0
 800befc:	bc09      	pop	{r0, r3}
 800befe:	6819      	ldr	r1, [r3, #0]
 800bf00:	6808      	ldr	r0, [r1, #0]
 800bf02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf06:	f01e 0f10 	tst.w	lr, #16
 800bf0a:	bf08      	it	eq
 800bf0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bf10:	f380 8809 	msr	PSP, r0
 800bf14:	f3bf 8f6f 	isb	sy
 800bf18:	4770      	bx	lr
 800bf1a:	bf00      	nop
 800bf1c:	f3af 8000 	nop.w

0800bf20 <pxCurrentTCBConst>:
 800bf20:	20002588 	.word	0x20002588
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bf24:	bf00      	nop
 800bf26:	bf00      	nop

0800bf28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
	__asm volatile
 800bf2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf32:	f383 8811 	msr	BASEPRI, r3
 800bf36:	f3bf 8f6f 	isb	sy
 800bf3a:	f3bf 8f4f 	dsb	sy
 800bf3e:	607b      	str	r3, [r7, #4]
}
 800bf40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf42:	f7fe fedf 	bl	800ad04 <xTaskIncrementTick>
 800bf46:	4603      	mov	r3, r0
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d003      	beq.n	800bf54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf4c:	4b06      	ldr	r3, [pc, #24]	; (800bf68 <xPortSysTickHandler+0x40>)
 800bf4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf52:	601a      	str	r2, [r3, #0]
 800bf54:	2300      	movs	r3, #0
 800bf56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	f383 8811 	msr	BASEPRI, r3
}
 800bf5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf60:	bf00      	nop
 800bf62:	3708      	adds	r7, #8
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	e000ed04 	.word	0xe000ed04

0800bf6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf70:	4b0b      	ldr	r3, [pc, #44]	; (800bfa0 <vPortSetupTimerInterrupt+0x34>)
 800bf72:	2200      	movs	r2, #0
 800bf74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bf76:	4b0b      	ldr	r3, [pc, #44]	; (800bfa4 <vPortSetupTimerInterrupt+0x38>)
 800bf78:	2200      	movs	r2, #0
 800bf7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bf7c:	4b0a      	ldr	r3, [pc, #40]	; (800bfa8 <vPortSetupTimerInterrupt+0x3c>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a0a      	ldr	r2, [pc, #40]	; (800bfac <vPortSetupTimerInterrupt+0x40>)
 800bf82:	fba2 2303 	umull	r2, r3, r2, r3
 800bf86:	099b      	lsrs	r3, r3, #6
 800bf88:	4a09      	ldr	r2, [pc, #36]	; (800bfb0 <vPortSetupTimerInterrupt+0x44>)
 800bf8a:	3b01      	subs	r3, #1
 800bf8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bf8e:	4b04      	ldr	r3, [pc, #16]	; (800bfa0 <vPortSetupTimerInterrupt+0x34>)
 800bf90:	2207      	movs	r2, #7
 800bf92:	601a      	str	r2, [r3, #0]
}
 800bf94:	bf00      	nop
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr
 800bf9e:	bf00      	nop
 800bfa0:	e000e010 	.word	0xe000e010
 800bfa4:	e000e018 	.word	0xe000e018
 800bfa8:	20000000 	.word	0x20000000
 800bfac:	10624dd3 	.word	0x10624dd3
 800bfb0:	e000e014 	.word	0xe000e014

0800bfb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bfb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bfc4 <vPortEnableVFP+0x10>
 800bfb8:	6801      	ldr	r1, [r0, #0]
 800bfba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bfbe:	6001      	str	r1, [r0, #0]
 800bfc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bfc2:	bf00      	nop
 800bfc4:	e000ed88 	.word	0xe000ed88

0800bfc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bfc8:	b480      	push	{r7}
 800bfca:	b085      	sub	sp, #20
 800bfcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bfce:	f3ef 8305 	mrs	r3, IPSR
 800bfd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2b0f      	cmp	r3, #15
 800bfd8:	d914      	bls.n	800c004 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bfda:	4a17      	ldr	r2, [pc, #92]	; (800c038 <vPortValidateInterruptPriority+0x70>)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	4413      	add	r3, r2
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bfe4:	4b15      	ldr	r3, [pc, #84]	; (800c03c <vPortValidateInterruptPriority+0x74>)
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	7afa      	ldrb	r2, [r7, #11]
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d20a      	bcs.n	800c004 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff2:	f383 8811 	msr	BASEPRI, r3
 800bff6:	f3bf 8f6f 	isb	sy
 800bffa:	f3bf 8f4f 	dsb	sy
 800bffe:	607b      	str	r3, [r7, #4]
}
 800c000:	bf00      	nop
 800c002:	e7fe      	b.n	800c002 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c004:	4b0e      	ldr	r3, [pc, #56]	; (800c040 <vPortValidateInterruptPriority+0x78>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c00c:	4b0d      	ldr	r3, [pc, #52]	; (800c044 <vPortValidateInterruptPriority+0x7c>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	429a      	cmp	r2, r3
 800c012:	d90a      	bls.n	800c02a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c018:	f383 8811 	msr	BASEPRI, r3
 800c01c:	f3bf 8f6f 	isb	sy
 800c020:	f3bf 8f4f 	dsb	sy
 800c024:	603b      	str	r3, [r7, #0]
}
 800c026:	bf00      	nop
 800c028:	e7fe      	b.n	800c028 <vPortValidateInterruptPriority+0x60>
	}
 800c02a:	bf00      	nop
 800c02c:	3714      	adds	r7, #20
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr
 800c036:	bf00      	nop
 800c038:	e000e3f0 	.word	0xe000e3f0
 800c03c:	20002bb4 	.word	0x20002bb4
 800c040:	e000ed0c 	.word	0xe000ed0c
 800c044:	20002bb8 	.word	0x20002bb8

0800c048 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b08a      	sub	sp, #40	; 0x28
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c050:	2300      	movs	r3, #0
 800c052:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c054:	f7fe fd9a 	bl	800ab8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c058:	4b5b      	ldr	r3, [pc, #364]	; (800c1c8 <pvPortMalloc+0x180>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d101      	bne.n	800c064 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c060:	f000 f920 	bl	800c2a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c064:	4b59      	ldr	r3, [pc, #356]	; (800c1cc <pvPortMalloc+0x184>)
 800c066:	681a      	ldr	r2, [r3, #0]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	4013      	ands	r3, r2
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f040 8093 	bne.w	800c198 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d01d      	beq.n	800c0b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c078:	2208      	movs	r2, #8
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	4413      	add	r3, r2
 800c07e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f003 0307 	and.w	r3, r3, #7
 800c086:	2b00      	cmp	r3, #0
 800c088:	d014      	beq.n	800c0b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f023 0307 	bic.w	r3, r3, #7
 800c090:	3308      	adds	r3, #8
 800c092:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f003 0307 	and.w	r3, r3, #7
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d00a      	beq.n	800c0b4 <pvPortMalloc+0x6c>
	__asm volatile
 800c09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a2:	f383 8811 	msr	BASEPRI, r3
 800c0a6:	f3bf 8f6f 	isb	sy
 800c0aa:	f3bf 8f4f 	dsb	sy
 800c0ae:	617b      	str	r3, [r7, #20]
}
 800c0b0:	bf00      	nop
 800c0b2:	e7fe      	b.n	800c0b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d06e      	beq.n	800c198 <pvPortMalloc+0x150>
 800c0ba:	4b45      	ldr	r3, [pc, #276]	; (800c1d0 <pvPortMalloc+0x188>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d869      	bhi.n	800c198 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c0c4:	4b43      	ldr	r3, [pc, #268]	; (800c1d4 <pvPortMalloc+0x18c>)
 800c0c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c0c8:	4b42      	ldr	r3, [pc, #264]	; (800c1d4 <pvPortMalloc+0x18c>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0ce:	e004      	b.n	800c0da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d903      	bls.n	800c0ec <pvPortMalloc+0xa4>
 800c0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d1f1      	bne.n	800c0d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c0ec:	4b36      	ldr	r3, [pc, #216]	; (800c1c8 <pvPortMalloc+0x180>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d050      	beq.n	800c198 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c0f6:	6a3b      	ldr	r3, [r7, #32]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	2208      	movs	r2, #8
 800c0fc:	4413      	add	r3, r2
 800c0fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c102:	681a      	ldr	r2, [r3, #0]
 800c104:	6a3b      	ldr	r3, [r7, #32]
 800c106:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10a:	685a      	ldr	r2, [r3, #4]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	1ad2      	subs	r2, r2, r3
 800c110:	2308      	movs	r3, #8
 800c112:	005b      	lsls	r3, r3, #1
 800c114:	429a      	cmp	r2, r3
 800c116:	d91f      	bls.n	800c158 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	4413      	add	r3, r2
 800c11e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	f003 0307 	and.w	r3, r3, #7
 800c126:	2b00      	cmp	r3, #0
 800c128:	d00a      	beq.n	800c140 <pvPortMalloc+0xf8>
	__asm volatile
 800c12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12e:	f383 8811 	msr	BASEPRI, r3
 800c132:	f3bf 8f6f 	isb	sy
 800c136:	f3bf 8f4f 	dsb	sy
 800c13a:	613b      	str	r3, [r7, #16]
}
 800c13c:	bf00      	nop
 800c13e:	e7fe      	b.n	800c13e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c142:	685a      	ldr	r2, [r3, #4]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	1ad2      	subs	r2, r2, r3
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c152:	69b8      	ldr	r0, [r7, #24]
 800c154:	f000 f908 	bl	800c368 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c158:	4b1d      	ldr	r3, [pc, #116]	; (800c1d0 <pvPortMalloc+0x188>)
 800c15a:	681a      	ldr	r2, [r3, #0]
 800c15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	1ad3      	subs	r3, r2, r3
 800c162:	4a1b      	ldr	r2, [pc, #108]	; (800c1d0 <pvPortMalloc+0x188>)
 800c164:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c166:	4b1a      	ldr	r3, [pc, #104]	; (800c1d0 <pvPortMalloc+0x188>)
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	4b1b      	ldr	r3, [pc, #108]	; (800c1d8 <pvPortMalloc+0x190>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	429a      	cmp	r2, r3
 800c170:	d203      	bcs.n	800c17a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c172:	4b17      	ldr	r3, [pc, #92]	; (800c1d0 <pvPortMalloc+0x188>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4a18      	ldr	r2, [pc, #96]	; (800c1d8 <pvPortMalloc+0x190>)
 800c178:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17c:	685a      	ldr	r2, [r3, #4]
 800c17e:	4b13      	ldr	r3, [pc, #76]	; (800c1cc <pvPortMalloc+0x184>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	431a      	orrs	r2, r3
 800c184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c186:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18a:	2200      	movs	r2, #0
 800c18c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c18e:	4b13      	ldr	r3, [pc, #76]	; (800c1dc <pvPortMalloc+0x194>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	3301      	adds	r3, #1
 800c194:	4a11      	ldr	r2, [pc, #68]	; (800c1dc <pvPortMalloc+0x194>)
 800c196:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c198:	f7fe fd06 	bl	800aba8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c19c:	69fb      	ldr	r3, [r7, #28]
 800c19e:	f003 0307 	and.w	r3, r3, #7
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d00a      	beq.n	800c1bc <pvPortMalloc+0x174>
	__asm volatile
 800c1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1aa:	f383 8811 	msr	BASEPRI, r3
 800c1ae:	f3bf 8f6f 	isb	sy
 800c1b2:	f3bf 8f4f 	dsb	sy
 800c1b6:	60fb      	str	r3, [r7, #12]
}
 800c1b8:	bf00      	nop
 800c1ba:	e7fe      	b.n	800c1ba <pvPortMalloc+0x172>
	return pvReturn;
 800c1bc:	69fb      	ldr	r3, [r7, #28]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3728      	adds	r7, #40	; 0x28
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	20003f4c 	.word	0x20003f4c
 800c1cc:	20003f60 	.word	0x20003f60
 800c1d0:	20003f50 	.word	0x20003f50
 800c1d4:	20003f44 	.word	0x20003f44
 800c1d8:	20003f54 	.word	0x20003f54
 800c1dc:	20003f58 	.word	0x20003f58

0800c1e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b086      	sub	sp, #24
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d04d      	beq.n	800c28e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c1f2:	2308      	movs	r3, #8
 800c1f4:	425b      	negs	r3, r3
 800c1f6:	697a      	ldr	r2, [r7, #20]
 800c1f8:	4413      	add	r3, r2
 800c1fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	685a      	ldr	r2, [r3, #4]
 800c204:	4b24      	ldr	r3, [pc, #144]	; (800c298 <vPortFree+0xb8>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4013      	ands	r3, r2
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d10a      	bne.n	800c224 <vPortFree+0x44>
	__asm volatile
 800c20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c212:	f383 8811 	msr	BASEPRI, r3
 800c216:	f3bf 8f6f 	isb	sy
 800c21a:	f3bf 8f4f 	dsb	sy
 800c21e:	60fb      	str	r3, [r7, #12]
}
 800c220:	bf00      	nop
 800c222:	e7fe      	b.n	800c222 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d00a      	beq.n	800c242 <vPortFree+0x62>
	__asm volatile
 800c22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c230:	f383 8811 	msr	BASEPRI, r3
 800c234:	f3bf 8f6f 	isb	sy
 800c238:	f3bf 8f4f 	dsb	sy
 800c23c:	60bb      	str	r3, [r7, #8]
}
 800c23e:	bf00      	nop
 800c240:	e7fe      	b.n	800c240 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	685a      	ldr	r2, [r3, #4]
 800c246:	4b14      	ldr	r3, [pc, #80]	; (800c298 <vPortFree+0xb8>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4013      	ands	r3, r2
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d01e      	beq.n	800c28e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d11a      	bne.n	800c28e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	685a      	ldr	r2, [r3, #4]
 800c25c:	4b0e      	ldr	r3, [pc, #56]	; (800c298 <vPortFree+0xb8>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	43db      	mvns	r3, r3
 800c262:	401a      	ands	r2, r3
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c268:	f7fe fc90 	bl	800ab8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	685a      	ldr	r2, [r3, #4]
 800c270:	4b0a      	ldr	r3, [pc, #40]	; (800c29c <vPortFree+0xbc>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4413      	add	r3, r2
 800c276:	4a09      	ldr	r2, [pc, #36]	; (800c29c <vPortFree+0xbc>)
 800c278:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c27a:	6938      	ldr	r0, [r7, #16]
 800c27c:	f000 f874 	bl	800c368 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c280:	4b07      	ldr	r3, [pc, #28]	; (800c2a0 <vPortFree+0xc0>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	3301      	adds	r3, #1
 800c286:	4a06      	ldr	r2, [pc, #24]	; (800c2a0 <vPortFree+0xc0>)
 800c288:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c28a:	f7fe fc8d 	bl	800aba8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c28e:	bf00      	nop
 800c290:	3718      	adds	r7, #24
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	20003f60 	.word	0x20003f60
 800c29c:	20003f50 	.word	0x20003f50
 800c2a0:	20003f5c 	.word	0x20003f5c

0800c2a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c2aa:	f241 3388 	movw	r3, #5000	; 0x1388
 800c2ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c2b0:	4b27      	ldr	r3, [pc, #156]	; (800c350 <prvHeapInit+0xac>)
 800c2b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f003 0307 	and.w	r3, r3, #7
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d00c      	beq.n	800c2d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	3307      	adds	r3, #7
 800c2c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f023 0307 	bic.w	r3, r3, #7
 800c2ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c2cc:	68ba      	ldr	r2, [r7, #8]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	1ad3      	subs	r3, r2, r3
 800c2d2:	4a1f      	ldr	r2, [pc, #124]	; (800c350 <prvHeapInit+0xac>)
 800c2d4:	4413      	add	r3, r2
 800c2d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c2dc:	4a1d      	ldr	r2, [pc, #116]	; (800c354 <prvHeapInit+0xb0>)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c2e2:	4b1c      	ldr	r3, [pc, #112]	; (800c354 <prvHeapInit+0xb0>)
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	68ba      	ldr	r2, [r7, #8]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c2f0:	2208      	movs	r2, #8
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	1a9b      	subs	r3, r3, r2
 800c2f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f023 0307 	bic.w	r3, r3, #7
 800c2fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	4a15      	ldr	r2, [pc, #84]	; (800c358 <prvHeapInit+0xb4>)
 800c304:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c306:	4b14      	ldr	r3, [pc, #80]	; (800c358 <prvHeapInit+0xb4>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	2200      	movs	r2, #0
 800c30c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c30e:	4b12      	ldr	r3, [pc, #72]	; (800c358 <prvHeapInit+0xb4>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	2200      	movs	r2, #0
 800c314:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	68fa      	ldr	r2, [r7, #12]
 800c31e:	1ad2      	subs	r2, r2, r3
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c324:	4b0c      	ldr	r3, [pc, #48]	; (800c358 <prvHeapInit+0xb4>)
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	4a0a      	ldr	r2, [pc, #40]	; (800c35c <prvHeapInit+0xb8>)
 800c332:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	4a09      	ldr	r2, [pc, #36]	; (800c360 <prvHeapInit+0xbc>)
 800c33a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c33c:	4b09      	ldr	r3, [pc, #36]	; (800c364 <prvHeapInit+0xc0>)
 800c33e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c342:	601a      	str	r2, [r3, #0]
}
 800c344:	bf00      	nop
 800c346:	3714      	adds	r7, #20
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr
 800c350:	20002bbc 	.word	0x20002bbc
 800c354:	20003f44 	.word	0x20003f44
 800c358:	20003f4c 	.word	0x20003f4c
 800c35c:	20003f54 	.word	0x20003f54
 800c360:	20003f50 	.word	0x20003f50
 800c364:	20003f60 	.word	0x20003f60

0800c368 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c368:	b480      	push	{r7}
 800c36a:	b085      	sub	sp, #20
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c370:	4b28      	ldr	r3, [pc, #160]	; (800c414 <prvInsertBlockIntoFreeList+0xac>)
 800c372:	60fb      	str	r3, [r7, #12]
 800c374:	e002      	b.n	800c37c <prvInsertBlockIntoFreeList+0x14>
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	60fb      	str	r3, [r7, #12]
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	429a      	cmp	r2, r3
 800c384:	d8f7      	bhi.n	800c376 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	68ba      	ldr	r2, [r7, #8]
 800c390:	4413      	add	r3, r2
 800c392:	687a      	ldr	r2, [r7, #4]
 800c394:	429a      	cmp	r2, r3
 800c396:	d108      	bne.n	800c3aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	685a      	ldr	r2, [r3, #4]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	441a      	add	r2, r3
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	68ba      	ldr	r2, [r7, #8]
 800c3b4:	441a      	add	r2, r3
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d118      	bne.n	800c3f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681a      	ldr	r2, [r3, #0]
 800c3c2:	4b15      	ldr	r3, [pc, #84]	; (800c418 <prvInsertBlockIntoFreeList+0xb0>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d00d      	beq.n	800c3e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	685a      	ldr	r2, [r3, #4]
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	441a      	add	r2, r3
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	601a      	str	r2, [r3, #0]
 800c3e4:	e008      	b.n	800c3f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c3e6:	4b0c      	ldr	r3, [pc, #48]	; (800c418 <prvInsertBlockIntoFreeList+0xb0>)
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	601a      	str	r2, [r3, #0]
 800c3ee:	e003      	b.n	800c3f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c3f8:	68fa      	ldr	r2, [r7, #12]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d002      	beq.n	800c406 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c406:	bf00      	nop
 800c408:	3714      	adds	r7, #20
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop
 800c414:	20003f44 	.word	0x20003f44
 800c418:	20003f4c 	.word	0x20003f4c

0800c41c <std>:
 800c41c:	2300      	movs	r3, #0
 800c41e:	b510      	push	{r4, lr}
 800c420:	4604      	mov	r4, r0
 800c422:	e9c0 3300 	strd	r3, r3, [r0]
 800c426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c42a:	6083      	str	r3, [r0, #8]
 800c42c:	8181      	strh	r1, [r0, #12]
 800c42e:	6643      	str	r3, [r0, #100]	; 0x64
 800c430:	81c2      	strh	r2, [r0, #14]
 800c432:	6183      	str	r3, [r0, #24]
 800c434:	4619      	mov	r1, r3
 800c436:	2208      	movs	r2, #8
 800c438:	305c      	adds	r0, #92	; 0x5c
 800c43a:	f000 fa27 	bl	800c88c <memset>
 800c43e:	4b0d      	ldr	r3, [pc, #52]	; (800c474 <std+0x58>)
 800c440:	6263      	str	r3, [r4, #36]	; 0x24
 800c442:	4b0d      	ldr	r3, [pc, #52]	; (800c478 <std+0x5c>)
 800c444:	62a3      	str	r3, [r4, #40]	; 0x28
 800c446:	4b0d      	ldr	r3, [pc, #52]	; (800c47c <std+0x60>)
 800c448:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c44a:	4b0d      	ldr	r3, [pc, #52]	; (800c480 <std+0x64>)
 800c44c:	6323      	str	r3, [r4, #48]	; 0x30
 800c44e:	4b0d      	ldr	r3, [pc, #52]	; (800c484 <std+0x68>)
 800c450:	6224      	str	r4, [r4, #32]
 800c452:	429c      	cmp	r4, r3
 800c454:	d006      	beq.n	800c464 <std+0x48>
 800c456:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c45a:	4294      	cmp	r4, r2
 800c45c:	d002      	beq.n	800c464 <std+0x48>
 800c45e:	33d0      	adds	r3, #208	; 0xd0
 800c460:	429c      	cmp	r4, r3
 800c462:	d105      	bne.n	800c470 <std+0x54>
 800c464:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c46c:	f000 bb2c 	b.w	800cac8 <__retarget_lock_init_recursive>
 800c470:	bd10      	pop	{r4, pc}
 800c472:	bf00      	nop
 800c474:	0800c6bd 	.word	0x0800c6bd
 800c478:	0800c6df 	.word	0x0800c6df
 800c47c:	0800c717 	.word	0x0800c717
 800c480:	0800c73b 	.word	0x0800c73b
 800c484:	20003f64 	.word	0x20003f64

0800c488 <stdio_exit_handler>:
 800c488:	4a02      	ldr	r2, [pc, #8]	; (800c494 <stdio_exit_handler+0xc>)
 800c48a:	4903      	ldr	r1, [pc, #12]	; (800c498 <stdio_exit_handler+0x10>)
 800c48c:	4803      	ldr	r0, [pc, #12]	; (800c49c <stdio_exit_handler+0x14>)
 800c48e:	f000 b869 	b.w	800c564 <_fwalk_sglue>
 800c492:	bf00      	nop
 800c494:	2000002c 	.word	0x2000002c
 800c498:	0800d68d 	.word	0x0800d68d
 800c49c:	20000038 	.word	0x20000038

0800c4a0 <cleanup_stdio>:
 800c4a0:	6841      	ldr	r1, [r0, #4]
 800c4a2:	4b0c      	ldr	r3, [pc, #48]	; (800c4d4 <cleanup_stdio+0x34>)
 800c4a4:	4299      	cmp	r1, r3
 800c4a6:	b510      	push	{r4, lr}
 800c4a8:	4604      	mov	r4, r0
 800c4aa:	d001      	beq.n	800c4b0 <cleanup_stdio+0x10>
 800c4ac:	f001 f8ee 	bl	800d68c <_fflush_r>
 800c4b0:	68a1      	ldr	r1, [r4, #8]
 800c4b2:	4b09      	ldr	r3, [pc, #36]	; (800c4d8 <cleanup_stdio+0x38>)
 800c4b4:	4299      	cmp	r1, r3
 800c4b6:	d002      	beq.n	800c4be <cleanup_stdio+0x1e>
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	f001 f8e7 	bl	800d68c <_fflush_r>
 800c4be:	68e1      	ldr	r1, [r4, #12]
 800c4c0:	4b06      	ldr	r3, [pc, #24]	; (800c4dc <cleanup_stdio+0x3c>)
 800c4c2:	4299      	cmp	r1, r3
 800c4c4:	d004      	beq.n	800c4d0 <cleanup_stdio+0x30>
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4cc:	f001 b8de 	b.w	800d68c <_fflush_r>
 800c4d0:	bd10      	pop	{r4, pc}
 800c4d2:	bf00      	nop
 800c4d4:	20003f64 	.word	0x20003f64
 800c4d8:	20003fcc 	.word	0x20003fcc
 800c4dc:	20004034 	.word	0x20004034

0800c4e0 <global_stdio_init.part.0>:
 800c4e0:	b510      	push	{r4, lr}
 800c4e2:	4b0b      	ldr	r3, [pc, #44]	; (800c510 <global_stdio_init.part.0+0x30>)
 800c4e4:	4c0b      	ldr	r4, [pc, #44]	; (800c514 <global_stdio_init.part.0+0x34>)
 800c4e6:	4a0c      	ldr	r2, [pc, #48]	; (800c518 <global_stdio_init.part.0+0x38>)
 800c4e8:	601a      	str	r2, [r3, #0]
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	2104      	movs	r1, #4
 800c4f0:	f7ff ff94 	bl	800c41c <std>
 800c4f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	2109      	movs	r1, #9
 800c4fc:	f7ff ff8e 	bl	800c41c <std>
 800c500:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c504:	2202      	movs	r2, #2
 800c506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c50a:	2112      	movs	r1, #18
 800c50c:	f7ff bf86 	b.w	800c41c <std>
 800c510:	2000409c 	.word	0x2000409c
 800c514:	20003f64 	.word	0x20003f64
 800c518:	0800c489 	.word	0x0800c489

0800c51c <__sfp_lock_acquire>:
 800c51c:	4801      	ldr	r0, [pc, #4]	; (800c524 <__sfp_lock_acquire+0x8>)
 800c51e:	f000 bad4 	b.w	800caca <__retarget_lock_acquire_recursive>
 800c522:	bf00      	nop
 800c524:	200040a5 	.word	0x200040a5

0800c528 <__sfp_lock_release>:
 800c528:	4801      	ldr	r0, [pc, #4]	; (800c530 <__sfp_lock_release+0x8>)
 800c52a:	f000 bacf 	b.w	800cacc <__retarget_lock_release_recursive>
 800c52e:	bf00      	nop
 800c530:	200040a5 	.word	0x200040a5

0800c534 <__sinit>:
 800c534:	b510      	push	{r4, lr}
 800c536:	4604      	mov	r4, r0
 800c538:	f7ff fff0 	bl	800c51c <__sfp_lock_acquire>
 800c53c:	6a23      	ldr	r3, [r4, #32]
 800c53e:	b11b      	cbz	r3, 800c548 <__sinit+0x14>
 800c540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c544:	f7ff bff0 	b.w	800c528 <__sfp_lock_release>
 800c548:	4b04      	ldr	r3, [pc, #16]	; (800c55c <__sinit+0x28>)
 800c54a:	6223      	str	r3, [r4, #32]
 800c54c:	4b04      	ldr	r3, [pc, #16]	; (800c560 <__sinit+0x2c>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d1f5      	bne.n	800c540 <__sinit+0xc>
 800c554:	f7ff ffc4 	bl	800c4e0 <global_stdio_init.part.0>
 800c558:	e7f2      	b.n	800c540 <__sinit+0xc>
 800c55a:	bf00      	nop
 800c55c:	0800c4a1 	.word	0x0800c4a1
 800c560:	2000409c 	.word	0x2000409c

0800c564 <_fwalk_sglue>:
 800c564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c568:	4607      	mov	r7, r0
 800c56a:	4688      	mov	r8, r1
 800c56c:	4614      	mov	r4, r2
 800c56e:	2600      	movs	r6, #0
 800c570:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c574:	f1b9 0901 	subs.w	r9, r9, #1
 800c578:	d505      	bpl.n	800c586 <_fwalk_sglue+0x22>
 800c57a:	6824      	ldr	r4, [r4, #0]
 800c57c:	2c00      	cmp	r4, #0
 800c57e:	d1f7      	bne.n	800c570 <_fwalk_sglue+0xc>
 800c580:	4630      	mov	r0, r6
 800c582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c586:	89ab      	ldrh	r3, [r5, #12]
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d907      	bls.n	800c59c <_fwalk_sglue+0x38>
 800c58c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c590:	3301      	adds	r3, #1
 800c592:	d003      	beq.n	800c59c <_fwalk_sglue+0x38>
 800c594:	4629      	mov	r1, r5
 800c596:	4638      	mov	r0, r7
 800c598:	47c0      	blx	r8
 800c59a:	4306      	orrs	r6, r0
 800c59c:	3568      	adds	r5, #104	; 0x68
 800c59e:	e7e9      	b.n	800c574 <_fwalk_sglue+0x10>

0800c5a0 <iprintf>:
 800c5a0:	b40f      	push	{r0, r1, r2, r3}
 800c5a2:	b507      	push	{r0, r1, r2, lr}
 800c5a4:	4906      	ldr	r1, [pc, #24]	; (800c5c0 <iprintf+0x20>)
 800c5a6:	ab04      	add	r3, sp, #16
 800c5a8:	6808      	ldr	r0, [r1, #0]
 800c5aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5ae:	6881      	ldr	r1, [r0, #8]
 800c5b0:	9301      	str	r3, [sp, #4]
 800c5b2:	f000 fd3b 	bl	800d02c <_vfiprintf_r>
 800c5b6:	b003      	add	sp, #12
 800c5b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5bc:	b004      	add	sp, #16
 800c5be:	4770      	bx	lr
 800c5c0:	20000084 	.word	0x20000084

0800c5c4 <_puts_r>:
 800c5c4:	6a03      	ldr	r3, [r0, #32]
 800c5c6:	b570      	push	{r4, r5, r6, lr}
 800c5c8:	6884      	ldr	r4, [r0, #8]
 800c5ca:	4605      	mov	r5, r0
 800c5cc:	460e      	mov	r6, r1
 800c5ce:	b90b      	cbnz	r3, 800c5d4 <_puts_r+0x10>
 800c5d0:	f7ff ffb0 	bl	800c534 <__sinit>
 800c5d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5d6:	07db      	lsls	r3, r3, #31
 800c5d8:	d405      	bmi.n	800c5e6 <_puts_r+0x22>
 800c5da:	89a3      	ldrh	r3, [r4, #12]
 800c5dc:	0598      	lsls	r0, r3, #22
 800c5de:	d402      	bmi.n	800c5e6 <_puts_r+0x22>
 800c5e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5e2:	f000 fa72 	bl	800caca <__retarget_lock_acquire_recursive>
 800c5e6:	89a3      	ldrh	r3, [r4, #12]
 800c5e8:	0719      	lsls	r1, r3, #28
 800c5ea:	d513      	bpl.n	800c614 <_puts_r+0x50>
 800c5ec:	6923      	ldr	r3, [r4, #16]
 800c5ee:	b18b      	cbz	r3, 800c614 <_puts_r+0x50>
 800c5f0:	3e01      	subs	r6, #1
 800c5f2:	68a3      	ldr	r3, [r4, #8]
 800c5f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c5f8:	3b01      	subs	r3, #1
 800c5fa:	60a3      	str	r3, [r4, #8]
 800c5fc:	b9e9      	cbnz	r1, 800c63a <_puts_r+0x76>
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	da2e      	bge.n	800c660 <_puts_r+0x9c>
 800c602:	4622      	mov	r2, r4
 800c604:	210a      	movs	r1, #10
 800c606:	4628      	mov	r0, r5
 800c608:	f000 f89b 	bl	800c742 <__swbuf_r>
 800c60c:	3001      	adds	r0, #1
 800c60e:	d007      	beq.n	800c620 <_puts_r+0x5c>
 800c610:	250a      	movs	r5, #10
 800c612:	e007      	b.n	800c624 <_puts_r+0x60>
 800c614:	4621      	mov	r1, r4
 800c616:	4628      	mov	r0, r5
 800c618:	f000 f8d0 	bl	800c7bc <__swsetup_r>
 800c61c:	2800      	cmp	r0, #0
 800c61e:	d0e7      	beq.n	800c5f0 <_puts_r+0x2c>
 800c620:	f04f 35ff 	mov.w	r5, #4294967295
 800c624:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c626:	07da      	lsls	r2, r3, #31
 800c628:	d405      	bmi.n	800c636 <_puts_r+0x72>
 800c62a:	89a3      	ldrh	r3, [r4, #12]
 800c62c:	059b      	lsls	r3, r3, #22
 800c62e:	d402      	bmi.n	800c636 <_puts_r+0x72>
 800c630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c632:	f000 fa4b 	bl	800cacc <__retarget_lock_release_recursive>
 800c636:	4628      	mov	r0, r5
 800c638:	bd70      	pop	{r4, r5, r6, pc}
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	da04      	bge.n	800c648 <_puts_r+0x84>
 800c63e:	69a2      	ldr	r2, [r4, #24]
 800c640:	429a      	cmp	r2, r3
 800c642:	dc06      	bgt.n	800c652 <_puts_r+0x8e>
 800c644:	290a      	cmp	r1, #10
 800c646:	d004      	beq.n	800c652 <_puts_r+0x8e>
 800c648:	6823      	ldr	r3, [r4, #0]
 800c64a:	1c5a      	adds	r2, r3, #1
 800c64c:	6022      	str	r2, [r4, #0]
 800c64e:	7019      	strb	r1, [r3, #0]
 800c650:	e7cf      	b.n	800c5f2 <_puts_r+0x2e>
 800c652:	4622      	mov	r2, r4
 800c654:	4628      	mov	r0, r5
 800c656:	f000 f874 	bl	800c742 <__swbuf_r>
 800c65a:	3001      	adds	r0, #1
 800c65c:	d1c9      	bne.n	800c5f2 <_puts_r+0x2e>
 800c65e:	e7df      	b.n	800c620 <_puts_r+0x5c>
 800c660:	6823      	ldr	r3, [r4, #0]
 800c662:	250a      	movs	r5, #10
 800c664:	1c5a      	adds	r2, r3, #1
 800c666:	6022      	str	r2, [r4, #0]
 800c668:	701d      	strb	r5, [r3, #0]
 800c66a:	e7db      	b.n	800c624 <_puts_r+0x60>

0800c66c <puts>:
 800c66c:	4b02      	ldr	r3, [pc, #8]	; (800c678 <puts+0xc>)
 800c66e:	4601      	mov	r1, r0
 800c670:	6818      	ldr	r0, [r3, #0]
 800c672:	f7ff bfa7 	b.w	800c5c4 <_puts_r>
 800c676:	bf00      	nop
 800c678:	20000084 	.word	0x20000084

0800c67c <siprintf>:
 800c67c:	b40e      	push	{r1, r2, r3}
 800c67e:	b500      	push	{lr}
 800c680:	b09c      	sub	sp, #112	; 0x70
 800c682:	ab1d      	add	r3, sp, #116	; 0x74
 800c684:	9002      	str	r0, [sp, #8]
 800c686:	9006      	str	r0, [sp, #24]
 800c688:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c68c:	4809      	ldr	r0, [pc, #36]	; (800c6b4 <siprintf+0x38>)
 800c68e:	9107      	str	r1, [sp, #28]
 800c690:	9104      	str	r1, [sp, #16]
 800c692:	4909      	ldr	r1, [pc, #36]	; (800c6b8 <siprintf+0x3c>)
 800c694:	f853 2b04 	ldr.w	r2, [r3], #4
 800c698:	9105      	str	r1, [sp, #20]
 800c69a:	6800      	ldr	r0, [r0, #0]
 800c69c:	9301      	str	r3, [sp, #4]
 800c69e:	a902      	add	r1, sp, #8
 800c6a0:	f000 fb9c 	bl	800cddc <_svfiprintf_r>
 800c6a4:	9b02      	ldr	r3, [sp, #8]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	701a      	strb	r2, [r3, #0]
 800c6aa:	b01c      	add	sp, #112	; 0x70
 800c6ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6b0:	b003      	add	sp, #12
 800c6b2:	4770      	bx	lr
 800c6b4:	20000084 	.word	0x20000084
 800c6b8:	ffff0208 	.word	0xffff0208

0800c6bc <__sread>:
 800c6bc:	b510      	push	{r4, lr}
 800c6be:	460c      	mov	r4, r1
 800c6c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6c4:	f000 f9b2 	bl	800ca2c <_read_r>
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	bfab      	itete	ge
 800c6cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c6ce:	89a3      	ldrhlt	r3, [r4, #12]
 800c6d0:	181b      	addge	r3, r3, r0
 800c6d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c6d6:	bfac      	ite	ge
 800c6d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c6da:	81a3      	strhlt	r3, [r4, #12]
 800c6dc:	bd10      	pop	{r4, pc}

0800c6de <__swrite>:
 800c6de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6e2:	461f      	mov	r7, r3
 800c6e4:	898b      	ldrh	r3, [r1, #12]
 800c6e6:	05db      	lsls	r3, r3, #23
 800c6e8:	4605      	mov	r5, r0
 800c6ea:	460c      	mov	r4, r1
 800c6ec:	4616      	mov	r6, r2
 800c6ee:	d505      	bpl.n	800c6fc <__swrite+0x1e>
 800c6f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6f4:	2302      	movs	r3, #2
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f000 f986 	bl	800ca08 <_lseek_r>
 800c6fc:	89a3      	ldrh	r3, [r4, #12]
 800c6fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c702:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c706:	81a3      	strh	r3, [r4, #12]
 800c708:	4632      	mov	r2, r6
 800c70a:	463b      	mov	r3, r7
 800c70c:	4628      	mov	r0, r5
 800c70e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c712:	f000 b99d 	b.w	800ca50 <_write_r>

0800c716 <__sseek>:
 800c716:	b510      	push	{r4, lr}
 800c718:	460c      	mov	r4, r1
 800c71a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c71e:	f000 f973 	bl	800ca08 <_lseek_r>
 800c722:	1c43      	adds	r3, r0, #1
 800c724:	89a3      	ldrh	r3, [r4, #12]
 800c726:	bf15      	itete	ne
 800c728:	6560      	strne	r0, [r4, #84]	; 0x54
 800c72a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c72e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c732:	81a3      	strheq	r3, [r4, #12]
 800c734:	bf18      	it	ne
 800c736:	81a3      	strhne	r3, [r4, #12]
 800c738:	bd10      	pop	{r4, pc}

0800c73a <__sclose>:
 800c73a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c73e:	f000 b953 	b.w	800c9e8 <_close_r>

0800c742 <__swbuf_r>:
 800c742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c744:	460e      	mov	r6, r1
 800c746:	4614      	mov	r4, r2
 800c748:	4605      	mov	r5, r0
 800c74a:	b118      	cbz	r0, 800c754 <__swbuf_r+0x12>
 800c74c:	6a03      	ldr	r3, [r0, #32]
 800c74e:	b90b      	cbnz	r3, 800c754 <__swbuf_r+0x12>
 800c750:	f7ff fef0 	bl	800c534 <__sinit>
 800c754:	69a3      	ldr	r3, [r4, #24]
 800c756:	60a3      	str	r3, [r4, #8]
 800c758:	89a3      	ldrh	r3, [r4, #12]
 800c75a:	071a      	lsls	r2, r3, #28
 800c75c:	d525      	bpl.n	800c7aa <__swbuf_r+0x68>
 800c75e:	6923      	ldr	r3, [r4, #16]
 800c760:	b31b      	cbz	r3, 800c7aa <__swbuf_r+0x68>
 800c762:	6823      	ldr	r3, [r4, #0]
 800c764:	6922      	ldr	r2, [r4, #16]
 800c766:	1a98      	subs	r0, r3, r2
 800c768:	6963      	ldr	r3, [r4, #20]
 800c76a:	b2f6      	uxtb	r6, r6
 800c76c:	4283      	cmp	r3, r0
 800c76e:	4637      	mov	r7, r6
 800c770:	dc04      	bgt.n	800c77c <__swbuf_r+0x3a>
 800c772:	4621      	mov	r1, r4
 800c774:	4628      	mov	r0, r5
 800c776:	f000 ff89 	bl	800d68c <_fflush_r>
 800c77a:	b9e0      	cbnz	r0, 800c7b6 <__swbuf_r+0x74>
 800c77c:	68a3      	ldr	r3, [r4, #8]
 800c77e:	3b01      	subs	r3, #1
 800c780:	60a3      	str	r3, [r4, #8]
 800c782:	6823      	ldr	r3, [r4, #0]
 800c784:	1c5a      	adds	r2, r3, #1
 800c786:	6022      	str	r2, [r4, #0]
 800c788:	701e      	strb	r6, [r3, #0]
 800c78a:	6962      	ldr	r2, [r4, #20]
 800c78c:	1c43      	adds	r3, r0, #1
 800c78e:	429a      	cmp	r2, r3
 800c790:	d004      	beq.n	800c79c <__swbuf_r+0x5a>
 800c792:	89a3      	ldrh	r3, [r4, #12]
 800c794:	07db      	lsls	r3, r3, #31
 800c796:	d506      	bpl.n	800c7a6 <__swbuf_r+0x64>
 800c798:	2e0a      	cmp	r6, #10
 800c79a:	d104      	bne.n	800c7a6 <__swbuf_r+0x64>
 800c79c:	4621      	mov	r1, r4
 800c79e:	4628      	mov	r0, r5
 800c7a0:	f000 ff74 	bl	800d68c <_fflush_r>
 800c7a4:	b938      	cbnz	r0, 800c7b6 <__swbuf_r+0x74>
 800c7a6:	4638      	mov	r0, r7
 800c7a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7aa:	4621      	mov	r1, r4
 800c7ac:	4628      	mov	r0, r5
 800c7ae:	f000 f805 	bl	800c7bc <__swsetup_r>
 800c7b2:	2800      	cmp	r0, #0
 800c7b4:	d0d5      	beq.n	800c762 <__swbuf_r+0x20>
 800c7b6:	f04f 37ff 	mov.w	r7, #4294967295
 800c7ba:	e7f4      	b.n	800c7a6 <__swbuf_r+0x64>

0800c7bc <__swsetup_r>:
 800c7bc:	b538      	push	{r3, r4, r5, lr}
 800c7be:	4b2a      	ldr	r3, [pc, #168]	; (800c868 <__swsetup_r+0xac>)
 800c7c0:	4605      	mov	r5, r0
 800c7c2:	6818      	ldr	r0, [r3, #0]
 800c7c4:	460c      	mov	r4, r1
 800c7c6:	b118      	cbz	r0, 800c7d0 <__swsetup_r+0x14>
 800c7c8:	6a03      	ldr	r3, [r0, #32]
 800c7ca:	b90b      	cbnz	r3, 800c7d0 <__swsetup_r+0x14>
 800c7cc:	f7ff feb2 	bl	800c534 <__sinit>
 800c7d0:	89a3      	ldrh	r3, [r4, #12]
 800c7d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c7d6:	0718      	lsls	r0, r3, #28
 800c7d8:	d422      	bmi.n	800c820 <__swsetup_r+0x64>
 800c7da:	06d9      	lsls	r1, r3, #27
 800c7dc:	d407      	bmi.n	800c7ee <__swsetup_r+0x32>
 800c7de:	2309      	movs	r3, #9
 800c7e0:	602b      	str	r3, [r5, #0]
 800c7e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c7e6:	81a3      	strh	r3, [r4, #12]
 800c7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ec:	e034      	b.n	800c858 <__swsetup_r+0x9c>
 800c7ee:	0758      	lsls	r0, r3, #29
 800c7f0:	d512      	bpl.n	800c818 <__swsetup_r+0x5c>
 800c7f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7f4:	b141      	cbz	r1, 800c808 <__swsetup_r+0x4c>
 800c7f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7fa:	4299      	cmp	r1, r3
 800c7fc:	d002      	beq.n	800c804 <__swsetup_r+0x48>
 800c7fe:	4628      	mov	r0, r5
 800c800:	f000 f992 	bl	800cb28 <_free_r>
 800c804:	2300      	movs	r3, #0
 800c806:	6363      	str	r3, [r4, #52]	; 0x34
 800c808:	89a3      	ldrh	r3, [r4, #12]
 800c80a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c80e:	81a3      	strh	r3, [r4, #12]
 800c810:	2300      	movs	r3, #0
 800c812:	6063      	str	r3, [r4, #4]
 800c814:	6923      	ldr	r3, [r4, #16]
 800c816:	6023      	str	r3, [r4, #0]
 800c818:	89a3      	ldrh	r3, [r4, #12]
 800c81a:	f043 0308 	orr.w	r3, r3, #8
 800c81e:	81a3      	strh	r3, [r4, #12]
 800c820:	6923      	ldr	r3, [r4, #16]
 800c822:	b94b      	cbnz	r3, 800c838 <__swsetup_r+0x7c>
 800c824:	89a3      	ldrh	r3, [r4, #12]
 800c826:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c82a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c82e:	d003      	beq.n	800c838 <__swsetup_r+0x7c>
 800c830:	4621      	mov	r1, r4
 800c832:	4628      	mov	r0, r5
 800c834:	f000 ff8a 	bl	800d74c <__smakebuf_r>
 800c838:	89a0      	ldrh	r0, [r4, #12]
 800c83a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c83e:	f010 0301 	ands.w	r3, r0, #1
 800c842:	d00a      	beq.n	800c85a <__swsetup_r+0x9e>
 800c844:	2300      	movs	r3, #0
 800c846:	60a3      	str	r3, [r4, #8]
 800c848:	6963      	ldr	r3, [r4, #20]
 800c84a:	425b      	negs	r3, r3
 800c84c:	61a3      	str	r3, [r4, #24]
 800c84e:	6923      	ldr	r3, [r4, #16]
 800c850:	b943      	cbnz	r3, 800c864 <__swsetup_r+0xa8>
 800c852:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c856:	d1c4      	bne.n	800c7e2 <__swsetup_r+0x26>
 800c858:	bd38      	pop	{r3, r4, r5, pc}
 800c85a:	0781      	lsls	r1, r0, #30
 800c85c:	bf58      	it	pl
 800c85e:	6963      	ldrpl	r3, [r4, #20]
 800c860:	60a3      	str	r3, [r4, #8]
 800c862:	e7f4      	b.n	800c84e <__swsetup_r+0x92>
 800c864:	2000      	movs	r0, #0
 800c866:	e7f7      	b.n	800c858 <__swsetup_r+0x9c>
 800c868:	20000084 	.word	0x20000084

0800c86c <memcmp>:
 800c86c:	b510      	push	{r4, lr}
 800c86e:	3901      	subs	r1, #1
 800c870:	4402      	add	r2, r0
 800c872:	4290      	cmp	r0, r2
 800c874:	d101      	bne.n	800c87a <memcmp+0xe>
 800c876:	2000      	movs	r0, #0
 800c878:	e005      	b.n	800c886 <memcmp+0x1a>
 800c87a:	7803      	ldrb	r3, [r0, #0]
 800c87c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c880:	42a3      	cmp	r3, r4
 800c882:	d001      	beq.n	800c888 <memcmp+0x1c>
 800c884:	1b18      	subs	r0, r3, r4
 800c886:	bd10      	pop	{r4, pc}
 800c888:	3001      	adds	r0, #1
 800c88a:	e7f2      	b.n	800c872 <memcmp+0x6>

0800c88c <memset>:
 800c88c:	4402      	add	r2, r0
 800c88e:	4603      	mov	r3, r0
 800c890:	4293      	cmp	r3, r2
 800c892:	d100      	bne.n	800c896 <memset+0xa>
 800c894:	4770      	bx	lr
 800c896:	f803 1b01 	strb.w	r1, [r3], #1
 800c89a:	e7f9      	b.n	800c890 <memset+0x4>

0800c89c <strcat>:
 800c89c:	b510      	push	{r4, lr}
 800c89e:	4602      	mov	r2, r0
 800c8a0:	7814      	ldrb	r4, [r2, #0]
 800c8a2:	4613      	mov	r3, r2
 800c8a4:	3201      	adds	r2, #1
 800c8a6:	2c00      	cmp	r4, #0
 800c8a8:	d1fa      	bne.n	800c8a0 <strcat+0x4>
 800c8aa:	3b01      	subs	r3, #1
 800c8ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8b4:	2a00      	cmp	r2, #0
 800c8b6:	d1f9      	bne.n	800c8ac <strcat+0x10>
 800c8b8:	bd10      	pop	{r4, pc}

0800c8ba <strncmp>:
 800c8ba:	b510      	push	{r4, lr}
 800c8bc:	b16a      	cbz	r2, 800c8da <strncmp+0x20>
 800c8be:	3901      	subs	r1, #1
 800c8c0:	1884      	adds	r4, r0, r2
 800c8c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8c6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d103      	bne.n	800c8d6 <strncmp+0x1c>
 800c8ce:	42a0      	cmp	r0, r4
 800c8d0:	d001      	beq.n	800c8d6 <strncmp+0x1c>
 800c8d2:	2a00      	cmp	r2, #0
 800c8d4:	d1f5      	bne.n	800c8c2 <strncmp+0x8>
 800c8d6:	1ad0      	subs	r0, r2, r3
 800c8d8:	bd10      	pop	{r4, pc}
 800c8da:	4610      	mov	r0, r2
 800c8dc:	e7fc      	b.n	800c8d8 <strncmp+0x1e>

0800c8de <strncpy>:
 800c8de:	b510      	push	{r4, lr}
 800c8e0:	3901      	subs	r1, #1
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	b132      	cbz	r2, 800c8f4 <strncpy+0x16>
 800c8e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c8ea:	f803 4b01 	strb.w	r4, [r3], #1
 800c8ee:	3a01      	subs	r2, #1
 800c8f0:	2c00      	cmp	r4, #0
 800c8f2:	d1f7      	bne.n	800c8e4 <strncpy+0x6>
 800c8f4:	441a      	add	r2, r3
 800c8f6:	2100      	movs	r1, #0
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d100      	bne.n	800c8fe <strncpy+0x20>
 800c8fc:	bd10      	pop	{r4, pc}
 800c8fe:	f803 1b01 	strb.w	r1, [r3], #1
 800c902:	e7f9      	b.n	800c8f8 <strncpy+0x1a>

0800c904 <strtok>:
 800c904:	4b16      	ldr	r3, [pc, #88]	; (800c960 <strtok+0x5c>)
 800c906:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c908:	681e      	ldr	r6, [r3, #0]
 800c90a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800c90c:	4605      	mov	r5, r0
 800c90e:	b9fc      	cbnz	r4, 800c950 <strtok+0x4c>
 800c910:	2050      	movs	r0, #80	; 0x50
 800c912:	9101      	str	r1, [sp, #4]
 800c914:	f000 f954 	bl	800cbc0 <malloc>
 800c918:	9901      	ldr	r1, [sp, #4]
 800c91a:	6470      	str	r0, [r6, #68]	; 0x44
 800c91c:	4602      	mov	r2, r0
 800c91e:	b920      	cbnz	r0, 800c92a <strtok+0x26>
 800c920:	4b10      	ldr	r3, [pc, #64]	; (800c964 <strtok+0x60>)
 800c922:	4811      	ldr	r0, [pc, #68]	; (800c968 <strtok+0x64>)
 800c924:	215b      	movs	r1, #91	; 0x5b
 800c926:	f000 f8e1 	bl	800caec <__assert_func>
 800c92a:	e9c0 4400 	strd	r4, r4, [r0]
 800c92e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c932:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c936:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c93a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c93e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c942:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c946:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c94a:	6184      	str	r4, [r0, #24]
 800c94c:	7704      	strb	r4, [r0, #28]
 800c94e:	6244      	str	r4, [r0, #36]	; 0x24
 800c950:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800c952:	2301      	movs	r3, #1
 800c954:	4628      	mov	r0, r5
 800c956:	b002      	add	sp, #8
 800c958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c95c:	f000 b806 	b.w	800c96c <__strtok_r>
 800c960:	20000084 	.word	0x20000084
 800c964:	0800e4e0 	.word	0x0800e4e0
 800c968:	0800e4f7 	.word	0x0800e4f7

0800c96c <__strtok_r>:
 800c96c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c96e:	b908      	cbnz	r0, 800c974 <__strtok_r+0x8>
 800c970:	6810      	ldr	r0, [r2, #0]
 800c972:	b188      	cbz	r0, 800c998 <__strtok_r+0x2c>
 800c974:	4604      	mov	r4, r0
 800c976:	4620      	mov	r0, r4
 800c978:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c97c:	460f      	mov	r7, r1
 800c97e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c982:	b91e      	cbnz	r6, 800c98c <__strtok_r+0x20>
 800c984:	b965      	cbnz	r5, 800c9a0 <__strtok_r+0x34>
 800c986:	6015      	str	r5, [r2, #0]
 800c988:	4628      	mov	r0, r5
 800c98a:	e005      	b.n	800c998 <__strtok_r+0x2c>
 800c98c:	42b5      	cmp	r5, r6
 800c98e:	d1f6      	bne.n	800c97e <__strtok_r+0x12>
 800c990:	2b00      	cmp	r3, #0
 800c992:	d1f0      	bne.n	800c976 <__strtok_r+0xa>
 800c994:	6014      	str	r4, [r2, #0]
 800c996:	7003      	strb	r3, [r0, #0]
 800c998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c99a:	461c      	mov	r4, r3
 800c99c:	e00c      	b.n	800c9b8 <__strtok_r+0x4c>
 800c99e:	b915      	cbnz	r5, 800c9a6 <__strtok_r+0x3a>
 800c9a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c9a4:	460e      	mov	r6, r1
 800c9a6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c9aa:	42ab      	cmp	r3, r5
 800c9ac:	d1f7      	bne.n	800c99e <__strtok_r+0x32>
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d0f3      	beq.n	800c99a <__strtok_r+0x2e>
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c9b8:	6014      	str	r4, [r2, #0]
 800c9ba:	e7ed      	b.n	800c998 <__strtok_r+0x2c>

0800c9bc <strstr>:
 800c9bc:	780a      	ldrb	r2, [r1, #0]
 800c9be:	b570      	push	{r4, r5, r6, lr}
 800c9c0:	b96a      	cbnz	r2, 800c9de <strstr+0x22>
 800c9c2:	bd70      	pop	{r4, r5, r6, pc}
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d109      	bne.n	800c9dc <strstr+0x20>
 800c9c8:	460c      	mov	r4, r1
 800c9ca:	4605      	mov	r5, r0
 800c9cc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d0f6      	beq.n	800c9c2 <strstr+0x6>
 800c9d4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c9d8:	429e      	cmp	r6, r3
 800c9da:	d0f7      	beq.n	800c9cc <strstr+0x10>
 800c9dc:	3001      	adds	r0, #1
 800c9de:	7803      	ldrb	r3, [r0, #0]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d1ef      	bne.n	800c9c4 <strstr+0x8>
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	e7ec      	b.n	800c9c2 <strstr+0x6>

0800c9e8 <_close_r>:
 800c9e8:	b538      	push	{r3, r4, r5, lr}
 800c9ea:	4d06      	ldr	r5, [pc, #24]	; (800ca04 <_close_r+0x1c>)
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	4604      	mov	r4, r0
 800c9f0:	4608      	mov	r0, r1
 800c9f2:	602b      	str	r3, [r5, #0]
 800c9f4:	f7f5 f924 	bl	8001c40 <_close>
 800c9f8:	1c43      	adds	r3, r0, #1
 800c9fa:	d102      	bne.n	800ca02 <_close_r+0x1a>
 800c9fc:	682b      	ldr	r3, [r5, #0]
 800c9fe:	b103      	cbz	r3, 800ca02 <_close_r+0x1a>
 800ca00:	6023      	str	r3, [r4, #0]
 800ca02:	bd38      	pop	{r3, r4, r5, pc}
 800ca04:	200040a0 	.word	0x200040a0

0800ca08 <_lseek_r>:
 800ca08:	b538      	push	{r3, r4, r5, lr}
 800ca0a:	4d07      	ldr	r5, [pc, #28]	; (800ca28 <_lseek_r+0x20>)
 800ca0c:	4604      	mov	r4, r0
 800ca0e:	4608      	mov	r0, r1
 800ca10:	4611      	mov	r1, r2
 800ca12:	2200      	movs	r2, #0
 800ca14:	602a      	str	r2, [r5, #0]
 800ca16:	461a      	mov	r2, r3
 800ca18:	f7f5 f939 	bl	8001c8e <_lseek>
 800ca1c:	1c43      	adds	r3, r0, #1
 800ca1e:	d102      	bne.n	800ca26 <_lseek_r+0x1e>
 800ca20:	682b      	ldr	r3, [r5, #0]
 800ca22:	b103      	cbz	r3, 800ca26 <_lseek_r+0x1e>
 800ca24:	6023      	str	r3, [r4, #0]
 800ca26:	bd38      	pop	{r3, r4, r5, pc}
 800ca28:	200040a0 	.word	0x200040a0

0800ca2c <_read_r>:
 800ca2c:	b538      	push	{r3, r4, r5, lr}
 800ca2e:	4d07      	ldr	r5, [pc, #28]	; (800ca4c <_read_r+0x20>)
 800ca30:	4604      	mov	r4, r0
 800ca32:	4608      	mov	r0, r1
 800ca34:	4611      	mov	r1, r2
 800ca36:	2200      	movs	r2, #0
 800ca38:	602a      	str	r2, [r5, #0]
 800ca3a:	461a      	mov	r2, r3
 800ca3c:	f7f5 f8e3 	bl	8001c06 <_read>
 800ca40:	1c43      	adds	r3, r0, #1
 800ca42:	d102      	bne.n	800ca4a <_read_r+0x1e>
 800ca44:	682b      	ldr	r3, [r5, #0]
 800ca46:	b103      	cbz	r3, 800ca4a <_read_r+0x1e>
 800ca48:	6023      	str	r3, [r4, #0]
 800ca4a:	bd38      	pop	{r3, r4, r5, pc}
 800ca4c:	200040a0 	.word	0x200040a0

0800ca50 <_write_r>:
 800ca50:	b538      	push	{r3, r4, r5, lr}
 800ca52:	4d07      	ldr	r5, [pc, #28]	; (800ca70 <_write_r+0x20>)
 800ca54:	4604      	mov	r4, r0
 800ca56:	4608      	mov	r0, r1
 800ca58:	4611      	mov	r1, r2
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	602a      	str	r2, [r5, #0]
 800ca5e:	461a      	mov	r2, r3
 800ca60:	f7f3 fdb3 	bl	80005ca <_write>
 800ca64:	1c43      	adds	r3, r0, #1
 800ca66:	d102      	bne.n	800ca6e <_write_r+0x1e>
 800ca68:	682b      	ldr	r3, [r5, #0]
 800ca6a:	b103      	cbz	r3, 800ca6e <_write_r+0x1e>
 800ca6c:	6023      	str	r3, [r4, #0]
 800ca6e:	bd38      	pop	{r3, r4, r5, pc}
 800ca70:	200040a0 	.word	0x200040a0

0800ca74 <__errno>:
 800ca74:	4b01      	ldr	r3, [pc, #4]	; (800ca7c <__errno+0x8>)
 800ca76:	6818      	ldr	r0, [r3, #0]
 800ca78:	4770      	bx	lr
 800ca7a:	bf00      	nop
 800ca7c:	20000084 	.word	0x20000084

0800ca80 <__libc_init_array>:
 800ca80:	b570      	push	{r4, r5, r6, lr}
 800ca82:	4d0d      	ldr	r5, [pc, #52]	; (800cab8 <__libc_init_array+0x38>)
 800ca84:	4c0d      	ldr	r4, [pc, #52]	; (800cabc <__libc_init_array+0x3c>)
 800ca86:	1b64      	subs	r4, r4, r5
 800ca88:	10a4      	asrs	r4, r4, #2
 800ca8a:	2600      	movs	r6, #0
 800ca8c:	42a6      	cmp	r6, r4
 800ca8e:	d109      	bne.n	800caa4 <__libc_init_array+0x24>
 800ca90:	4d0b      	ldr	r5, [pc, #44]	; (800cac0 <__libc_init_array+0x40>)
 800ca92:	4c0c      	ldr	r4, [pc, #48]	; (800cac4 <__libc_init_array+0x44>)
 800ca94:	f000 ff64 	bl	800d960 <_init>
 800ca98:	1b64      	subs	r4, r4, r5
 800ca9a:	10a4      	asrs	r4, r4, #2
 800ca9c:	2600      	movs	r6, #0
 800ca9e:	42a6      	cmp	r6, r4
 800caa0:	d105      	bne.n	800caae <__libc_init_array+0x2e>
 800caa2:	bd70      	pop	{r4, r5, r6, pc}
 800caa4:	f855 3b04 	ldr.w	r3, [r5], #4
 800caa8:	4798      	blx	r3
 800caaa:	3601      	adds	r6, #1
 800caac:	e7ee      	b.n	800ca8c <__libc_init_array+0xc>
 800caae:	f855 3b04 	ldr.w	r3, [r5], #4
 800cab2:	4798      	blx	r3
 800cab4:	3601      	adds	r6, #1
 800cab6:	e7f2      	b.n	800ca9e <__libc_init_array+0x1e>
 800cab8:	0800e5c8 	.word	0x0800e5c8
 800cabc:	0800e5c8 	.word	0x0800e5c8
 800cac0:	0800e5c8 	.word	0x0800e5c8
 800cac4:	0800e5cc 	.word	0x0800e5cc

0800cac8 <__retarget_lock_init_recursive>:
 800cac8:	4770      	bx	lr

0800caca <__retarget_lock_acquire_recursive>:
 800caca:	4770      	bx	lr

0800cacc <__retarget_lock_release_recursive>:
 800cacc:	4770      	bx	lr

0800cace <memcpy>:
 800cace:	440a      	add	r2, r1
 800cad0:	4291      	cmp	r1, r2
 800cad2:	f100 33ff 	add.w	r3, r0, #4294967295
 800cad6:	d100      	bne.n	800cada <memcpy+0xc>
 800cad8:	4770      	bx	lr
 800cada:	b510      	push	{r4, lr}
 800cadc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cae0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cae4:	4291      	cmp	r1, r2
 800cae6:	d1f9      	bne.n	800cadc <memcpy+0xe>
 800cae8:	bd10      	pop	{r4, pc}
	...

0800caec <__assert_func>:
 800caec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800caee:	4614      	mov	r4, r2
 800caf0:	461a      	mov	r2, r3
 800caf2:	4b09      	ldr	r3, [pc, #36]	; (800cb18 <__assert_func+0x2c>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4605      	mov	r5, r0
 800caf8:	68d8      	ldr	r0, [r3, #12]
 800cafa:	b14c      	cbz	r4, 800cb10 <__assert_func+0x24>
 800cafc:	4b07      	ldr	r3, [pc, #28]	; (800cb1c <__assert_func+0x30>)
 800cafe:	9100      	str	r1, [sp, #0]
 800cb00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb04:	4906      	ldr	r1, [pc, #24]	; (800cb20 <__assert_func+0x34>)
 800cb06:	462b      	mov	r3, r5
 800cb08:	f000 fde8 	bl	800d6dc <fiprintf>
 800cb0c:	f000 fea6 	bl	800d85c <abort>
 800cb10:	4b04      	ldr	r3, [pc, #16]	; (800cb24 <__assert_func+0x38>)
 800cb12:	461c      	mov	r4, r3
 800cb14:	e7f3      	b.n	800cafe <__assert_func+0x12>
 800cb16:	bf00      	nop
 800cb18:	20000084 	.word	0x20000084
 800cb1c:	0800e551 	.word	0x0800e551
 800cb20:	0800e55e 	.word	0x0800e55e
 800cb24:	0800e58c 	.word	0x0800e58c

0800cb28 <_free_r>:
 800cb28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb2a:	2900      	cmp	r1, #0
 800cb2c:	d044      	beq.n	800cbb8 <_free_r+0x90>
 800cb2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb32:	9001      	str	r0, [sp, #4]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	f1a1 0404 	sub.w	r4, r1, #4
 800cb3a:	bfb8      	it	lt
 800cb3c:	18e4      	addlt	r4, r4, r3
 800cb3e:	f000 f8e7 	bl	800cd10 <__malloc_lock>
 800cb42:	4a1e      	ldr	r2, [pc, #120]	; (800cbbc <_free_r+0x94>)
 800cb44:	9801      	ldr	r0, [sp, #4]
 800cb46:	6813      	ldr	r3, [r2, #0]
 800cb48:	b933      	cbnz	r3, 800cb58 <_free_r+0x30>
 800cb4a:	6063      	str	r3, [r4, #4]
 800cb4c:	6014      	str	r4, [r2, #0]
 800cb4e:	b003      	add	sp, #12
 800cb50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb54:	f000 b8e2 	b.w	800cd1c <__malloc_unlock>
 800cb58:	42a3      	cmp	r3, r4
 800cb5a:	d908      	bls.n	800cb6e <_free_r+0x46>
 800cb5c:	6825      	ldr	r5, [r4, #0]
 800cb5e:	1961      	adds	r1, r4, r5
 800cb60:	428b      	cmp	r3, r1
 800cb62:	bf01      	itttt	eq
 800cb64:	6819      	ldreq	r1, [r3, #0]
 800cb66:	685b      	ldreq	r3, [r3, #4]
 800cb68:	1949      	addeq	r1, r1, r5
 800cb6a:	6021      	streq	r1, [r4, #0]
 800cb6c:	e7ed      	b.n	800cb4a <_free_r+0x22>
 800cb6e:	461a      	mov	r2, r3
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	b10b      	cbz	r3, 800cb78 <_free_r+0x50>
 800cb74:	42a3      	cmp	r3, r4
 800cb76:	d9fa      	bls.n	800cb6e <_free_r+0x46>
 800cb78:	6811      	ldr	r1, [r2, #0]
 800cb7a:	1855      	adds	r5, r2, r1
 800cb7c:	42a5      	cmp	r5, r4
 800cb7e:	d10b      	bne.n	800cb98 <_free_r+0x70>
 800cb80:	6824      	ldr	r4, [r4, #0]
 800cb82:	4421      	add	r1, r4
 800cb84:	1854      	adds	r4, r2, r1
 800cb86:	42a3      	cmp	r3, r4
 800cb88:	6011      	str	r1, [r2, #0]
 800cb8a:	d1e0      	bne.n	800cb4e <_free_r+0x26>
 800cb8c:	681c      	ldr	r4, [r3, #0]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	6053      	str	r3, [r2, #4]
 800cb92:	440c      	add	r4, r1
 800cb94:	6014      	str	r4, [r2, #0]
 800cb96:	e7da      	b.n	800cb4e <_free_r+0x26>
 800cb98:	d902      	bls.n	800cba0 <_free_r+0x78>
 800cb9a:	230c      	movs	r3, #12
 800cb9c:	6003      	str	r3, [r0, #0]
 800cb9e:	e7d6      	b.n	800cb4e <_free_r+0x26>
 800cba0:	6825      	ldr	r5, [r4, #0]
 800cba2:	1961      	adds	r1, r4, r5
 800cba4:	428b      	cmp	r3, r1
 800cba6:	bf04      	itt	eq
 800cba8:	6819      	ldreq	r1, [r3, #0]
 800cbaa:	685b      	ldreq	r3, [r3, #4]
 800cbac:	6063      	str	r3, [r4, #4]
 800cbae:	bf04      	itt	eq
 800cbb0:	1949      	addeq	r1, r1, r5
 800cbb2:	6021      	streq	r1, [r4, #0]
 800cbb4:	6054      	str	r4, [r2, #4]
 800cbb6:	e7ca      	b.n	800cb4e <_free_r+0x26>
 800cbb8:	b003      	add	sp, #12
 800cbba:	bd30      	pop	{r4, r5, pc}
 800cbbc:	200040a8 	.word	0x200040a8

0800cbc0 <malloc>:
 800cbc0:	4b02      	ldr	r3, [pc, #8]	; (800cbcc <malloc+0xc>)
 800cbc2:	4601      	mov	r1, r0
 800cbc4:	6818      	ldr	r0, [r3, #0]
 800cbc6:	f000 b823 	b.w	800cc10 <_malloc_r>
 800cbca:	bf00      	nop
 800cbcc:	20000084 	.word	0x20000084

0800cbd0 <sbrk_aligned>:
 800cbd0:	b570      	push	{r4, r5, r6, lr}
 800cbd2:	4e0e      	ldr	r6, [pc, #56]	; (800cc0c <sbrk_aligned+0x3c>)
 800cbd4:	460c      	mov	r4, r1
 800cbd6:	6831      	ldr	r1, [r6, #0]
 800cbd8:	4605      	mov	r5, r0
 800cbda:	b911      	cbnz	r1, 800cbe2 <sbrk_aligned+0x12>
 800cbdc:	f000 fe2e 	bl	800d83c <_sbrk_r>
 800cbe0:	6030      	str	r0, [r6, #0]
 800cbe2:	4621      	mov	r1, r4
 800cbe4:	4628      	mov	r0, r5
 800cbe6:	f000 fe29 	bl	800d83c <_sbrk_r>
 800cbea:	1c43      	adds	r3, r0, #1
 800cbec:	d00a      	beq.n	800cc04 <sbrk_aligned+0x34>
 800cbee:	1cc4      	adds	r4, r0, #3
 800cbf0:	f024 0403 	bic.w	r4, r4, #3
 800cbf4:	42a0      	cmp	r0, r4
 800cbf6:	d007      	beq.n	800cc08 <sbrk_aligned+0x38>
 800cbf8:	1a21      	subs	r1, r4, r0
 800cbfa:	4628      	mov	r0, r5
 800cbfc:	f000 fe1e 	bl	800d83c <_sbrk_r>
 800cc00:	3001      	adds	r0, #1
 800cc02:	d101      	bne.n	800cc08 <sbrk_aligned+0x38>
 800cc04:	f04f 34ff 	mov.w	r4, #4294967295
 800cc08:	4620      	mov	r0, r4
 800cc0a:	bd70      	pop	{r4, r5, r6, pc}
 800cc0c:	200040ac 	.word	0x200040ac

0800cc10 <_malloc_r>:
 800cc10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc14:	1ccd      	adds	r5, r1, #3
 800cc16:	f025 0503 	bic.w	r5, r5, #3
 800cc1a:	3508      	adds	r5, #8
 800cc1c:	2d0c      	cmp	r5, #12
 800cc1e:	bf38      	it	cc
 800cc20:	250c      	movcc	r5, #12
 800cc22:	2d00      	cmp	r5, #0
 800cc24:	4607      	mov	r7, r0
 800cc26:	db01      	blt.n	800cc2c <_malloc_r+0x1c>
 800cc28:	42a9      	cmp	r1, r5
 800cc2a:	d905      	bls.n	800cc38 <_malloc_r+0x28>
 800cc2c:	230c      	movs	r3, #12
 800cc2e:	603b      	str	r3, [r7, #0]
 800cc30:	2600      	movs	r6, #0
 800cc32:	4630      	mov	r0, r6
 800cc34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cd0c <_malloc_r+0xfc>
 800cc3c:	f000 f868 	bl	800cd10 <__malloc_lock>
 800cc40:	f8d8 3000 	ldr.w	r3, [r8]
 800cc44:	461c      	mov	r4, r3
 800cc46:	bb5c      	cbnz	r4, 800cca0 <_malloc_r+0x90>
 800cc48:	4629      	mov	r1, r5
 800cc4a:	4638      	mov	r0, r7
 800cc4c:	f7ff ffc0 	bl	800cbd0 <sbrk_aligned>
 800cc50:	1c43      	adds	r3, r0, #1
 800cc52:	4604      	mov	r4, r0
 800cc54:	d155      	bne.n	800cd02 <_malloc_r+0xf2>
 800cc56:	f8d8 4000 	ldr.w	r4, [r8]
 800cc5a:	4626      	mov	r6, r4
 800cc5c:	2e00      	cmp	r6, #0
 800cc5e:	d145      	bne.n	800ccec <_malloc_r+0xdc>
 800cc60:	2c00      	cmp	r4, #0
 800cc62:	d048      	beq.n	800ccf6 <_malloc_r+0xe6>
 800cc64:	6823      	ldr	r3, [r4, #0]
 800cc66:	4631      	mov	r1, r6
 800cc68:	4638      	mov	r0, r7
 800cc6a:	eb04 0903 	add.w	r9, r4, r3
 800cc6e:	f000 fde5 	bl	800d83c <_sbrk_r>
 800cc72:	4581      	cmp	r9, r0
 800cc74:	d13f      	bne.n	800ccf6 <_malloc_r+0xe6>
 800cc76:	6821      	ldr	r1, [r4, #0]
 800cc78:	1a6d      	subs	r5, r5, r1
 800cc7a:	4629      	mov	r1, r5
 800cc7c:	4638      	mov	r0, r7
 800cc7e:	f7ff ffa7 	bl	800cbd0 <sbrk_aligned>
 800cc82:	3001      	adds	r0, #1
 800cc84:	d037      	beq.n	800ccf6 <_malloc_r+0xe6>
 800cc86:	6823      	ldr	r3, [r4, #0]
 800cc88:	442b      	add	r3, r5
 800cc8a:	6023      	str	r3, [r4, #0]
 800cc8c:	f8d8 3000 	ldr.w	r3, [r8]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d038      	beq.n	800cd06 <_malloc_r+0xf6>
 800cc94:	685a      	ldr	r2, [r3, #4]
 800cc96:	42a2      	cmp	r2, r4
 800cc98:	d12b      	bne.n	800ccf2 <_malloc_r+0xe2>
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	605a      	str	r2, [r3, #4]
 800cc9e:	e00f      	b.n	800ccc0 <_malloc_r+0xb0>
 800cca0:	6822      	ldr	r2, [r4, #0]
 800cca2:	1b52      	subs	r2, r2, r5
 800cca4:	d41f      	bmi.n	800cce6 <_malloc_r+0xd6>
 800cca6:	2a0b      	cmp	r2, #11
 800cca8:	d917      	bls.n	800ccda <_malloc_r+0xca>
 800ccaa:	1961      	adds	r1, r4, r5
 800ccac:	42a3      	cmp	r3, r4
 800ccae:	6025      	str	r5, [r4, #0]
 800ccb0:	bf18      	it	ne
 800ccb2:	6059      	strne	r1, [r3, #4]
 800ccb4:	6863      	ldr	r3, [r4, #4]
 800ccb6:	bf08      	it	eq
 800ccb8:	f8c8 1000 	streq.w	r1, [r8]
 800ccbc:	5162      	str	r2, [r4, r5]
 800ccbe:	604b      	str	r3, [r1, #4]
 800ccc0:	4638      	mov	r0, r7
 800ccc2:	f104 060b 	add.w	r6, r4, #11
 800ccc6:	f000 f829 	bl	800cd1c <__malloc_unlock>
 800ccca:	f026 0607 	bic.w	r6, r6, #7
 800ccce:	1d23      	adds	r3, r4, #4
 800ccd0:	1af2      	subs	r2, r6, r3
 800ccd2:	d0ae      	beq.n	800cc32 <_malloc_r+0x22>
 800ccd4:	1b9b      	subs	r3, r3, r6
 800ccd6:	50a3      	str	r3, [r4, r2]
 800ccd8:	e7ab      	b.n	800cc32 <_malloc_r+0x22>
 800ccda:	42a3      	cmp	r3, r4
 800ccdc:	6862      	ldr	r2, [r4, #4]
 800ccde:	d1dd      	bne.n	800cc9c <_malloc_r+0x8c>
 800cce0:	f8c8 2000 	str.w	r2, [r8]
 800cce4:	e7ec      	b.n	800ccc0 <_malloc_r+0xb0>
 800cce6:	4623      	mov	r3, r4
 800cce8:	6864      	ldr	r4, [r4, #4]
 800ccea:	e7ac      	b.n	800cc46 <_malloc_r+0x36>
 800ccec:	4634      	mov	r4, r6
 800ccee:	6876      	ldr	r6, [r6, #4]
 800ccf0:	e7b4      	b.n	800cc5c <_malloc_r+0x4c>
 800ccf2:	4613      	mov	r3, r2
 800ccf4:	e7cc      	b.n	800cc90 <_malloc_r+0x80>
 800ccf6:	230c      	movs	r3, #12
 800ccf8:	603b      	str	r3, [r7, #0]
 800ccfa:	4638      	mov	r0, r7
 800ccfc:	f000 f80e 	bl	800cd1c <__malloc_unlock>
 800cd00:	e797      	b.n	800cc32 <_malloc_r+0x22>
 800cd02:	6025      	str	r5, [r4, #0]
 800cd04:	e7dc      	b.n	800ccc0 <_malloc_r+0xb0>
 800cd06:	605b      	str	r3, [r3, #4]
 800cd08:	deff      	udf	#255	; 0xff
 800cd0a:	bf00      	nop
 800cd0c:	200040a8 	.word	0x200040a8

0800cd10 <__malloc_lock>:
 800cd10:	4801      	ldr	r0, [pc, #4]	; (800cd18 <__malloc_lock+0x8>)
 800cd12:	f7ff beda 	b.w	800caca <__retarget_lock_acquire_recursive>
 800cd16:	bf00      	nop
 800cd18:	200040a4 	.word	0x200040a4

0800cd1c <__malloc_unlock>:
 800cd1c:	4801      	ldr	r0, [pc, #4]	; (800cd24 <__malloc_unlock+0x8>)
 800cd1e:	f7ff bed5 	b.w	800cacc <__retarget_lock_release_recursive>
 800cd22:	bf00      	nop
 800cd24:	200040a4 	.word	0x200040a4

0800cd28 <__ssputs_r>:
 800cd28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd2c:	688e      	ldr	r6, [r1, #8]
 800cd2e:	461f      	mov	r7, r3
 800cd30:	42be      	cmp	r6, r7
 800cd32:	680b      	ldr	r3, [r1, #0]
 800cd34:	4682      	mov	sl, r0
 800cd36:	460c      	mov	r4, r1
 800cd38:	4690      	mov	r8, r2
 800cd3a:	d82c      	bhi.n	800cd96 <__ssputs_r+0x6e>
 800cd3c:	898a      	ldrh	r2, [r1, #12]
 800cd3e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd42:	d026      	beq.n	800cd92 <__ssputs_r+0x6a>
 800cd44:	6965      	ldr	r5, [r4, #20]
 800cd46:	6909      	ldr	r1, [r1, #16]
 800cd48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd4c:	eba3 0901 	sub.w	r9, r3, r1
 800cd50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd54:	1c7b      	adds	r3, r7, #1
 800cd56:	444b      	add	r3, r9
 800cd58:	106d      	asrs	r5, r5, #1
 800cd5a:	429d      	cmp	r5, r3
 800cd5c:	bf38      	it	cc
 800cd5e:	461d      	movcc	r5, r3
 800cd60:	0553      	lsls	r3, r2, #21
 800cd62:	d527      	bpl.n	800cdb4 <__ssputs_r+0x8c>
 800cd64:	4629      	mov	r1, r5
 800cd66:	f7ff ff53 	bl	800cc10 <_malloc_r>
 800cd6a:	4606      	mov	r6, r0
 800cd6c:	b360      	cbz	r0, 800cdc8 <__ssputs_r+0xa0>
 800cd6e:	6921      	ldr	r1, [r4, #16]
 800cd70:	464a      	mov	r2, r9
 800cd72:	f7ff feac 	bl	800cace <memcpy>
 800cd76:	89a3      	ldrh	r3, [r4, #12]
 800cd78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cd7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd80:	81a3      	strh	r3, [r4, #12]
 800cd82:	6126      	str	r6, [r4, #16]
 800cd84:	6165      	str	r5, [r4, #20]
 800cd86:	444e      	add	r6, r9
 800cd88:	eba5 0509 	sub.w	r5, r5, r9
 800cd8c:	6026      	str	r6, [r4, #0]
 800cd8e:	60a5      	str	r5, [r4, #8]
 800cd90:	463e      	mov	r6, r7
 800cd92:	42be      	cmp	r6, r7
 800cd94:	d900      	bls.n	800cd98 <__ssputs_r+0x70>
 800cd96:	463e      	mov	r6, r7
 800cd98:	6820      	ldr	r0, [r4, #0]
 800cd9a:	4632      	mov	r2, r6
 800cd9c:	4641      	mov	r1, r8
 800cd9e:	f000 fd11 	bl	800d7c4 <memmove>
 800cda2:	68a3      	ldr	r3, [r4, #8]
 800cda4:	1b9b      	subs	r3, r3, r6
 800cda6:	60a3      	str	r3, [r4, #8]
 800cda8:	6823      	ldr	r3, [r4, #0]
 800cdaa:	4433      	add	r3, r6
 800cdac:	6023      	str	r3, [r4, #0]
 800cdae:	2000      	movs	r0, #0
 800cdb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdb4:	462a      	mov	r2, r5
 800cdb6:	f000 fd58 	bl	800d86a <_realloc_r>
 800cdba:	4606      	mov	r6, r0
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	d1e0      	bne.n	800cd82 <__ssputs_r+0x5a>
 800cdc0:	6921      	ldr	r1, [r4, #16]
 800cdc2:	4650      	mov	r0, sl
 800cdc4:	f7ff feb0 	bl	800cb28 <_free_r>
 800cdc8:	230c      	movs	r3, #12
 800cdca:	f8ca 3000 	str.w	r3, [sl]
 800cdce:	89a3      	ldrh	r3, [r4, #12]
 800cdd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdd4:	81a3      	strh	r3, [r4, #12]
 800cdd6:	f04f 30ff 	mov.w	r0, #4294967295
 800cdda:	e7e9      	b.n	800cdb0 <__ssputs_r+0x88>

0800cddc <_svfiprintf_r>:
 800cddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde0:	4698      	mov	r8, r3
 800cde2:	898b      	ldrh	r3, [r1, #12]
 800cde4:	061b      	lsls	r3, r3, #24
 800cde6:	b09d      	sub	sp, #116	; 0x74
 800cde8:	4607      	mov	r7, r0
 800cdea:	460d      	mov	r5, r1
 800cdec:	4614      	mov	r4, r2
 800cdee:	d50e      	bpl.n	800ce0e <_svfiprintf_r+0x32>
 800cdf0:	690b      	ldr	r3, [r1, #16]
 800cdf2:	b963      	cbnz	r3, 800ce0e <_svfiprintf_r+0x32>
 800cdf4:	2140      	movs	r1, #64	; 0x40
 800cdf6:	f7ff ff0b 	bl	800cc10 <_malloc_r>
 800cdfa:	6028      	str	r0, [r5, #0]
 800cdfc:	6128      	str	r0, [r5, #16]
 800cdfe:	b920      	cbnz	r0, 800ce0a <_svfiprintf_r+0x2e>
 800ce00:	230c      	movs	r3, #12
 800ce02:	603b      	str	r3, [r7, #0]
 800ce04:	f04f 30ff 	mov.w	r0, #4294967295
 800ce08:	e0d0      	b.n	800cfac <_svfiprintf_r+0x1d0>
 800ce0a:	2340      	movs	r3, #64	; 0x40
 800ce0c:	616b      	str	r3, [r5, #20]
 800ce0e:	2300      	movs	r3, #0
 800ce10:	9309      	str	r3, [sp, #36]	; 0x24
 800ce12:	2320      	movs	r3, #32
 800ce14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce18:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce1c:	2330      	movs	r3, #48	; 0x30
 800ce1e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cfc4 <_svfiprintf_r+0x1e8>
 800ce22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce26:	f04f 0901 	mov.w	r9, #1
 800ce2a:	4623      	mov	r3, r4
 800ce2c:	469a      	mov	sl, r3
 800ce2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce32:	b10a      	cbz	r2, 800ce38 <_svfiprintf_r+0x5c>
 800ce34:	2a25      	cmp	r2, #37	; 0x25
 800ce36:	d1f9      	bne.n	800ce2c <_svfiprintf_r+0x50>
 800ce38:	ebba 0b04 	subs.w	fp, sl, r4
 800ce3c:	d00b      	beq.n	800ce56 <_svfiprintf_r+0x7a>
 800ce3e:	465b      	mov	r3, fp
 800ce40:	4622      	mov	r2, r4
 800ce42:	4629      	mov	r1, r5
 800ce44:	4638      	mov	r0, r7
 800ce46:	f7ff ff6f 	bl	800cd28 <__ssputs_r>
 800ce4a:	3001      	adds	r0, #1
 800ce4c:	f000 80a9 	beq.w	800cfa2 <_svfiprintf_r+0x1c6>
 800ce50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce52:	445a      	add	r2, fp
 800ce54:	9209      	str	r2, [sp, #36]	; 0x24
 800ce56:	f89a 3000 	ldrb.w	r3, [sl]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	f000 80a1 	beq.w	800cfa2 <_svfiprintf_r+0x1c6>
 800ce60:	2300      	movs	r3, #0
 800ce62:	f04f 32ff 	mov.w	r2, #4294967295
 800ce66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce6a:	f10a 0a01 	add.w	sl, sl, #1
 800ce6e:	9304      	str	r3, [sp, #16]
 800ce70:	9307      	str	r3, [sp, #28]
 800ce72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce76:	931a      	str	r3, [sp, #104]	; 0x68
 800ce78:	4654      	mov	r4, sl
 800ce7a:	2205      	movs	r2, #5
 800ce7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce80:	4850      	ldr	r0, [pc, #320]	; (800cfc4 <_svfiprintf_r+0x1e8>)
 800ce82:	f7f3 f9ad 	bl	80001e0 <memchr>
 800ce86:	9a04      	ldr	r2, [sp, #16]
 800ce88:	b9d8      	cbnz	r0, 800cec2 <_svfiprintf_r+0xe6>
 800ce8a:	06d0      	lsls	r0, r2, #27
 800ce8c:	bf44      	itt	mi
 800ce8e:	2320      	movmi	r3, #32
 800ce90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce94:	0711      	lsls	r1, r2, #28
 800ce96:	bf44      	itt	mi
 800ce98:	232b      	movmi	r3, #43	; 0x2b
 800ce9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce9e:	f89a 3000 	ldrb.w	r3, [sl]
 800cea2:	2b2a      	cmp	r3, #42	; 0x2a
 800cea4:	d015      	beq.n	800ced2 <_svfiprintf_r+0xf6>
 800cea6:	9a07      	ldr	r2, [sp, #28]
 800cea8:	4654      	mov	r4, sl
 800ceaa:	2000      	movs	r0, #0
 800ceac:	f04f 0c0a 	mov.w	ip, #10
 800ceb0:	4621      	mov	r1, r4
 800ceb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ceb6:	3b30      	subs	r3, #48	; 0x30
 800ceb8:	2b09      	cmp	r3, #9
 800ceba:	d94d      	bls.n	800cf58 <_svfiprintf_r+0x17c>
 800cebc:	b1b0      	cbz	r0, 800ceec <_svfiprintf_r+0x110>
 800cebe:	9207      	str	r2, [sp, #28]
 800cec0:	e014      	b.n	800ceec <_svfiprintf_r+0x110>
 800cec2:	eba0 0308 	sub.w	r3, r0, r8
 800cec6:	fa09 f303 	lsl.w	r3, r9, r3
 800ceca:	4313      	orrs	r3, r2
 800cecc:	9304      	str	r3, [sp, #16]
 800cece:	46a2      	mov	sl, r4
 800ced0:	e7d2      	b.n	800ce78 <_svfiprintf_r+0x9c>
 800ced2:	9b03      	ldr	r3, [sp, #12]
 800ced4:	1d19      	adds	r1, r3, #4
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	9103      	str	r1, [sp, #12]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	bfbb      	ittet	lt
 800cede:	425b      	neglt	r3, r3
 800cee0:	f042 0202 	orrlt.w	r2, r2, #2
 800cee4:	9307      	strge	r3, [sp, #28]
 800cee6:	9307      	strlt	r3, [sp, #28]
 800cee8:	bfb8      	it	lt
 800ceea:	9204      	strlt	r2, [sp, #16]
 800ceec:	7823      	ldrb	r3, [r4, #0]
 800ceee:	2b2e      	cmp	r3, #46	; 0x2e
 800cef0:	d10c      	bne.n	800cf0c <_svfiprintf_r+0x130>
 800cef2:	7863      	ldrb	r3, [r4, #1]
 800cef4:	2b2a      	cmp	r3, #42	; 0x2a
 800cef6:	d134      	bne.n	800cf62 <_svfiprintf_r+0x186>
 800cef8:	9b03      	ldr	r3, [sp, #12]
 800cefa:	1d1a      	adds	r2, r3, #4
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	9203      	str	r2, [sp, #12]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	bfb8      	it	lt
 800cf04:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf08:	3402      	adds	r4, #2
 800cf0a:	9305      	str	r3, [sp, #20]
 800cf0c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cfd4 <_svfiprintf_r+0x1f8>
 800cf10:	7821      	ldrb	r1, [r4, #0]
 800cf12:	2203      	movs	r2, #3
 800cf14:	4650      	mov	r0, sl
 800cf16:	f7f3 f963 	bl	80001e0 <memchr>
 800cf1a:	b138      	cbz	r0, 800cf2c <_svfiprintf_r+0x150>
 800cf1c:	9b04      	ldr	r3, [sp, #16]
 800cf1e:	eba0 000a 	sub.w	r0, r0, sl
 800cf22:	2240      	movs	r2, #64	; 0x40
 800cf24:	4082      	lsls	r2, r0
 800cf26:	4313      	orrs	r3, r2
 800cf28:	3401      	adds	r4, #1
 800cf2a:	9304      	str	r3, [sp, #16]
 800cf2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf30:	4825      	ldr	r0, [pc, #148]	; (800cfc8 <_svfiprintf_r+0x1ec>)
 800cf32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf36:	2206      	movs	r2, #6
 800cf38:	f7f3 f952 	bl	80001e0 <memchr>
 800cf3c:	2800      	cmp	r0, #0
 800cf3e:	d038      	beq.n	800cfb2 <_svfiprintf_r+0x1d6>
 800cf40:	4b22      	ldr	r3, [pc, #136]	; (800cfcc <_svfiprintf_r+0x1f0>)
 800cf42:	bb1b      	cbnz	r3, 800cf8c <_svfiprintf_r+0x1b0>
 800cf44:	9b03      	ldr	r3, [sp, #12]
 800cf46:	3307      	adds	r3, #7
 800cf48:	f023 0307 	bic.w	r3, r3, #7
 800cf4c:	3308      	adds	r3, #8
 800cf4e:	9303      	str	r3, [sp, #12]
 800cf50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf52:	4433      	add	r3, r6
 800cf54:	9309      	str	r3, [sp, #36]	; 0x24
 800cf56:	e768      	b.n	800ce2a <_svfiprintf_r+0x4e>
 800cf58:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf5c:	460c      	mov	r4, r1
 800cf5e:	2001      	movs	r0, #1
 800cf60:	e7a6      	b.n	800ceb0 <_svfiprintf_r+0xd4>
 800cf62:	2300      	movs	r3, #0
 800cf64:	3401      	adds	r4, #1
 800cf66:	9305      	str	r3, [sp, #20]
 800cf68:	4619      	mov	r1, r3
 800cf6a:	f04f 0c0a 	mov.w	ip, #10
 800cf6e:	4620      	mov	r0, r4
 800cf70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf74:	3a30      	subs	r2, #48	; 0x30
 800cf76:	2a09      	cmp	r2, #9
 800cf78:	d903      	bls.n	800cf82 <_svfiprintf_r+0x1a6>
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d0c6      	beq.n	800cf0c <_svfiprintf_r+0x130>
 800cf7e:	9105      	str	r1, [sp, #20]
 800cf80:	e7c4      	b.n	800cf0c <_svfiprintf_r+0x130>
 800cf82:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf86:	4604      	mov	r4, r0
 800cf88:	2301      	movs	r3, #1
 800cf8a:	e7f0      	b.n	800cf6e <_svfiprintf_r+0x192>
 800cf8c:	ab03      	add	r3, sp, #12
 800cf8e:	9300      	str	r3, [sp, #0]
 800cf90:	462a      	mov	r2, r5
 800cf92:	4b0f      	ldr	r3, [pc, #60]	; (800cfd0 <_svfiprintf_r+0x1f4>)
 800cf94:	a904      	add	r1, sp, #16
 800cf96:	4638      	mov	r0, r7
 800cf98:	f3af 8000 	nop.w
 800cf9c:	1c42      	adds	r2, r0, #1
 800cf9e:	4606      	mov	r6, r0
 800cfa0:	d1d6      	bne.n	800cf50 <_svfiprintf_r+0x174>
 800cfa2:	89ab      	ldrh	r3, [r5, #12]
 800cfa4:	065b      	lsls	r3, r3, #25
 800cfa6:	f53f af2d 	bmi.w	800ce04 <_svfiprintf_r+0x28>
 800cfaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfac:	b01d      	add	sp, #116	; 0x74
 800cfae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfb2:	ab03      	add	r3, sp, #12
 800cfb4:	9300      	str	r3, [sp, #0]
 800cfb6:	462a      	mov	r2, r5
 800cfb8:	4b05      	ldr	r3, [pc, #20]	; (800cfd0 <_svfiprintf_r+0x1f4>)
 800cfba:	a904      	add	r1, sp, #16
 800cfbc:	4638      	mov	r0, r7
 800cfbe:	f000 f9bd 	bl	800d33c <_printf_i>
 800cfc2:	e7eb      	b.n	800cf9c <_svfiprintf_r+0x1c0>
 800cfc4:	0800e58d 	.word	0x0800e58d
 800cfc8:	0800e597 	.word	0x0800e597
 800cfcc:	00000000 	.word	0x00000000
 800cfd0:	0800cd29 	.word	0x0800cd29
 800cfd4:	0800e593 	.word	0x0800e593

0800cfd8 <__sfputc_r>:
 800cfd8:	6893      	ldr	r3, [r2, #8]
 800cfda:	3b01      	subs	r3, #1
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	b410      	push	{r4}
 800cfe0:	6093      	str	r3, [r2, #8]
 800cfe2:	da08      	bge.n	800cff6 <__sfputc_r+0x1e>
 800cfe4:	6994      	ldr	r4, [r2, #24]
 800cfe6:	42a3      	cmp	r3, r4
 800cfe8:	db01      	blt.n	800cfee <__sfputc_r+0x16>
 800cfea:	290a      	cmp	r1, #10
 800cfec:	d103      	bne.n	800cff6 <__sfputc_r+0x1e>
 800cfee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cff2:	f7ff bba6 	b.w	800c742 <__swbuf_r>
 800cff6:	6813      	ldr	r3, [r2, #0]
 800cff8:	1c58      	adds	r0, r3, #1
 800cffa:	6010      	str	r0, [r2, #0]
 800cffc:	7019      	strb	r1, [r3, #0]
 800cffe:	4608      	mov	r0, r1
 800d000:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d004:	4770      	bx	lr

0800d006 <__sfputs_r>:
 800d006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d008:	4606      	mov	r6, r0
 800d00a:	460f      	mov	r7, r1
 800d00c:	4614      	mov	r4, r2
 800d00e:	18d5      	adds	r5, r2, r3
 800d010:	42ac      	cmp	r4, r5
 800d012:	d101      	bne.n	800d018 <__sfputs_r+0x12>
 800d014:	2000      	movs	r0, #0
 800d016:	e007      	b.n	800d028 <__sfputs_r+0x22>
 800d018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d01c:	463a      	mov	r2, r7
 800d01e:	4630      	mov	r0, r6
 800d020:	f7ff ffda 	bl	800cfd8 <__sfputc_r>
 800d024:	1c43      	adds	r3, r0, #1
 800d026:	d1f3      	bne.n	800d010 <__sfputs_r+0xa>
 800d028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d02c <_vfiprintf_r>:
 800d02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d030:	460d      	mov	r5, r1
 800d032:	b09d      	sub	sp, #116	; 0x74
 800d034:	4614      	mov	r4, r2
 800d036:	4698      	mov	r8, r3
 800d038:	4606      	mov	r6, r0
 800d03a:	b118      	cbz	r0, 800d044 <_vfiprintf_r+0x18>
 800d03c:	6a03      	ldr	r3, [r0, #32]
 800d03e:	b90b      	cbnz	r3, 800d044 <_vfiprintf_r+0x18>
 800d040:	f7ff fa78 	bl	800c534 <__sinit>
 800d044:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d046:	07d9      	lsls	r1, r3, #31
 800d048:	d405      	bmi.n	800d056 <_vfiprintf_r+0x2a>
 800d04a:	89ab      	ldrh	r3, [r5, #12]
 800d04c:	059a      	lsls	r2, r3, #22
 800d04e:	d402      	bmi.n	800d056 <_vfiprintf_r+0x2a>
 800d050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d052:	f7ff fd3a 	bl	800caca <__retarget_lock_acquire_recursive>
 800d056:	89ab      	ldrh	r3, [r5, #12]
 800d058:	071b      	lsls	r3, r3, #28
 800d05a:	d501      	bpl.n	800d060 <_vfiprintf_r+0x34>
 800d05c:	692b      	ldr	r3, [r5, #16]
 800d05e:	b99b      	cbnz	r3, 800d088 <_vfiprintf_r+0x5c>
 800d060:	4629      	mov	r1, r5
 800d062:	4630      	mov	r0, r6
 800d064:	f7ff fbaa 	bl	800c7bc <__swsetup_r>
 800d068:	b170      	cbz	r0, 800d088 <_vfiprintf_r+0x5c>
 800d06a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d06c:	07dc      	lsls	r4, r3, #31
 800d06e:	d504      	bpl.n	800d07a <_vfiprintf_r+0x4e>
 800d070:	f04f 30ff 	mov.w	r0, #4294967295
 800d074:	b01d      	add	sp, #116	; 0x74
 800d076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d07a:	89ab      	ldrh	r3, [r5, #12]
 800d07c:	0598      	lsls	r0, r3, #22
 800d07e:	d4f7      	bmi.n	800d070 <_vfiprintf_r+0x44>
 800d080:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d082:	f7ff fd23 	bl	800cacc <__retarget_lock_release_recursive>
 800d086:	e7f3      	b.n	800d070 <_vfiprintf_r+0x44>
 800d088:	2300      	movs	r3, #0
 800d08a:	9309      	str	r3, [sp, #36]	; 0x24
 800d08c:	2320      	movs	r3, #32
 800d08e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d092:	f8cd 800c 	str.w	r8, [sp, #12]
 800d096:	2330      	movs	r3, #48	; 0x30
 800d098:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d24c <_vfiprintf_r+0x220>
 800d09c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0a0:	f04f 0901 	mov.w	r9, #1
 800d0a4:	4623      	mov	r3, r4
 800d0a6:	469a      	mov	sl, r3
 800d0a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0ac:	b10a      	cbz	r2, 800d0b2 <_vfiprintf_r+0x86>
 800d0ae:	2a25      	cmp	r2, #37	; 0x25
 800d0b0:	d1f9      	bne.n	800d0a6 <_vfiprintf_r+0x7a>
 800d0b2:	ebba 0b04 	subs.w	fp, sl, r4
 800d0b6:	d00b      	beq.n	800d0d0 <_vfiprintf_r+0xa4>
 800d0b8:	465b      	mov	r3, fp
 800d0ba:	4622      	mov	r2, r4
 800d0bc:	4629      	mov	r1, r5
 800d0be:	4630      	mov	r0, r6
 800d0c0:	f7ff ffa1 	bl	800d006 <__sfputs_r>
 800d0c4:	3001      	adds	r0, #1
 800d0c6:	f000 80a9 	beq.w	800d21c <_vfiprintf_r+0x1f0>
 800d0ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0cc:	445a      	add	r2, fp
 800d0ce:	9209      	str	r2, [sp, #36]	; 0x24
 800d0d0:	f89a 3000 	ldrb.w	r3, [sl]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	f000 80a1 	beq.w	800d21c <_vfiprintf_r+0x1f0>
 800d0da:	2300      	movs	r3, #0
 800d0dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d0e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0e4:	f10a 0a01 	add.w	sl, sl, #1
 800d0e8:	9304      	str	r3, [sp, #16]
 800d0ea:	9307      	str	r3, [sp, #28]
 800d0ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0f0:	931a      	str	r3, [sp, #104]	; 0x68
 800d0f2:	4654      	mov	r4, sl
 800d0f4:	2205      	movs	r2, #5
 800d0f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0fa:	4854      	ldr	r0, [pc, #336]	; (800d24c <_vfiprintf_r+0x220>)
 800d0fc:	f7f3 f870 	bl	80001e0 <memchr>
 800d100:	9a04      	ldr	r2, [sp, #16]
 800d102:	b9d8      	cbnz	r0, 800d13c <_vfiprintf_r+0x110>
 800d104:	06d1      	lsls	r1, r2, #27
 800d106:	bf44      	itt	mi
 800d108:	2320      	movmi	r3, #32
 800d10a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d10e:	0713      	lsls	r3, r2, #28
 800d110:	bf44      	itt	mi
 800d112:	232b      	movmi	r3, #43	; 0x2b
 800d114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d118:	f89a 3000 	ldrb.w	r3, [sl]
 800d11c:	2b2a      	cmp	r3, #42	; 0x2a
 800d11e:	d015      	beq.n	800d14c <_vfiprintf_r+0x120>
 800d120:	9a07      	ldr	r2, [sp, #28]
 800d122:	4654      	mov	r4, sl
 800d124:	2000      	movs	r0, #0
 800d126:	f04f 0c0a 	mov.w	ip, #10
 800d12a:	4621      	mov	r1, r4
 800d12c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d130:	3b30      	subs	r3, #48	; 0x30
 800d132:	2b09      	cmp	r3, #9
 800d134:	d94d      	bls.n	800d1d2 <_vfiprintf_r+0x1a6>
 800d136:	b1b0      	cbz	r0, 800d166 <_vfiprintf_r+0x13a>
 800d138:	9207      	str	r2, [sp, #28]
 800d13a:	e014      	b.n	800d166 <_vfiprintf_r+0x13a>
 800d13c:	eba0 0308 	sub.w	r3, r0, r8
 800d140:	fa09 f303 	lsl.w	r3, r9, r3
 800d144:	4313      	orrs	r3, r2
 800d146:	9304      	str	r3, [sp, #16]
 800d148:	46a2      	mov	sl, r4
 800d14a:	e7d2      	b.n	800d0f2 <_vfiprintf_r+0xc6>
 800d14c:	9b03      	ldr	r3, [sp, #12]
 800d14e:	1d19      	adds	r1, r3, #4
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	9103      	str	r1, [sp, #12]
 800d154:	2b00      	cmp	r3, #0
 800d156:	bfbb      	ittet	lt
 800d158:	425b      	neglt	r3, r3
 800d15a:	f042 0202 	orrlt.w	r2, r2, #2
 800d15e:	9307      	strge	r3, [sp, #28]
 800d160:	9307      	strlt	r3, [sp, #28]
 800d162:	bfb8      	it	lt
 800d164:	9204      	strlt	r2, [sp, #16]
 800d166:	7823      	ldrb	r3, [r4, #0]
 800d168:	2b2e      	cmp	r3, #46	; 0x2e
 800d16a:	d10c      	bne.n	800d186 <_vfiprintf_r+0x15a>
 800d16c:	7863      	ldrb	r3, [r4, #1]
 800d16e:	2b2a      	cmp	r3, #42	; 0x2a
 800d170:	d134      	bne.n	800d1dc <_vfiprintf_r+0x1b0>
 800d172:	9b03      	ldr	r3, [sp, #12]
 800d174:	1d1a      	adds	r2, r3, #4
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	9203      	str	r2, [sp, #12]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	bfb8      	it	lt
 800d17e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d182:	3402      	adds	r4, #2
 800d184:	9305      	str	r3, [sp, #20]
 800d186:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d25c <_vfiprintf_r+0x230>
 800d18a:	7821      	ldrb	r1, [r4, #0]
 800d18c:	2203      	movs	r2, #3
 800d18e:	4650      	mov	r0, sl
 800d190:	f7f3 f826 	bl	80001e0 <memchr>
 800d194:	b138      	cbz	r0, 800d1a6 <_vfiprintf_r+0x17a>
 800d196:	9b04      	ldr	r3, [sp, #16]
 800d198:	eba0 000a 	sub.w	r0, r0, sl
 800d19c:	2240      	movs	r2, #64	; 0x40
 800d19e:	4082      	lsls	r2, r0
 800d1a0:	4313      	orrs	r3, r2
 800d1a2:	3401      	adds	r4, #1
 800d1a4:	9304      	str	r3, [sp, #16]
 800d1a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1aa:	4829      	ldr	r0, [pc, #164]	; (800d250 <_vfiprintf_r+0x224>)
 800d1ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1b0:	2206      	movs	r2, #6
 800d1b2:	f7f3 f815 	bl	80001e0 <memchr>
 800d1b6:	2800      	cmp	r0, #0
 800d1b8:	d03f      	beq.n	800d23a <_vfiprintf_r+0x20e>
 800d1ba:	4b26      	ldr	r3, [pc, #152]	; (800d254 <_vfiprintf_r+0x228>)
 800d1bc:	bb1b      	cbnz	r3, 800d206 <_vfiprintf_r+0x1da>
 800d1be:	9b03      	ldr	r3, [sp, #12]
 800d1c0:	3307      	adds	r3, #7
 800d1c2:	f023 0307 	bic.w	r3, r3, #7
 800d1c6:	3308      	adds	r3, #8
 800d1c8:	9303      	str	r3, [sp, #12]
 800d1ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1cc:	443b      	add	r3, r7
 800d1ce:	9309      	str	r3, [sp, #36]	; 0x24
 800d1d0:	e768      	b.n	800d0a4 <_vfiprintf_r+0x78>
 800d1d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1d6:	460c      	mov	r4, r1
 800d1d8:	2001      	movs	r0, #1
 800d1da:	e7a6      	b.n	800d12a <_vfiprintf_r+0xfe>
 800d1dc:	2300      	movs	r3, #0
 800d1de:	3401      	adds	r4, #1
 800d1e0:	9305      	str	r3, [sp, #20]
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	f04f 0c0a 	mov.w	ip, #10
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1ee:	3a30      	subs	r2, #48	; 0x30
 800d1f0:	2a09      	cmp	r2, #9
 800d1f2:	d903      	bls.n	800d1fc <_vfiprintf_r+0x1d0>
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d0c6      	beq.n	800d186 <_vfiprintf_r+0x15a>
 800d1f8:	9105      	str	r1, [sp, #20]
 800d1fa:	e7c4      	b.n	800d186 <_vfiprintf_r+0x15a>
 800d1fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800d200:	4604      	mov	r4, r0
 800d202:	2301      	movs	r3, #1
 800d204:	e7f0      	b.n	800d1e8 <_vfiprintf_r+0x1bc>
 800d206:	ab03      	add	r3, sp, #12
 800d208:	9300      	str	r3, [sp, #0]
 800d20a:	462a      	mov	r2, r5
 800d20c:	4b12      	ldr	r3, [pc, #72]	; (800d258 <_vfiprintf_r+0x22c>)
 800d20e:	a904      	add	r1, sp, #16
 800d210:	4630      	mov	r0, r6
 800d212:	f3af 8000 	nop.w
 800d216:	4607      	mov	r7, r0
 800d218:	1c78      	adds	r0, r7, #1
 800d21a:	d1d6      	bne.n	800d1ca <_vfiprintf_r+0x19e>
 800d21c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d21e:	07d9      	lsls	r1, r3, #31
 800d220:	d405      	bmi.n	800d22e <_vfiprintf_r+0x202>
 800d222:	89ab      	ldrh	r3, [r5, #12]
 800d224:	059a      	lsls	r2, r3, #22
 800d226:	d402      	bmi.n	800d22e <_vfiprintf_r+0x202>
 800d228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d22a:	f7ff fc4f 	bl	800cacc <__retarget_lock_release_recursive>
 800d22e:	89ab      	ldrh	r3, [r5, #12]
 800d230:	065b      	lsls	r3, r3, #25
 800d232:	f53f af1d 	bmi.w	800d070 <_vfiprintf_r+0x44>
 800d236:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d238:	e71c      	b.n	800d074 <_vfiprintf_r+0x48>
 800d23a:	ab03      	add	r3, sp, #12
 800d23c:	9300      	str	r3, [sp, #0]
 800d23e:	462a      	mov	r2, r5
 800d240:	4b05      	ldr	r3, [pc, #20]	; (800d258 <_vfiprintf_r+0x22c>)
 800d242:	a904      	add	r1, sp, #16
 800d244:	4630      	mov	r0, r6
 800d246:	f000 f879 	bl	800d33c <_printf_i>
 800d24a:	e7e4      	b.n	800d216 <_vfiprintf_r+0x1ea>
 800d24c:	0800e58d 	.word	0x0800e58d
 800d250:	0800e597 	.word	0x0800e597
 800d254:	00000000 	.word	0x00000000
 800d258:	0800d007 	.word	0x0800d007
 800d25c:	0800e593 	.word	0x0800e593

0800d260 <_printf_common>:
 800d260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d264:	4616      	mov	r6, r2
 800d266:	4699      	mov	r9, r3
 800d268:	688a      	ldr	r2, [r1, #8]
 800d26a:	690b      	ldr	r3, [r1, #16]
 800d26c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d270:	4293      	cmp	r3, r2
 800d272:	bfb8      	it	lt
 800d274:	4613      	movlt	r3, r2
 800d276:	6033      	str	r3, [r6, #0]
 800d278:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d27c:	4607      	mov	r7, r0
 800d27e:	460c      	mov	r4, r1
 800d280:	b10a      	cbz	r2, 800d286 <_printf_common+0x26>
 800d282:	3301      	adds	r3, #1
 800d284:	6033      	str	r3, [r6, #0]
 800d286:	6823      	ldr	r3, [r4, #0]
 800d288:	0699      	lsls	r1, r3, #26
 800d28a:	bf42      	ittt	mi
 800d28c:	6833      	ldrmi	r3, [r6, #0]
 800d28e:	3302      	addmi	r3, #2
 800d290:	6033      	strmi	r3, [r6, #0]
 800d292:	6825      	ldr	r5, [r4, #0]
 800d294:	f015 0506 	ands.w	r5, r5, #6
 800d298:	d106      	bne.n	800d2a8 <_printf_common+0x48>
 800d29a:	f104 0a19 	add.w	sl, r4, #25
 800d29e:	68e3      	ldr	r3, [r4, #12]
 800d2a0:	6832      	ldr	r2, [r6, #0]
 800d2a2:	1a9b      	subs	r3, r3, r2
 800d2a4:	42ab      	cmp	r3, r5
 800d2a6:	dc26      	bgt.n	800d2f6 <_printf_common+0x96>
 800d2a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d2ac:	1e13      	subs	r3, r2, #0
 800d2ae:	6822      	ldr	r2, [r4, #0]
 800d2b0:	bf18      	it	ne
 800d2b2:	2301      	movne	r3, #1
 800d2b4:	0692      	lsls	r2, r2, #26
 800d2b6:	d42b      	bmi.n	800d310 <_printf_common+0xb0>
 800d2b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d2bc:	4649      	mov	r1, r9
 800d2be:	4638      	mov	r0, r7
 800d2c0:	47c0      	blx	r8
 800d2c2:	3001      	adds	r0, #1
 800d2c4:	d01e      	beq.n	800d304 <_printf_common+0xa4>
 800d2c6:	6823      	ldr	r3, [r4, #0]
 800d2c8:	6922      	ldr	r2, [r4, #16]
 800d2ca:	f003 0306 	and.w	r3, r3, #6
 800d2ce:	2b04      	cmp	r3, #4
 800d2d0:	bf02      	ittt	eq
 800d2d2:	68e5      	ldreq	r5, [r4, #12]
 800d2d4:	6833      	ldreq	r3, [r6, #0]
 800d2d6:	1aed      	subeq	r5, r5, r3
 800d2d8:	68a3      	ldr	r3, [r4, #8]
 800d2da:	bf0c      	ite	eq
 800d2dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d2e0:	2500      	movne	r5, #0
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	bfc4      	itt	gt
 800d2e6:	1a9b      	subgt	r3, r3, r2
 800d2e8:	18ed      	addgt	r5, r5, r3
 800d2ea:	2600      	movs	r6, #0
 800d2ec:	341a      	adds	r4, #26
 800d2ee:	42b5      	cmp	r5, r6
 800d2f0:	d11a      	bne.n	800d328 <_printf_common+0xc8>
 800d2f2:	2000      	movs	r0, #0
 800d2f4:	e008      	b.n	800d308 <_printf_common+0xa8>
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	4652      	mov	r2, sl
 800d2fa:	4649      	mov	r1, r9
 800d2fc:	4638      	mov	r0, r7
 800d2fe:	47c0      	blx	r8
 800d300:	3001      	adds	r0, #1
 800d302:	d103      	bne.n	800d30c <_printf_common+0xac>
 800d304:	f04f 30ff 	mov.w	r0, #4294967295
 800d308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d30c:	3501      	adds	r5, #1
 800d30e:	e7c6      	b.n	800d29e <_printf_common+0x3e>
 800d310:	18e1      	adds	r1, r4, r3
 800d312:	1c5a      	adds	r2, r3, #1
 800d314:	2030      	movs	r0, #48	; 0x30
 800d316:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d31a:	4422      	add	r2, r4
 800d31c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d320:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d324:	3302      	adds	r3, #2
 800d326:	e7c7      	b.n	800d2b8 <_printf_common+0x58>
 800d328:	2301      	movs	r3, #1
 800d32a:	4622      	mov	r2, r4
 800d32c:	4649      	mov	r1, r9
 800d32e:	4638      	mov	r0, r7
 800d330:	47c0      	blx	r8
 800d332:	3001      	adds	r0, #1
 800d334:	d0e6      	beq.n	800d304 <_printf_common+0xa4>
 800d336:	3601      	adds	r6, #1
 800d338:	e7d9      	b.n	800d2ee <_printf_common+0x8e>
	...

0800d33c <_printf_i>:
 800d33c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d340:	7e0f      	ldrb	r7, [r1, #24]
 800d342:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d344:	2f78      	cmp	r7, #120	; 0x78
 800d346:	4691      	mov	r9, r2
 800d348:	4680      	mov	r8, r0
 800d34a:	460c      	mov	r4, r1
 800d34c:	469a      	mov	sl, r3
 800d34e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d352:	d807      	bhi.n	800d364 <_printf_i+0x28>
 800d354:	2f62      	cmp	r7, #98	; 0x62
 800d356:	d80a      	bhi.n	800d36e <_printf_i+0x32>
 800d358:	2f00      	cmp	r7, #0
 800d35a:	f000 80d4 	beq.w	800d506 <_printf_i+0x1ca>
 800d35e:	2f58      	cmp	r7, #88	; 0x58
 800d360:	f000 80c0 	beq.w	800d4e4 <_printf_i+0x1a8>
 800d364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d368:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d36c:	e03a      	b.n	800d3e4 <_printf_i+0xa8>
 800d36e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d372:	2b15      	cmp	r3, #21
 800d374:	d8f6      	bhi.n	800d364 <_printf_i+0x28>
 800d376:	a101      	add	r1, pc, #4	; (adr r1, 800d37c <_printf_i+0x40>)
 800d378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d37c:	0800d3d5 	.word	0x0800d3d5
 800d380:	0800d3e9 	.word	0x0800d3e9
 800d384:	0800d365 	.word	0x0800d365
 800d388:	0800d365 	.word	0x0800d365
 800d38c:	0800d365 	.word	0x0800d365
 800d390:	0800d365 	.word	0x0800d365
 800d394:	0800d3e9 	.word	0x0800d3e9
 800d398:	0800d365 	.word	0x0800d365
 800d39c:	0800d365 	.word	0x0800d365
 800d3a0:	0800d365 	.word	0x0800d365
 800d3a4:	0800d365 	.word	0x0800d365
 800d3a8:	0800d4ed 	.word	0x0800d4ed
 800d3ac:	0800d415 	.word	0x0800d415
 800d3b0:	0800d4a7 	.word	0x0800d4a7
 800d3b4:	0800d365 	.word	0x0800d365
 800d3b8:	0800d365 	.word	0x0800d365
 800d3bc:	0800d50f 	.word	0x0800d50f
 800d3c0:	0800d365 	.word	0x0800d365
 800d3c4:	0800d415 	.word	0x0800d415
 800d3c8:	0800d365 	.word	0x0800d365
 800d3cc:	0800d365 	.word	0x0800d365
 800d3d0:	0800d4af 	.word	0x0800d4af
 800d3d4:	682b      	ldr	r3, [r5, #0]
 800d3d6:	1d1a      	adds	r2, r3, #4
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	602a      	str	r2, [r5, #0]
 800d3dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	e09f      	b.n	800d528 <_printf_i+0x1ec>
 800d3e8:	6820      	ldr	r0, [r4, #0]
 800d3ea:	682b      	ldr	r3, [r5, #0]
 800d3ec:	0607      	lsls	r7, r0, #24
 800d3ee:	f103 0104 	add.w	r1, r3, #4
 800d3f2:	6029      	str	r1, [r5, #0]
 800d3f4:	d501      	bpl.n	800d3fa <_printf_i+0xbe>
 800d3f6:	681e      	ldr	r6, [r3, #0]
 800d3f8:	e003      	b.n	800d402 <_printf_i+0xc6>
 800d3fa:	0646      	lsls	r6, r0, #25
 800d3fc:	d5fb      	bpl.n	800d3f6 <_printf_i+0xba>
 800d3fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d402:	2e00      	cmp	r6, #0
 800d404:	da03      	bge.n	800d40e <_printf_i+0xd2>
 800d406:	232d      	movs	r3, #45	; 0x2d
 800d408:	4276      	negs	r6, r6
 800d40a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d40e:	485a      	ldr	r0, [pc, #360]	; (800d578 <_printf_i+0x23c>)
 800d410:	230a      	movs	r3, #10
 800d412:	e012      	b.n	800d43a <_printf_i+0xfe>
 800d414:	682b      	ldr	r3, [r5, #0]
 800d416:	6820      	ldr	r0, [r4, #0]
 800d418:	1d19      	adds	r1, r3, #4
 800d41a:	6029      	str	r1, [r5, #0]
 800d41c:	0605      	lsls	r5, r0, #24
 800d41e:	d501      	bpl.n	800d424 <_printf_i+0xe8>
 800d420:	681e      	ldr	r6, [r3, #0]
 800d422:	e002      	b.n	800d42a <_printf_i+0xee>
 800d424:	0641      	lsls	r1, r0, #25
 800d426:	d5fb      	bpl.n	800d420 <_printf_i+0xe4>
 800d428:	881e      	ldrh	r6, [r3, #0]
 800d42a:	4853      	ldr	r0, [pc, #332]	; (800d578 <_printf_i+0x23c>)
 800d42c:	2f6f      	cmp	r7, #111	; 0x6f
 800d42e:	bf0c      	ite	eq
 800d430:	2308      	moveq	r3, #8
 800d432:	230a      	movne	r3, #10
 800d434:	2100      	movs	r1, #0
 800d436:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d43a:	6865      	ldr	r5, [r4, #4]
 800d43c:	60a5      	str	r5, [r4, #8]
 800d43e:	2d00      	cmp	r5, #0
 800d440:	bfa2      	ittt	ge
 800d442:	6821      	ldrge	r1, [r4, #0]
 800d444:	f021 0104 	bicge.w	r1, r1, #4
 800d448:	6021      	strge	r1, [r4, #0]
 800d44a:	b90e      	cbnz	r6, 800d450 <_printf_i+0x114>
 800d44c:	2d00      	cmp	r5, #0
 800d44e:	d04b      	beq.n	800d4e8 <_printf_i+0x1ac>
 800d450:	4615      	mov	r5, r2
 800d452:	fbb6 f1f3 	udiv	r1, r6, r3
 800d456:	fb03 6711 	mls	r7, r3, r1, r6
 800d45a:	5dc7      	ldrb	r7, [r0, r7]
 800d45c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d460:	4637      	mov	r7, r6
 800d462:	42bb      	cmp	r3, r7
 800d464:	460e      	mov	r6, r1
 800d466:	d9f4      	bls.n	800d452 <_printf_i+0x116>
 800d468:	2b08      	cmp	r3, #8
 800d46a:	d10b      	bne.n	800d484 <_printf_i+0x148>
 800d46c:	6823      	ldr	r3, [r4, #0]
 800d46e:	07de      	lsls	r6, r3, #31
 800d470:	d508      	bpl.n	800d484 <_printf_i+0x148>
 800d472:	6923      	ldr	r3, [r4, #16]
 800d474:	6861      	ldr	r1, [r4, #4]
 800d476:	4299      	cmp	r1, r3
 800d478:	bfde      	ittt	le
 800d47a:	2330      	movle	r3, #48	; 0x30
 800d47c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d480:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d484:	1b52      	subs	r2, r2, r5
 800d486:	6122      	str	r2, [r4, #16]
 800d488:	f8cd a000 	str.w	sl, [sp]
 800d48c:	464b      	mov	r3, r9
 800d48e:	aa03      	add	r2, sp, #12
 800d490:	4621      	mov	r1, r4
 800d492:	4640      	mov	r0, r8
 800d494:	f7ff fee4 	bl	800d260 <_printf_common>
 800d498:	3001      	adds	r0, #1
 800d49a:	d14a      	bne.n	800d532 <_printf_i+0x1f6>
 800d49c:	f04f 30ff 	mov.w	r0, #4294967295
 800d4a0:	b004      	add	sp, #16
 800d4a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4a6:	6823      	ldr	r3, [r4, #0]
 800d4a8:	f043 0320 	orr.w	r3, r3, #32
 800d4ac:	6023      	str	r3, [r4, #0]
 800d4ae:	4833      	ldr	r0, [pc, #204]	; (800d57c <_printf_i+0x240>)
 800d4b0:	2778      	movs	r7, #120	; 0x78
 800d4b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d4b6:	6823      	ldr	r3, [r4, #0]
 800d4b8:	6829      	ldr	r1, [r5, #0]
 800d4ba:	061f      	lsls	r7, r3, #24
 800d4bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800d4c0:	d402      	bmi.n	800d4c8 <_printf_i+0x18c>
 800d4c2:	065f      	lsls	r7, r3, #25
 800d4c4:	bf48      	it	mi
 800d4c6:	b2b6      	uxthmi	r6, r6
 800d4c8:	07df      	lsls	r7, r3, #31
 800d4ca:	bf48      	it	mi
 800d4cc:	f043 0320 	orrmi.w	r3, r3, #32
 800d4d0:	6029      	str	r1, [r5, #0]
 800d4d2:	bf48      	it	mi
 800d4d4:	6023      	strmi	r3, [r4, #0]
 800d4d6:	b91e      	cbnz	r6, 800d4e0 <_printf_i+0x1a4>
 800d4d8:	6823      	ldr	r3, [r4, #0]
 800d4da:	f023 0320 	bic.w	r3, r3, #32
 800d4de:	6023      	str	r3, [r4, #0]
 800d4e0:	2310      	movs	r3, #16
 800d4e2:	e7a7      	b.n	800d434 <_printf_i+0xf8>
 800d4e4:	4824      	ldr	r0, [pc, #144]	; (800d578 <_printf_i+0x23c>)
 800d4e6:	e7e4      	b.n	800d4b2 <_printf_i+0x176>
 800d4e8:	4615      	mov	r5, r2
 800d4ea:	e7bd      	b.n	800d468 <_printf_i+0x12c>
 800d4ec:	682b      	ldr	r3, [r5, #0]
 800d4ee:	6826      	ldr	r6, [r4, #0]
 800d4f0:	6961      	ldr	r1, [r4, #20]
 800d4f2:	1d18      	adds	r0, r3, #4
 800d4f4:	6028      	str	r0, [r5, #0]
 800d4f6:	0635      	lsls	r5, r6, #24
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	d501      	bpl.n	800d500 <_printf_i+0x1c4>
 800d4fc:	6019      	str	r1, [r3, #0]
 800d4fe:	e002      	b.n	800d506 <_printf_i+0x1ca>
 800d500:	0670      	lsls	r0, r6, #25
 800d502:	d5fb      	bpl.n	800d4fc <_printf_i+0x1c0>
 800d504:	8019      	strh	r1, [r3, #0]
 800d506:	2300      	movs	r3, #0
 800d508:	6123      	str	r3, [r4, #16]
 800d50a:	4615      	mov	r5, r2
 800d50c:	e7bc      	b.n	800d488 <_printf_i+0x14c>
 800d50e:	682b      	ldr	r3, [r5, #0]
 800d510:	1d1a      	adds	r2, r3, #4
 800d512:	602a      	str	r2, [r5, #0]
 800d514:	681d      	ldr	r5, [r3, #0]
 800d516:	6862      	ldr	r2, [r4, #4]
 800d518:	2100      	movs	r1, #0
 800d51a:	4628      	mov	r0, r5
 800d51c:	f7f2 fe60 	bl	80001e0 <memchr>
 800d520:	b108      	cbz	r0, 800d526 <_printf_i+0x1ea>
 800d522:	1b40      	subs	r0, r0, r5
 800d524:	6060      	str	r0, [r4, #4]
 800d526:	6863      	ldr	r3, [r4, #4]
 800d528:	6123      	str	r3, [r4, #16]
 800d52a:	2300      	movs	r3, #0
 800d52c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d530:	e7aa      	b.n	800d488 <_printf_i+0x14c>
 800d532:	6923      	ldr	r3, [r4, #16]
 800d534:	462a      	mov	r2, r5
 800d536:	4649      	mov	r1, r9
 800d538:	4640      	mov	r0, r8
 800d53a:	47d0      	blx	sl
 800d53c:	3001      	adds	r0, #1
 800d53e:	d0ad      	beq.n	800d49c <_printf_i+0x160>
 800d540:	6823      	ldr	r3, [r4, #0]
 800d542:	079b      	lsls	r3, r3, #30
 800d544:	d413      	bmi.n	800d56e <_printf_i+0x232>
 800d546:	68e0      	ldr	r0, [r4, #12]
 800d548:	9b03      	ldr	r3, [sp, #12]
 800d54a:	4298      	cmp	r0, r3
 800d54c:	bfb8      	it	lt
 800d54e:	4618      	movlt	r0, r3
 800d550:	e7a6      	b.n	800d4a0 <_printf_i+0x164>
 800d552:	2301      	movs	r3, #1
 800d554:	4632      	mov	r2, r6
 800d556:	4649      	mov	r1, r9
 800d558:	4640      	mov	r0, r8
 800d55a:	47d0      	blx	sl
 800d55c:	3001      	adds	r0, #1
 800d55e:	d09d      	beq.n	800d49c <_printf_i+0x160>
 800d560:	3501      	adds	r5, #1
 800d562:	68e3      	ldr	r3, [r4, #12]
 800d564:	9903      	ldr	r1, [sp, #12]
 800d566:	1a5b      	subs	r3, r3, r1
 800d568:	42ab      	cmp	r3, r5
 800d56a:	dcf2      	bgt.n	800d552 <_printf_i+0x216>
 800d56c:	e7eb      	b.n	800d546 <_printf_i+0x20a>
 800d56e:	2500      	movs	r5, #0
 800d570:	f104 0619 	add.w	r6, r4, #25
 800d574:	e7f5      	b.n	800d562 <_printf_i+0x226>
 800d576:	bf00      	nop
 800d578:	0800e59e 	.word	0x0800e59e
 800d57c:	0800e5af 	.word	0x0800e5af

0800d580 <__sflush_r>:
 800d580:	898a      	ldrh	r2, [r1, #12]
 800d582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d586:	4605      	mov	r5, r0
 800d588:	0710      	lsls	r0, r2, #28
 800d58a:	460c      	mov	r4, r1
 800d58c:	d458      	bmi.n	800d640 <__sflush_r+0xc0>
 800d58e:	684b      	ldr	r3, [r1, #4]
 800d590:	2b00      	cmp	r3, #0
 800d592:	dc05      	bgt.n	800d5a0 <__sflush_r+0x20>
 800d594:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d596:	2b00      	cmp	r3, #0
 800d598:	dc02      	bgt.n	800d5a0 <__sflush_r+0x20>
 800d59a:	2000      	movs	r0, #0
 800d59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5a2:	2e00      	cmp	r6, #0
 800d5a4:	d0f9      	beq.n	800d59a <__sflush_r+0x1a>
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d5ac:	682f      	ldr	r7, [r5, #0]
 800d5ae:	6a21      	ldr	r1, [r4, #32]
 800d5b0:	602b      	str	r3, [r5, #0]
 800d5b2:	d032      	beq.n	800d61a <__sflush_r+0x9a>
 800d5b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d5b6:	89a3      	ldrh	r3, [r4, #12]
 800d5b8:	075a      	lsls	r2, r3, #29
 800d5ba:	d505      	bpl.n	800d5c8 <__sflush_r+0x48>
 800d5bc:	6863      	ldr	r3, [r4, #4]
 800d5be:	1ac0      	subs	r0, r0, r3
 800d5c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d5c2:	b10b      	cbz	r3, 800d5c8 <__sflush_r+0x48>
 800d5c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d5c6:	1ac0      	subs	r0, r0, r3
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	4602      	mov	r2, r0
 800d5cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5ce:	6a21      	ldr	r1, [r4, #32]
 800d5d0:	4628      	mov	r0, r5
 800d5d2:	47b0      	blx	r6
 800d5d4:	1c43      	adds	r3, r0, #1
 800d5d6:	89a3      	ldrh	r3, [r4, #12]
 800d5d8:	d106      	bne.n	800d5e8 <__sflush_r+0x68>
 800d5da:	6829      	ldr	r1, [r5, #0]
 800d5dc:	291d      	cmp	r1, #29
 800d5de:	d82b      	bhi.n	800d638 <__sflush_r+0xb8>
 800d5e0:	4a29      	ldr	r2, [pc, #164]	; (800d688 <__sflush_r+0x108>)
 800d5e2:	410a      	asrs	r2, r1
 800d5e4:	07d6      	lsls	r6, r2, #31
 800d5e6:	d427      	bmi.n	800d638 <__sflush_r+0xb8>
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	6062      	str	r2, [r4, #4]
 800d5ec:	04d9      	lsls	r1, r3, #19
 800d5ee:	6922      	ldr	r2, [r4, #16]
 800d5f0:	6022      	str	r2, [r4, #0]
 800d5f2:	d504      	bpl.n	800d5fe <__sflush_r+0x7e>
 800d5f4:	1c42      	adds	r2, r0, #1
 800d5f6:	d101      	bne.n	800d5fc <__sflush_r+0x7c>
 800d5f8:	682b      	ldr	r3, [r5, #0]
 800d5fa:	b903      	cbnz	r3, 800d5fe <__sflush_r+0x7e>
 800d5fc:	6560      	str	r0, [r4, #84]	; 0x54
 800d5fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d600:	602f      	str	r7, [r5, #0]
 800d602:	2900      	cmp	r1, #0
 800d604:	d0c9      	beq.n	800d59a <__sflush_r+0x1a>
 800d606:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d60a:	4299      	cmp	r1, r3
 800d60c:	d002      	beq.n	800d614 <__sflush_r+0x94>
 800d60e:	4628      	mov	r0, r5
 800d610:	f7ff fa8a 	bl	800cb28 <_free_r>
 800d614:	2000      	movs	r0, #0
 800d616:	6360      	str	r0, [r4, #52]	; 0x34
 800d618:	e7c0      	b.n	800d59c <__sflush_r+0x1c>
 800d61a:	2301      	movs	r3, #1
 800d61c:	4628      	mov	r0, r5
 800d61e:	47b0      	blx	r6
 800d620:	1c41      	adds	r1, r0, #1
 800d622:	d1c8      	bne.n	800d5b6 <__sflush_r+0x36>
 800d624:	682b      	ldr	r3, [r5, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d0c5      	beq.n	800d5b6 <__sflush_r+0x36>
 800d62a:	2b1d      	cmp	r3, #29
 800d62c:	d001      	beq.n	800d632 <__sflush_r+0xb2>
 800d62e:	2b16      	cmp	r3, #22
 800d630:	d101      	bne.n	800d636 <__sflush_r+0xb6>
 800d632:	602f      	str	r7, [r5, #0]
 800d634:	e7b1      	b.n	800d59a <__sflush_r+0x1a>
 800d636:	89a3      	ldrh	r3, [r4, #12]
 800d638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d63c:	81a3      	strh	r3, [r4, #12]
 800d63e:	e7ad      	b.n	800d59c <__sflush_r+0x1c>
 800d640:	690f      	ldr	r7, [r1, #16]
 800d642:	2f00      	cmp	r7, #0
 800d644:	d0a9      	beq.n	800d59a <__sflush_r+0x1a>
 800d646:	0793      	lsls	r3, r2, #30
 800d648:	680e      	ldr	r6, [r1, #0]
 800d64a:	bf08      	it	eq
 800d64c:	694b      	ldreq	r3, [r1, #20]
 800d64e:	600f      	str	r7, [r1, #0]
 800d650:	bf18      	it	ne
 800d652:	2300      	movne	r3, #0
 800d654:	eba6 0807 	sub.w	r8, r6, r7
 800d658:	608b      	str	r3, [r1, #8]
 800d65a:	f1b8 0f00 	cmp.w	r8, #0
 800d65e:	dd9c      	ble.n	800d59a <__sflush_r+0x1a>
 800d660:	6a21      	ldr	r1, [r4, #32]
 800d662:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d664:	4643      	mov	r3, r8
 800d666:	463a      	mov	r2, r7
 800d668:	4628      	mov	r0, r5
 800d66a:	47b0      	blx	r6
 800d66c:	2800      	cmp	r0, #0
 800d66e:	dc06      	bgt.n	800d67e <__sflush_r+0xfe>
 800d670:	89a3      	ldrh	r3, [r4, #12]
 800d672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d676:	81a3      	strh	r3, [r4, #12]
 800d678:	f04f 30ff 	mov.w	r0, #4294967295
 800d67c:	e78e      	b.n	800d59c <__sflush_r+0x1c>
 800d67e:	4407      	add	r7, r0
 800d680:	eba8 0800 	sub.w	r8, r8, r0
 800d684:	e7e9      	b.n	800d65a <__sflush_r+0xda>
 800d686:	bf00      	nop
 800d688:	dfbffffe 	.word	0xdfbffffe

0800d68c <_fflush_r>:
 800d68c:	b538      	push	{r3, r4, r5, lr}
 800d68e:	690b      	ldr	r3, [r1, #16]
 800d690:	4605      	mov	r5, r0
 800d692:	460c      	mov	r4, r1
 800d694:	b913      	cbnz	r3, 800d69c <_fflush_r+0x10>
 800d696:	2500      	movs	r5, #0
 800d698:	4628      	mov	r0, r5
 800d69a:	bd38      	pop	{r3, r4, r5, pc}
 800d69c:	b118      	cbz	r0, 800d6a6 <_fflush_r+0x1a>
 800d69e:	6a03      	ldr	r3, [r0, #32]
 800d6a0:	b90b      	cbnz	r3, 800d6a6 <_fflush_r+0x1a>
 800d6a2:	f7fe ff47 	bl	800c534 <__sinit>
 800d6a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d0f3      	beq.n	800d696 <_fflush_r+0xa>
 800d6ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d6b0:	07d0      	lsls	r0, r2, #31
 800d6b2:	d404      	bmi.n	800d6be <_fflush_r+0x32>
 800d6b4:	0599      	lsls	r1, r3, #22
 800d6b6:	d402      	bmi.n	800d6be <_fflush_r+0x32>
 800d6b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6ba:	f7ff fa06 	bl	800caca <__retarget_lock_acquire_recursive>
 800d6be:	4628      	mov	r0, r5
 800d6c0:	4621      	mov	r1, r4
 800d6c2:	f7ff ff5d 	bl	800d580 <__sflush_r>
 800d6c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d6c8:	07da      	lsls	r2, r3, #31
 800d6ca:	4605      	mov	r5, r0
 800d6cc:	d4e4      	bmi.n	800d698 <_fflush_r+0xc>
 800d6ce:	89a3      	ldrh	r3, [r4, #12]
 800d6d0:	059b      	lsls	r3, r3, #22
 800d6d2:	d4e1      	bmi.n	800d698 <_fflush_r+0xc>
 800d6d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6d6:	f7ff f9f9 	bl	800cacc <__retarget_lock_release_recursive>
 800d6da:	e7dd      	b.n	800d698 <_fflush_r+0xc>

0800d6dc <fiprintf>:
 800d6dc:	b40e      	push	{r1, r2, r3}
 800d6de:	b503      	push	{r0, r1, lr}
 800d6e0:	4601      	mov	r1, r0
 800d6e2:	ab03      	add	r3, sp, #12
 800d6e4:	4805      	ldr	r0, [pc, #20]	; (800d6fc <fiprintf+0x20>)
 800d6e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6ea:	6800      	ldr	r0, [r0, #0]
 800d6ec:	9301      	str	r3, [sp, #4]
 800d6ee:	f7ff fc9d 	bl	800d02c <_vfiprintf_r>
 800d6f2:	b002      	add	sp, #8
 800d6f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6f8:	b003      	add	sp, #12
 800d6fa:	4770      	bx	lr
 800d6fc:	20000084 	.word	0x20000084

0800d700 <__swhatbuf_r>:
 800d700:	b570      	push	{r4, r5, r6, lr}
 800d702:	460c      	mov	r4, r1
 800d704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d708:	2900      	cmp	r1, #0
 800d70a:	b096      	sub	sp, #88	; 0x58
 800d70c:	4615      	mov	r5, r2
 800d70e:	461e      	mov	r6, r3
 800d710:	da0d      	bge.n	800d72e <__swhatbuf_r+0x2e>
 800d712:	89a3      	ldrh	r3, [r4, #12]
 800d714:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d718:	f04f 0100 	mov.w	r1, #0
 800d71c:	bf0c      	ite	eq
 800d71e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d722:	2340      	movne	r3, #64	; 0x40
 800d724:	2000      	movs	r0, #0
 800d726:	6031      	str	r1, [r6, #0]
 800d728:	602b      	str	r3, [r5, #0]
 800d72a:	b016      	add	sp, #88	; 0x58
 800d72c:	bd70      	pop	{r4, r5, r6, pc}
 800d72e:	466a      	mov	r2, sp
 800d730:	f000 f862 	bl	800d7f8 <_fstat_r>
 800d734:	2800      	cmp	r0, #0
 800d736:	dbec      	blt.n	800d712 <__swhatbuf_r+0x12>
 800d738:	9901      	ldr	r1, [sp, #4]
 800d73a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d73e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d742:	4259      	negs	r1, r3
 800d744:	4159      	adcs	r1, r3
 800d746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d74a:	e7eb      	b.n	800d724 <__swhatbuf_r+0x24>

0800d74c <__smakebuf_r>:
 800d74c:	898b      	ldrh	r3, [r1, #12]
 800d74e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d750:	079d      	lsls	r5, r3, #30
 800d752:	4606      	mov	r6, r0
 800d754:	460c      	mov	r4, r1
 800d756:	d507      	bpl.n	800d768 <__smakebuf_r+0x1c>
 800d758:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d75c:	6023      	str	r3, [r4, #0]
 800d75e:	6123      	str	r3, [r4, #16]
 800d760:	2301      	movs	r3, #1
 800d762:	6163      	str	r3, [r4, #20]
 800d764:	b002      	add	sp, #8
 800d766:	bd70      	pop	{r4, r5, r6, pc}
 800d768:	ab01      	add	r3, sp, #4
 800d76a:	466a      	mov	r2, sp
 800d76c:	f7ff ffc8 	bl	800d700 <__swhatbuf_r>
 800d770:	9900      	ldr	r1, [sp, #0]
 800d772:	4605      	mov	r5, r0
 800d774:	4630      	mov	r0, r6
 800d776:	f7ff fa4b 	bl	800cc10 <_malloc_r>
 800d77a:	b948      	cbnz	r0, 800d790 <__smakebuf_r+0x44>
 800d77c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d780:	059a      	lsls	r2, r3, #22
 800d782:	d4ef      	bmi.n	800d764 <__smakebuf_r+0x18>
 800d784:	f023 0303 	bic.w	r3, r3, #3
 800d788:	f043 0302 	orr.w	r3, r3, #2
 800d78c:	81a3      	strh	r3, [r4, #12]
 800d78e:	e7e3      	b.n	800d758 <__smakebuf_r+0xc>
 800d790:	89a3      	ldrh	r3, [r4, #12]
 800d792:	6020      	str	r0, [r4, #0]
 800d794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d798:	81a3      	strh	r3, [r4, #12]
 800d79a:	9b00      	ldr	r3, [sp, #0]
 800d79c:	6163      	str	r3, [r4, #20]
 800d79e:	9b01      	ldr	r3, [sp, #4]
 800d7a0:	6120      	str	r0, [r4, #16]
 800d7a2:	b15b      	cbz	r3, 800d7bc <__smakebuf_r+0x70>
 800d7a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7a8:	4630      	mov	r0, r6
 800d7aa:	f000 f837 	bl	800d81c <_isatty_r>
 800d7ae:	b128      	cbz	r0, 800d7bc <__smakebuf_r+0x70>
 800d7b0:	89a3      	ldrh	r3, [r4, #12]
 800d7b2:	f023 0303 	bic.w	r3, r3, #3
 800d7b6:	f043 0301 	orr.w	r3, r3, #1
 800d7ba:	81a3      	strh	r3, [r4, #12]
 800d7bc:	89a3      	ldrh	r3, [r4, #12]
 800d7be:	431d      	orrs	r5, r3
 800d7c0:	81a5      	strh	r5, [r4, #12]
 800d7c2:	e7cf      	b.n	800d764 <__smakebuf_r+0x18>

0800d7c4 <memmove>:
 800d7c4:	4288      	cmp	r0, r1
 800d7c6:	b510      	push	{r4, lr}
 800d7c8:	eb01 0402 	add.w	r4, r1, r2
 800d7cc:	d902      	bls.n	800d7d4 <memmove+0x10>
 800d7ce:	4284      	cmp	r4, r0
 800d7d0:	4623      	mov	r3, r4
 800d7d2:	d807      	bhi.n	800d7e4 <memmove+0x20>
 800d7d4:	1e43      	subs	r3, r0, #1
 800d7d6:	42a1      	cmp	r1, r4
 800d7d8:	d008      	beq.n	800d7ec <memmove+0x28>
 800d7da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d7e2:	e7f8      	b.n	800d7d6 <memmove+0x12>
 800d7e4:	4402      	add	r2, r0
 800d7e6:	4601      	mov	r1, r0
 800d7e8:	428a      	cmp	r2, r1
 800d7ea:	d100      	bne.n	800d7ee <memmove+0x2a>
 800d7ec:	bd10      	pop	{r4, pc}
 800d7ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d7f6:	e7f7      	b.n	800d7e8 <memmove+0x24>

0800d7f8 <_fstat_r>:
 800d7f8:	b538      	push	{r3, r4, r5, lr}
 800d7fa:	4d07      	ldr	r5, [pc, #28]	; (800d818 <_fstat_r+0x20>)
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	4604      	mov	r4, r0
 800d800:	4608      	mov	r0, r1
 800d802:	4611      	mov	r1, r2
 800d804:	602b      	str	r3, [r5, #0]
 800d806:	f7f4 fa27 	bl	8001c58 <_fstat>
 800d80a:	1c43      	adds	r3, r0, #1
 800d80c:	d102      	bne.n	800d814 <_fstat_r+0x1c>
 800d80e:	682b      	ldr	r3, [r5, #0]
 800d810:	b103      	cbz	r3, 800d814 <_fstat_r+0x1c>
 800d812:	6023      	str	r3, [r4, #0]
 800d814:	bd38      	pop	{r3, r4, r5, pc}
 800d816:	bf00      	nop
 800d818:	200040a0 	.word	0x200040a0

0800d81c <_isatty_r>:
 800d81c:	b538      	push	{r3, r4, r5, lr}
 800d81e:	4d06      	ldr	r5, [pc, #24]	; (800d838 <_isatty_r+0x1c>)
 800d820:	2300      	movs	r3, #0
 800d822:	4604      	mov	r4, r0
 800d824:	4608      	mov	r0, r1
 800d826:	602b      	str	r3, [r5, #0]
 800d828:	f7f4 fa26 	bl	8001c78 <_isatty>
 800d82c:	1c43      	adds	r3, r0, #1
 800d82e:	d102      	bne.n	800d836 <_isatty_r+0x1a>
 800d830:	682b      	ldr	r3, [r5, #0]
 800d832:	b103      	cbz	r3, 800d836 <_isatty_r+0x1a>
 800d834:	6023      	str	r3, [r4, #0]
 800d836:	bd38      	pop	{r3, r4, r5, pc}
 800d838:	200040a0 	.word	0x200040a0

0800d83c <_sbrk_r>:
 800d83c:	b538      	push	{r3, r4, r5, lr}
 800d83e:	4d06      	ldr	r5, [pc, #24]	; (800d858 <_sbrk_r+0x1c>)
 800d840:	2300      	movs	r3, #0
 800d842:	4604      	mov	r4, r0
 800d844:	4608      	mov	r0, r1
 800d846:	602b      	str	r3, [r5, #0]
 800d848:	f7f4 fa2e 	bl	8001ca8 <_sbrk>
 800d84c:	1c43      	adds	r3, r0, #1
 800d84e:	d102      	bne.n	800d856 <_sbrk_r+0x1a>
 800d850:	682b      	ldr	r3, [r5, #0]
 800d852:	b103      	cbz	r3, 800d856 <_sbrk_r+0x1a>
 800d854:	6023      	str	r3, [r4, #0]
 800d856:	bd38      	pop	{r3, r4, r5, pc}
 800d858:	200040a0 	.word	0x200040a0

0800d85c <abort>:
 800d85c:	b508      	push	{r3, lr}
 800d85e:	2006      	movs	r0, #6
 800d860:	f000 f85a 	bl	800d918 <raise>
 800d864:	2001      	movs	r0, #1
 800d866:	f7f4 f9c4 	bl	8001bf2 <_exit>

0800d86a <_realloc_r>:
 800d86a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d86e:	4680      	mov	r8, r0
 800d870:	4614      	mov	r4, r2
 800d872:	460e      	mov	r6, r1
 800d874:	b921      	cbnz	r1, 800d880 <_realloc_r+0x16>
 800d876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d87a:	4611      	mov	r1, r2
 800d87c:	f7ff b9c8 	b.w	800cc10 <_malloc_r>
 800d880:	b92a      	cbnz	r2, 800d88e <_realloc_r+0x24>
 800d882:	f7ff f951 	bl	800cb28 <_free_r>
 800d886:	4625      	mov	r5, r4
 800d888:	4628      	mov	r0, r5
 800d88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d88e:	f000 f85f 	bl	800d950 <_malloc_usable_size_r>
 800d892:	4284      	cmp	r4, r0
 800d894:	4607      	mov	r7, r0
 800d896:	d802      	bhi.n	800d89e <_realloc_r+0x34>
 800d898:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d89c:	d812      	bhi.n	800d8c4 <_realloc_r+0x5a>
 800d89e:	4621      	mov	r1, r4
 800d8a0:	4640      	mov	r0, r8
 800d8a2:	f7ff f9b5 	bl	800cc10 <_malloc_r>
 800d8a6:	4605      	mov	r5, r0
 800d8a8:	2800      	cmp	r0, #0
 800d8aa:	d0ed      	beq.n	800d888 <_realloc_r+0x1e>
 800d8ac:	42bc      	cmp	r4, r7
 800d8ae:	4622      	mov	r2, r4
 800d8b0:	4631      	mov	r1, r6
 800d8b2:	bf28      	it	cs
 800d8b4:	463a      	movcs	r2, r7
 800d8b6:	f7ff f90a 	bl	800cace <memcpy>
 800d8ba:	4631      	mov	r1, r6
 800d8bc:	4640      	mov	r0, r8
 800d8be:	f7ff f933 	bl	800cb28 <_free_r>
 800d8c2:	e7e1      	b.n	800d888 <_realloc_r+0x1e>
 800d8c4:	4635      	mov	r5, r6
 800d8c6:	e7df      	b.n	800d888 <_realloc_r+0x1e>

0800d8c8 <_raise_r>:
 800d8c8:	291f      	cmp	r1, #31
 800d8ca:	b538      	push	{r3, r4, r5, lr}
 800d8cc:	4604      	mov	r4, r0
 800d8ce:	460d      	mov	r5, r1
 800d8d0:	d904      	bls.n	800d8dc <_raise_r+0x14>
 800d8d2:	2316      	movs	r3, #22
 800d8d4:	6003      	str	r3, [r0, #0]
 800d8d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d8da:	bd38      	pop	{r3, r4, r5, pc}
 800d8dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d8de:	b112      	cbz	r2, 800d8e6 <_raise_r+0x1e>
 800d8e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d8e4:	b94b      	cbnz	r3, 800d8fa <_raise_r+0x32>
 800d8e6:	4620      	mov	r0, r4
 800d8e8:	f000 f830 	bl	800d94c <_getpid_r>
 800d8ec:	462a      	mov	r2, r5
 800d8ee:	4601      	mov	r1, r0
 800d8f0:	4620      	mov	r0, r4
 800d8f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8f6:	f000 b817 	b.w	800d928 <_kill_r>
 800d8fa:	2b01      	cmp	r3, #1
 800d8fc:	d00a      	beq.n	800d914 <_raise_r+0x4c>
 800d8fe:	1c59      	adds	r1, r3, #1
 800d900:	d103      	bne.n	800d90a <_raise_r+0x42>
 800d902:	2316      	movs	r3, #22
 800d904:	6003      	str	r3, [r0, #0]
 800d906:	2001      	movs	r0, #1
 800d908:	e7e7      	b.n	800d8da <_raise_r+0x12>
 800d90a:	2400      	movs	r4, #0
 800d90c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d910:	4628      	mov	r0, r5
 800d912:	4798      	blx	r3
 800d914:	2000      	movs	r0, #0
 800d916:	e7e0      	b.n	800d8da <_raise_r+0x12>

0800d918 <raise>:
 800d918:	4b02      	ldr	r3, [pc, #8]	; (800d924 <raise+0xc>)
 800d91a:	4601      	mov	r1, r0
 800d91c:	6818      	ldr	r0, [r3, #0]
 800d91e:	f7ff bfd3 	b.w	800d8c8 <_raise_r>
 800d922:	bf00      	nop
 800d924:	20000084 	.word	0x20000084

0800d928 <_kill_r>:
 800d928:	b538      	push	{r3, r4, r5, lr}
 800d92a:	4d07      	ldr	r5, [pc, #28]	; (800d948 <_kill_r+0x20>)
 800d92c:	2300      	movs	r3, #0
 800d92e:	4604      	mov	r4, r0
 800d930:	4608      	mov	r0, r1
 800d932:	4611      	mov	r1, r2
 800d934:	602b      	str	r3, [r5, #0]
 800d936:	f7f4 f94c 	bl	8001bd2 <_kill>
 800d93a:	1c43      	adds	r3, r0, #1
 800d93c:	d102      	bne.n	800d944 <_kill_r+0x1c>
 800d93e:	682b      	ldr	r3, [r5, #0]
 800d940:	b103      	cbz	r3, 800d944 <_kill_r+0x1c>
 800d942:	6023      	str	r3, [r4, #0]
 800d944:	bd38      	pop	{r3, r4, r5, pc}
 800d946:	bf00      	nop
 800d948:	200040a0 	.word	0x200040a0

0800d94c <_getpid_r>:
 800d94c:	f7f4 b939 	b.w	8001bc2 <_getpid>

0800d950 <_malloc_usable_size_r>:
 800d950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d954:	1f18      	subs	r0, r3, #4
 800d956:	2b00      	cmp	r3, #0
 800d958:	bfbc      	itt	lt
 800d95a:	580b      	ldrlt	r3, [r1, r0]
 800d95c:	18c0      	addlt	r0, r0, r3
 800d95e:	4770      	bx	lr

0800d960 <_init>:
 800d960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d962:	bf00      	nop
 800d964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d966:	bc08      	pop	{r3}
 800d968:	469e      	mov	lr, r3
 800d96a:	4770      	bx	lr

0800d96c <_fini>:
 800d96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d96e:	bf00      	nop
 800d970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d972:	bc08      	pop	{r3}
 800d974:	469e      	mov	lr, r3
 800d976:	4770      	bx	lr
